(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{356:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return b}));n(0);var r=n(388),s=n(389);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var a={title:"super",sidebar_label:"super"},o=[{value:"为什么要使用 super",id:"为什么要使用-super",children:[]},{value:"super 的两种用法与含义",id:"super-的两种用法与含义",children:[{value:"作为函数使用",id:"作为函数使用",children:[]},{value:"作为对象使用",id:"作为对象使用",children:[]}]},{value:"React class 中的 super",id:"react-class-中的-super",children:[{value:"React 中使用继承 super(props) 的目的",id:"react-中使用继承-superprops-的目的",children:[]},{value:"为什么要传递 props 参数",id:"为什么要传递-props-参数",children:[]},{value:"能用 super() 代替 super(props) 吗",id:"能用-super-代替-superprops-吗",children:[]}]},{value:"更多阅读",id:"更多阅读",children:[]}],l={rightToc:o},i="wrapper";function b(e){var t=e.components,n=p(e,["components"]);return Object(r.b)(i,c({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"为什么要使用-super"},"为什么要使用 super"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"this")," 是由调用者决定的。子类自己的 ",Object(r.b)("inlineCode",{parentName:"p"},"this")," 对象，必须先通过父类的构造函数完成构造，得到与父类同样的",Object(r.b)("strong",{parentName:"p"},"实例属性和方法"),"，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用 ",Object(r.b)("inlineCode",{parentName:"p"},"super")," 方法，子类就得不到 ",Object(r.b)("inlineCode",{parentName:"p"},"this")," 对象，那么对子类的进行加工，加上子类自己的实例属性和方法就无法实现。"),Object(r.b)(s.a,{type:"must",mdxType:"Hint"},"要想在子类中使用 `this` 得先调用 `super()` 将父类 `constructor` 定义的属性和方法挂到自己的 `this` 上后再进行扩展。"),Object(r.b)("h2",{id:"super-的两种用法与含义"},"super 的两种用法与含义"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"super")," 这个关键字有两种用法：作为函数或对象使用，分别指代：",Object(r.b)("strong",{parentName:"p"},"父类构造函数"),"和",Object(r.b)("strong",{parentName:"p"},"父类原型对象"),"。"),Object(r.b)("h3",{id:"作为函数使用"},"作为函数使用"),Object(r.b)("p",null,"作为函数用只能用在子类的构造函数之中，代表父类的构造函数。ES2015 中子类的构造函数规定必须要执行一次 ",Object(r.b)("inlineCode",{parentName:"p"},"super")," 函数。另外如果子类没有指定构造函数，ES2015 会提供默认的类构造函数。因此，没有必要提供一个空构造函数或一个简单地委托给它的父类的构造函数，如下例所示："),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-js"}),'class A {\n   constructor () {\n   }\n}\n\nclass A extends B {\n   /*eslint no-useless-constructor: "error"*/\n   constructor (...args) {\n     super(...args);\n   }\n}\n')),Object(r.b)(s.a,{type:"warning",mdxType:"Hint"},"`super` 虽然代表了父类 A 的构造函数，但是返回的是子类 B 的实例，即 `super` 内部的 `this` 指的是 B 的实例，因此 `super()` 在这里相当于 `A.prototype.constructor.call(this)` 。"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-js"}),"class A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\nnew A() // A\nnew B() // B\n")),Object(r.b)("p",null,"上面代码中， ",Object(r.b)("inlineCode",{parentName:"p"},"new.target")," 指向当前正在执行的函数。可以看到，在 ",Object(r.b)("inlineCode",{parentName:"p"},"super()")," 执行时，它指向的是子类 B 的构造函数，而不是父类 A 的构造函数。也就是说， ",Object(r.b)("inlineCode",{parentName:"p"},"super()")," 内部的 ",Object(r.b)("inlineCode",{parentName:"p"},"this")," 指向的是 B 。"),Object(r.b)("p",null,"作为函数时， ",Object(r.b)("inlineCode",{parentName:"p"},"super()")," 只能用在子类的构造函数之中，用在其他地方就会报错。"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-js"}),"class A {}\n\nclass B extends A {\n  m() {\n    super(); // 报错\n  }\n}\n")),Object(r.b)("h3",{id:"作为对象使用"},"作为对象使用"),Object(r.b)("p",null,"作为对象时在普通方法中，指向的是",Object(r.b)("strong",{parentName:"p"},"父类原型对象"),"，而或父类的非实例或 ",Object(r.b)("inlineCode",{parentName:"p"},"this")," 。在静态方法中，指向父类。"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-js"}),"class A {\n  p() {\n    return 2;\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n    console.log(super.p()); // 2\n  }\n}\n\nlet b = new B();\n")),Object(r.b)("p",null,"上面代码中，子类 B 当中的 ",Object(r.b)("inlineCode",{parentName:"p"},"super.p()")," ，就是将 ",Object(r.b)("inlineCode",{parentName:"p"},"super")," 当作一个对象使用。这时， ",Object(r.b)("inlineCode",{parentName:"p"},"super")," 在普通方法之中，指向 ",Object(r.b)("inlineCode",{parentName:"p"},"A.prototype")," ，所以 ",Object(r.b)("inlineCode",{parentName:"p"},"super.p()")," 就相当于 ",Object(r.b)("inlineCode",{parentName:"p"},"A.prototype.p()")," 。"),Object(r.b)(s.a,{type:"warning",mdxType:"Hint"},"由于 `super` 指向父类的原型对象，所以定义在父类**实例上的方法或属性**，是无法通过 `super` 调用的。"),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-js"}),"class A {\n  constructor() {\n    this.p = 2;\n  }\n}\n\nclass B extends A {\n  get m() {\n    return super.p;\n  }\n}\n\nlet b = new B();\nb.m // undefined\n")),Object(r.b)("p",null,"上面代码中，p 是父类 A 实例的属性， ",Object(r.b)("inlineCode",{parentName:"p"},"super.p")," 就引用不到它。"),Object(r.b)("h2",{id:"react-class-中的-super"},"React class 中的 super"),Object(r.b)("h3",{id:"react-中使用继承-superprops-的目的"},"React 中使用继承 super(props) 的目的"),Object(r.b)("p",null,"React 也必须遵循 JS ，强制在 ",Object(r.b)("inlineCode",{parentName:"p"},"constructor")," 中必须先调用 ",Object(r.b)("inlineCode",{parentName:"p"},"super")," 才能引用 ",Object(r.b)("inlineCode",{parentName:"p"},"this")," 。"),Object(r.b)(s.a,{type:"must",mdxType:"Hint"},"在 React class `constructor` 中使用 `this.props` 得先调用 `super(props)` 。"),Object(r.b)("h3",{id:"为什么要传递-props-参数"},"为什么要传递 props 参数"),Object(r.b)("p",null,"是为了在 ",Object(r.b)("inlineCode",{parentName:"p"},"constructor")," 中 使用 ",Object(r.b)("inlineCode",{parentName:"p"},"this.props")," 。这样在除了 ",Object(r.b)("inlineCode",{parentName:"p"},"constructor")," 的地方，都可以调用 ",Object(r.b)("inlineCode",{parentName:"p"},"this.props"),"，比如 lifecycle，custom methods。"),Object(r.b)("h3",{id:"能用-super-代替-superprops-吗"},"能用 super() 代替 super(props) 吗"),Object(r.b)("p",null,"最好不要，毕竟这样写在逻辑上并不明确确，React 会在",Object(r.b)("strong",{parentName:"p"},"构造函数执行完毕后"),"给 ",Object(r.b)("inlineCode",{parentName:"p"},"this.props")," 赋值。如果这样写使得 ",Object(r.b)("inlineCode",{parentName:"p"},"this.props")," 在 ",Object(r.b)("inlineCode",{parentName:"p"},"super")," 调用一直到构造函数结束期间值为 ",Object(r.b)("inlineCode",{parentName:"p"},"undefined")," ，如下代码所示："),Object(r.b)("pre",null,Object(r.b)("code",c({parentName:"pre"},{className:"language-jsx"}),"class Button extends React.Component {\n constructor(props) {\n   super(); // 😬 我们忘了传入 props\n   console.log(props);      // ✅ {}\n   console.log(this.props); // 😬 undefined\n }\n // ...\n}\n")),Object(r.b)(s.a,{type:"warning",mdxType:"Hint"},"如果我们没有传递参数，React 会在我们的类组件 `constructor` **调用之后**，为我们的组件实例分配 `props` 。"),Object(r.b)(s.a,{type:"better",mdxType:"Hint"},"React 官方文档里面有一句 [Class components should always call the base constructor with props](https://reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class)."),Object(r.b)("h2",{id:"更多阅读"},"更多阅读"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",c({parentName:"li"},{href:"http://es6.ruanyifeng.com/#docs/class-extends#super-%E5%85%B3%E9%94%AE%E5%AD%97"}),"ECMAScript 6 入门：Class 的继承，作者：阮一峰")),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",c({parentName:"li"},{href:"https://www.google.com/url?q=https://overreacted.io/zh-hans/why-do-we-write-super-props/&sa=D&ust=1570507768778000"}),"Why Do We Write super(props)? By Dan"))))}b.isMDXComponent=!0},389:function(e,t,n){"use strict";var r=n(0),s=n.n(r),c=n(391),p=n.n(c),a=(n(390),{better:{name:"推荐",color:"#50c610",icon:s.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},s.a.createElement("g",null,s.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),s.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:s.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},s.a.createElement("g",null,s.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:s.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},s.a.createElement("g",null,s.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:s.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},s.a.createElement("g",null,s.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),s.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),s.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});t.a=function(e){var t=e.type,n=e.children;return s.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(a[t].color)}},s.a.createElement("div",{style:{float:"left"}},a[t].icon),s.a.createElement("div",{dangerouslySetInnerHTML:{__html:p()("<strong>".concat(a[t].name,"</strong>：").concat(n))}}))}},390:function(e,t,n){}}]);