(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return s}));n(0);var a=n(388);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p={id:"code-splitting",title:"Code Splitting",sidebar_label:"Code Splitting"},i=[{value:"Bundling",id:"bundling",children:[]},{value:"Code Splitting",id:"code-splitting",children:[]},{value:"import()",id:"import",children:[]},{value:"React.lazy",id:"reactlazy",children:[{value:"Error boundaries",id:"error-boundaries",children:[]}]},{value:"Route-based code splitting",id:"route-based-code-splitting",children:[]},{value:"Named Exports",id:"named-exports",children:[]}],l={rightToc:i},c="wrapper";function s(e){var t=e.components,n=r(e,["components"]);return Object(a.b)(c,o({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"bundling"},"Bundling"),Object(a.b)("p",null,'Most React apps will have their files "bundled" using tools like\n',Object(a.b)("a",o({parentName:"p"},{href:"https://webpack.js.org/"}),"Webpack"),", ",Object(a.b)("a",o({parentName:"p"},{href:"https://rollupjs.org/"}),"Rollup")," or\n",Object(a.b)("a",o({parentName:"p"},{href:"http://browserify.org/"}),"Browserify"),'.\nBundling is the process of following imported files and merging them into a\nsingle file: a "bundle". This bundle can then be included on a webpage to load\nan entire app at once.'),Object(a.b)("h4",{id:"example"},"Example"),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"App:")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"// app.js\nimport { add } from './math.js';\n\nconsole.log(add(16, 26)); // 42\n")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"// math.js\nexport function add(a, b) {\n  return a + b;\n}\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Bundle:")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"function add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(16, 26)); // 42\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Note:"),Object(a.b)("p",{parentName:"blockquote"},"Your bundles will end up looking a lot different than this.")),Object(a.b)("p",null,"If you're using ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/facebookincubator/create-react-app"}),"Create React App"),", ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/zeit/next.js/"}),"Next.js"),", ",Object(a.b)("a",o({parentName:"p"},{href:"https://www.gatsbyjs.org/"}),"Gatsby"),", or a similar tool, you will have a Webpack setup out of the box to bundle your\napp."),Object(a.b)("p",null,"If you aren't, you'll need to setup bundling yourself. For example, see the\n",Object(a.b)("a",o({parentName:"p"},{href:"https://webpack.js.org/guides/installation/"}),"Installation")," and\n",Object(a.b)("a",o({parentName:"p"},{href:"https://webpack.js.org/guides/getting-started/"}),"Getting Started")," guides on the\nWebpack docs."),Object(a.b)("h2",{id:"code-splitting"},"Code Splitting"),Object(a.b)("p",null,"Bundling is great, but as your app grows, your bundle will grow too. Especially\nif you are including large third-party libraries. You need to keep an eye on\nthe code you are including in your bundle so that you don't accidentally make\nit so large that your app takes a long time to load."),Object(a.b)("p",null,'To avoid winding up with a large bundle, it\'s good to get ahead of the problem\nand start "splitting" your bundle.\n',Object(a.b)("a",o({parentName:"p"},{href:"https://webpack.js.org/guides/code-splitting/"}),"Code-Splitting")," is a feature\nsupported by bundlers like Webpack and Browserify (via\n",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/browserify/factor-bundle"}),"factor-bundle"),") which can create\nmultiple bundles that can be dynamically loaded at runtime."),Object(a.b)("p",null,"Code-splitting your app can help you \"lazy-load\" just the things that are\ncurrently needed by the user, which can dramatically improve the performance of\nyour app. While you haven't reduced the overall amount of code in your app,\nyou've avoided loading code that the user may never need, and reduced the amount\nof code needed during the initial load."),Object(a.b)("h2",{id:"import"},Object(a.b)("inlineCode",{parentName:"h2"},"import()")),Object(a.b)("p",null,"The best way to introduce code-splitting into your app is through the dynamic\n",Object(a.b)("inlineCode",{parentName:"p"},"import()")," syntax."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Before:")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"import { add } from './math';\n\nconsole.log(add(16, 26));\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"After:")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),'import("./math").then(math => {\n  console.log(math.add(16, 26));\n});\n')),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Note:"),Object(a.b)("p",{parentName:"blockquote"},"The dynamic ",Object(a.b)("inlineCode",{parentName:"p"},"import()")," syntax is a ECMAScript (JavaScript)\n",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/tc39/proposal-dynamic-import"}),"proposal")," not currently\npart of the language standard. It is expected to be accepted in the\nnear future.")),Object(a.b)("p",null,"When Webpack comes across this syntax, it automatically starts code-splitting\nyour app. If you're using Create React App, this is already configured for you\nand you can ",Object(a.b)("a",o({parentName:"p"},{href:"https://facebook.github.io/create-react-app/docs/code-splitting"}),"start using it")," immediately. It's also supported\nout of the box in ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/zeit/next.js/#dynamic-import"}),"Next.js"),"."),Object(a.b)("p",null,"If you're setting up Webpack yourself, you'll probably want to read Webpack's\n",Object(a.b)("a",o({parentName:"p"},{href:"https://webpack.js.org/guides/code-splitting/"}),"guide on code splitting"),". Your Webpack config should look vaguely ",Object(a.b)("a",o({parentName:"p"},{href:"https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269"}),"like this"),"."),Object(a.b)("p",null,"When using ",Object(a.b)("a",o({parentName:"p"},{href:"https://babeljs.io/"}),"Babel"),", you'll need to make sure that Babel can\nparse the dynamic import syntax but is not transforming it. For that you will need ",Object(a.b)("a",o({parentName:"p"},{href:"https://yarnpkg.com/en/package/babel-plugin-syntax-dynamic-import"}),"babel-plugin-syntax-dynamic-import"),"."),Object(a.b)("h2",{id:"reactlazy"},Object(a.b)("inlineCode",{parentName:"h2"},"React.lazy")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Note:"),Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},"React.lazy")," and Suspense are not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we recommend ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/smooth-code/loadable-components"}),"Loadable Components"),". It has a nice ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/smooth-code/loadable-components/blob/master/packages/server/README.md"}),"guide for bundle splitting with server-side rendering"),".")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"React.lazy")," function lets you render a dynamic import as a regular component."),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Before:")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"import OtherComponent from './OtherComponent';\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"After:")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const OtherComponent = React.lazy(() => import('./OtherComponent'));\n")),Object(a.b)("p",null,"This will automatically load the bundle containing the ",Object(a.b)("inlineCode",{parentName:"p"},"OtherComponent")," when this component is first rendered."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"React.lazy")," takes a function that must call a dynamic ",Object(a.b)("inlineCode",{parentName:"p"},"import()"),". This must return a ",Object(a.b)("inlineCode",{parentName:"p"},"Promise")," which resolves to a module with a ",Object(a.b)("inlineCode",{parentName:"p"},"default")," export containing a React component."),Object(a.b)("p",null,"The lazy component should then be rendered inside a ",Object(a.b)("inlineCode",{parentName:"p"},"Suspense")," component, which allows us to show some fallback content (such as a loading indicator) while we're waiting for the lazy component to load."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <OtherComponent />\n      </Suspense>\n    </div>\n  );\n}\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"fallback")," prop accepts any React elements that you want to render while waiting for the component to load. You can place the ",Object(a.b)("inlineCode",{parentName:"p"},"Suspense")," component anywhere above the lazy component. You can even wrap multiple lazy components with a single ",Object(a.b)("inlineCode",{parentName:"p"},"Suspense")," component."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const OtherComponent = React.lazy(() => import('./OtherComponent'));\nconst AnotherComponent = React.lazy(() => import('./AnotherComponent'));\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <section>\n          <OtherComponent />\n          <AnotherComponent />\n        </section>\n      </Suspense>\n    </div>\n  );\n}\n")),Object(a.b)("h3",{id:"error-boundaries"},"Error boundaries"),Object(a.b)("p",null,"If the other module fails to load (for example, due to network failure), it will trigger an error. You can handle these errors to show a nice user experience and manage recovery with ",Object(a.b)("a",o({parentName:"p"},{href:"/docs/error-boundaries.html"}),"Error Boundaries"),". Once you've created your Error Boundary, you can use it anywhere above your lazy components to display an error state when there's a network error."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"import MyErrorBoundary from './MyErrorBoundary';\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\nconst AnotherComponent = React.lazy(() => import('./AnotherComponent'));\n\nconst MyComponent = () => (\n  <div>\n    <MyErrorBoundary>\n      <Suspense fallback={<div>Loading...</div>}>\n        <section>\n          <OtherComponent />\n          <AnotherComponent />\n        </section>\n      </Suspense>\n    </MyErrorBoundary>\n  </div>\n);\n")),Object(a.b)("h2",{id:"route-based-code-splitting"},"Route-based code splitting"),Object(a.b)("p",null,"Deciding where in your app to introduce code splitting can be a bit tricky. You\nwant to make sure you choose places that will split bundles evenly, but won't\ndisrupt the user experience."),Object(a.b)("p",null,"A good place to start is with routes. Most people on the web are used to\npage transitions taking some amount of time to load. You also tend to be\nre-rendering the entire page at once so your users are unlikely to be\ninteracting with other elements on the page at the same time."),Object(a.b)("p",null,"Here's an example of how to setup route-based code splitting into your app using\nlibraries like ",Object(a.b)("a",o({parentName:"p"},{href:"https://reacttraining.com/react-router/"}),"React Router")," with ",Object(a.b)("inlineCode",{parentName:"p"},"React.lazy"),"."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport React, { Suspense, lazy } from 'react';\n\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\n\nconst App = () => (\n  <Router>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n        <Route exact path=\"/\" component={Home}/>\n        <Route path=\"/about\" component={About}/>\n      </Switch>\n    </Suspense>\n  </Router>\n);\n")),Object(a.b)("h2",{id:"named-exports"},"Named Exports"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"React.lazy")," currently only supports default exports. If the module you want to import uses named exports, you can create an intermediate module that reexports it as the default. This ensures that tree shaking keeps working and that you don't pull in unused components."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"// ManyComponents.js\nexport const MyComponent = /* ... */;\nexport const MyUnusedComponent = /* ... */;\n")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),'// MyComponent.js\nexport { MyComponent as default } from "./ManyComponents.js";\n')),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"// MyApp.js\nimport React, { lazy } from 'react';\nconst MyComponent = lazy(() => import(\"./MyComponent.js\"));\n")))}s.isMDXComponent=!0},388:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return b}));var a=n(0),o=n.n(a),r=o.a.createContext({}),p=function(e){var t=o.a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=p(e.components);return o.a.createElement(r.Provider,{value:t},e.children)};var l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),s=p(n),b=a,u=s[i+"."+b]||s[b]||c[b]||r;return n?o.a.createElement(u,Object.assign({},{ref:t},l,{components:n})):o.a.createElement(u,Object.assign({},{ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=s;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[l]="string"==typeof e?e:a,p[1]=i;for(var b=2;b<r;b++)p[b]=n[b];return o.a.createElement.apply(null,p)}return o.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);