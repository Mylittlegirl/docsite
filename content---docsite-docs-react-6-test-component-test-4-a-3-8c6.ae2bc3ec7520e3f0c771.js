(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{142:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));n(0);var a=n(193);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c={id:"component-test",title:"组件测试",sidebar_label:"组件测试"},l=[{value:"组件测试基础概念",id:"组件测试基础概念",children:[{value:"快照测试",id:"快照测试",children:[]},{value:"浅渲染",id:"浅渲染",children:[]},{value:"全渲染",id:"全渲染",children:[]}]},{value:"组件测试框架",id:"组件测试框架",children:[{value:"Jest 组件测试",id:"jest-组件测试",children:[]},{value:"Enzyme 组件测试",id:"enzyme-组件测试",children:[]}]},{value:"编写组件测试",id:"编写组件测试",children:[{value:"测试 rendering",id:"测试-rendering",children:[]},{value:"测试 props",id:"测试-props",children:[]},{value:"测试 events",id:"测试-events",children:[]},{value:"测试 event handlers",id:"测试-event-handlers",children:[]}]}],p={rightToc:l},b="wrapper";function s(e){var t=e.components,n=o(e,["components"]);return Object(a.b)(b,r({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"组件测试本身就是单元测试，但是其又包括快照测试（Snapshot Test）这种特有的测试。"),Object(a.b)("h2",{id:"组件测试基础概念"},"组件测试基础概念"),Object(a.b)("h3",{id:"快照测试"},"快照测试"),Object(a.b)("p",null,"一般的快照测试是测试你的渲染组件的图片，并将其与组件的以前的图片进行比较。Jest 的快照测试也是其特有的功能，它不是拍摄渲染组件的图片，而是渲染组件 ",Object(a.b)("strong",{parentName:"p"},"标记")," 的快照。 这使得 Jest 快照测试比传统快照测试快得多。"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"如何生成快照？")),Object(a.b)("p",null,"Jest 首次运行快照测试，会让 UI 框架生产一个可读的快照，再次测试时便会通过比对快照文件和新 UI 框架产生的快照判断测试是否通过。对于 React ，我们可以通过下面的方法生产一个快照："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport Link from '../Link.react';\nimport renderer from 'react-test-renderer';\n\nit('should renders correctly', () => {\n    const tree = renderer.create(\n        <Link page=\"http://www.facebook.com\">Facebook</Link>\n    ).toJSON();\n    expect(tree).toMatchSnapshot();\n});\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"快照长什么样？")),Object(a.b)("p",null,"运行快照测试的时候将会自动生成一份以 ",Object(a.b)("inlineCode",{parentName:"p"},".snap")," 结尾的文件，一般在该组件所在文件夹下的 ",Object(a.b)("inlineCode",{parentName:"p"},"snapshots")," 文件夹。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),'exports[`should renders correctly 1`] = `\n<a\n    className="normal"\n    href="http://www.facebook.com"\n    onMouseEnter={[Function]}\n    onMouseLeave={[Function]}\n>\n    Facebook\n</a>\n`;\n')),Object(a.b)("p",null,"如果测试用例中调用两次快照方法 ",Object(a.b)("inlineCode",{parentName:"p"},".toMatchSnapshot()")," 那么会生成两个快照："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),'exports[`should renders correctly 1`] = `\n<a\n    className="normal"\n    href="http://www.facebook.com"\n    onMouseEnter={[Function]}\n    onMouseLeave={[Function]}\n>\n    Facebook\n</a>\n`;\n\nexports[`should renders correctly 2`] = `\n<a\n    className="normal"\n    href="http://www.facebook.com"\n    onMouseEnter={[Function]}\n    onMouseLeave={[Function]}\n>\n    Facebook\n</a>\n`;\n')),Object(a.b)("p",null,"这个可读的快照文件以可读的形式展示了 React 渲染出的 DOM 结构。相比于肉眼观察效果的 UI 测试，快照测试直接由Jest进行比对、速度更快；而且由于直接展示了 DOM 结构，也能让我们在检查快照的时候，快速、准确地发现问题。"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"如何更新快照？")),Object(a.b)("p",null,Object(a.b)("img",r({parentName:"p"},{src:"https://raw.githubusercontent.com/ThinkBucket/oss/master/image-1.png",alt:"how to update snapshot test"}))),Object(a.b)("p",null,"详细参考：",Object(a.b)("a",r({parentName:"p"},{href:"https://jestjs.io/docs/zh-Hans/snapshot-testing"}),"https://jestjs.io/docs/zh-Hans/snapshot-testing")),Object(a.b)("h3",{id:"浅渲染"},"浅渲染"),Object(a.b)("p",null,"浅渲染（shallow rendering）意思就是只渲染组件中的第一层，这样测试执行器就不需要关心 DOM 和执行环境了。"),Object(a.b)("p",null,"在实际开发中，组件的层级非常深，所以测试顶层组件时，如果需要把所有子组件全部渲染出来，成本变得非常高。因为 React 组件良好的封装性，测试组件时，大部分测试只需要关注组件本身，它的子组件测试应该在子组件的测试代码里做。这样测试执行得更快。"),Object(a.b)("p",null,"但浅渲染的优点也对于着其缺点：只能测试一级节点，如果需要测试子组件，那就只能做全渲染。"),Object(a.b)("p",null,"例如有如下组件："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"const ButtonWithIcon = ({icon, children}) => (\n    <button><Icon icon={icon} />{children}</button>\n);\n")),Object(a.b)("p",null,"React 渲染后："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-html"}),'<button>\n    <i class="icon icon_coffee"></i>\n    Hello Jest!\n</button>\n')),Object(a.b)("p",null,"但是如果经过 shallow rendering 将会是这样:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-html"}),'<button>\n    <Icon icon="coffee" />\n    Hello Jest!\n</button>\n')),Object(a.b)("p",null,"注意 Icon 组件并没有被渲染。"),Object(a.b)("h3",{id:"全渲染"},"全渲染"),Object(a.b)("p",null,"全渲染（full rendering）就是完整渲染出当前组件及其所有子组件，就像在真实浏览器渲染那样，当组件内部直接改变了 DOM 时，就需要使用全渲染来测试。全渲染需要真实地模拟 DOM 环境，流行的做法有以下几种："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"使用 JSDOM"),"：使用 JS 模拟 DOM 环境，能满足90%的使用场景。这是 Jest 内部所使用的全渲染框架。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"使用 Cheerio"),"：类似 JSDOM，更轻的实现，类似 jQuery 的语法。这是 Enzyme 内部使用的全渲染框架。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"使用 Karma"),"：在真实的浏览器中执行测试，也支持在多个浏览器中依次执行测试，使用的是真实DOM 环境，但速度稍慢。")),Object(a.b)("h2",{id:"组件测试框架"},"组件测试框架"),Object(a.b)("h3",{id:"jest-组件测试"},"Jest 组件测试"),Object(a.b)("p",null,"Jest 在组件测试方面特点有："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"特有的快照测试功能："),"通过比对 UI 代码生成的快照文件，确保组件呈现正确的样式。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"JSDOM"),"：不需要真实 DOM 环境执行，而是 JSDOM 模拟的 DOM。")),Object(a.b)("p",null,"以上的例子如果用 Jest 来写，如下："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport renderer from 'react-test-renderer';\nimport ButtonWithIcon from './ButtonWithIcon';\n\nit('should render ButtonWithIcon correctly', () => {\n  const component = renderer.create(ButtonWithIcon({'coffee', 'Hello Jest!'}));\n  expect(result.type).toBe('button');\n  expect(result.props.children).toEqual([\n    <Icon icon=\"coffee\" />,\n    'Hello Jest!'\n  ])\n})\n")),Object(a.b)("h3",{id:"enzyme-组件测试"},"Enzyme 组件测试"),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"http://airbnb.io/enzyme/"}),"Enzyme")," 是由 Airbnb 开源的 React 组件测试框架，与 Jest 的组件测试相比，Enzyme 提供类似 jQuery 操作 DOM 的语法，在做测试断言时更灵活、易用。"),Object(a.b)("p",null,"Enzyme 提供 3 种不同的方式来测试组件："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"http://airbnb.io/enzyme/docs/api/shallow.html"}),Object(a.b)("strong",{parentName:"a"},"shallow")),"：推荐的方式，浅渲染，只会渲染本地组件内容（只渲染不包含 children 的组件），引用的外部组件不会渲染，提供更好的隔离性。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"http://airbnb.io/enzyme/docs/api/render.html"}),Object(a.b)("strong",{parentName:"a"},"render")),"：如果 shallow 不能满足，才会使用它，能够渲染所有的子组件。基于 Cheerio 来模拟 DOM 环境（Cheerio 是类似 JSDOM 的另一框架）。"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"http://airbnb.io/enzyme/docs/api/mount.html"}),Object(a.b)("strong",{parentName:"a"},"mount")),"：类似 render，会做全渲染，对测试生命周期非常有用，能够访问到组件的生命周期方法，比如 ",Object(a.b)("inlineCode",{parentName:"li"},"componentDidUpdate")," 等。一般用于集成测试。")),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"http://airbnb.io/enzyme/docs/api/selector.html"}),"Enzyme Selector")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"推荐"),"：一般组件的快照测试使用 shallow 方法即可。")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"推荐"),"：如果要测试子组件，并且对组件的生命周期等方法不怎么关注，使用 render 方法。")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"推荐"),"：如果要测试组件生命周期方法、子组件，使用 mount 方法。")),Object(a.b)("h2",{id:"编写组件测试"},"编写组件测试"),Object(a.b)("h3",{id:"测试-rendering"},"测试 rendering"),Object(a.b)("p",null,"对于大部分非交互组件使用 ",Object(a.b)("inlineCode",{parentName:"p"},"toMatchSnapshot()")," 即可："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"import { shallow } from 'enzyme';\n\nit('should render a label', () => {\n    const wrapper = shallow(\n        <Label>Hello Jest!</Label>\n    );\n    expect(wrapper).toMatchSnapshot();\n});\n\nit('should render a small label', () => {\n    const wrapper = shallow(\n        <Label small>Hello Jest!</Label>\n    );\n    expect(wrapper).toMatchSnapshot();\n});\n\nit('should render a grayish label', () => {\n    const wrapper = shallow(\n        <Label light>Hello Jest!</Label>\n    );\n    expect(wrapper).toMatchSnapshot();\n});\n")),Object(a.b)("p",null,"写组件测试的时候需要将 Enzyme 和 Jest 结合起来使用，两者是互补的，它们已经是 React 应用测试中大家公认的标准库。"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"注意"),"：这种直接使用 ",Object(a.b)("inlineCode",{parentName:"p"},"toMatchSnapshot()")," 方法的测试比较笼统、简单粗暴，且没有针对性，只是比较方便，权衡使用。")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"注意"),"：每调一次 ",Object(a.b)("inlineCode",{parentName:"p"},"toMatchSnapshot()")," 方法就会生成一份快照，虽然还是一个快照文件，但里面可能会有不同状态的快照。")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"注意"),"：快照测试抛错不过，不一定是写代码有问题，有可能组件加入了新属性等原因导致的，属于正常的，手动更新一下快照即可。")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"注意"),"：使用snapshot test后组件的测试覆盖率将会大幅提高，部分会达到100%。")),Object(a.b)("h3",{id:"测试-props"},"测试 ",Object(a.b)("strong",{parentName:"h3"},"props")),Object(a.b)("p",null,"有时候你想更有针对性地测试，比如组件的某个属性是否渲染正确，你可以使用 Enzyme API + Jest 断言的组合方式："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"it('should render a document title', () => {\n    const props = { title: 'Events' }\n    const wrapper = shallow(<DocumentTitle {...props} />);\n    expect(wrapper.prop('title')).toEqual('Events');\n});\n\nit('should render a document title and a parent title', () => {\n    const props = { title: 'Events', parent: 'Event Radar' }\n    const wrapper = shallow(<DocumentTitle {...props} />);\n    expect(wrapper.prop('title')).toEqual('Events — Event Radar');\n});\n")),Object(a.b)("p",null,"在某些情况下是不太适合使用 ",Object(a.b)("inlineCode",{parentName:"p"},"toMatchSnapshot()")," 的，例如组件中 id 属性是随机产生的："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"it('should render a popover with a random ID', () => {\n    const wrapper = shallow(\n        <Popover>Hello Jest!</Popover>\n    );\n    expect(wrapper.prop('id')).toMatch(/Popover\\d+/);\n});\n")),Object(a.b)("p",null,"如果用 ",Object(a.b)("inlineCode",{parentName:"p"},"toMatchSnapshot()")," 的话每次测试都会不过，需要不断更新快照。"),Object(a.b)("h3",{id:"测试-events"},"测试 ",Object(a.b)("strong",{parentName:"h3"},"events")),Object(a.b)("p",null,"Enzyme 可以模拟事件操作后（例如 click 或 change等）再和测试快照进行对比："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"it('should render Markdown in preview mode when click toggle-preview', () => {\n    const wrapper = shallow(\n        <MarkdownEditor value=\"**Hello** Jest!\" />\n    );\n    expect(wrapper).toMatchSnapshot();\n    wrapper.find('[name=\"toggle-preview\"]').simulate('click');\n    expect(wrapper).toMatchSnapshot();\n});\n")),Object(a.b)("p",null,"如果你需要测试与组件中某一个元素或子组件的交互，此时需要调用 Enzyme 中的 ",Object(a.b)("inlineCode",{parentName:"p"},"render/mount")," 方法而不是 ",Object(a.b)("inlineCode",{parentName:"p"},"shallow")," 方法："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"it('should open a code editor after clicked the button', () => {\n    const wrapper = render(\n        <Playground code={code} />\n    );\n    expect(wrapper.find('.ReactCodeMirror')).toHaveLength(0);\n    wrapper.find('button').simulate('click');\n    expect(wrapper.find('.ReactCodeMirror')).toHaveLength(1);\n});\n")),Object(a.b)("h3",{id:"测试-event-handlers"},"测试 ",Object(a.b)("strong",{parentName:"h3"},"event handlers")),Object(a.b)("p",null,"和 Testing events 差不多，主要区别是 Testing events 关注的是事件后对组件渲染产生的影响，而 Testing event handlers 关注的是事件处理函数："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"it('should pass a selected value to the onChange handler', () => {\n    const value = '2';\n    const onChange = jest.fn();\n    const wrapper = shallow(\n        <Select items={ITEMS} onChange={onChange} />\n    );\n    expect(wrapper).toMatchSnapshot();\n    wrapper.find('select').simulate('change', {\n        target: { value },\n    });\n    expect(onChange).toBeCalledWith(value);\n});\n")))}s.isMDXComponent=!0},193:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return i}));var a=n(0),r=n.n(a),o=r.a.createContext({}),c=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=c(e.components);return r.a.createElement(o.Provider,{value:t},e.children)};var p="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),s=c(n),i=a,u=s[l+"."+i]||s[i]||b[i]||o;return n?r.a.createElement(u,Object.assign({},{ref:t},p,{components:n})):r.a.createElement(u,Object.assign({},{ref:t},p))}));function i(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=s;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l[p]="string"==typeof e?e:a,c[1]=l;for(var i=2;i<o;i++)c[i]=n[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);