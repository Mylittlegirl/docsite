(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{206:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return d}));n(0);var o=n(438),l=n(439);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c={title:"正则表达式",sidebar_label:"正则表达式"},i=[{value:"捕获",id:"捕获",children:[{value:"捕获型 ( )",id:"捕获型--",children:[]},{value:"嵌套分组的捕获",id:"嵌套分组的捕获",children:[]},{value:"反向引用",id:"反向引用",children:[]},{value:"非捕获型 (?: )",id:"非捕获型--",children:[]},{value:"正向前瞻型 (?= )",id:"正向前瞻型--",children:[]},{value:"反向前瞻型 (?! )",id:"反向前瞻型--",children:[]}]}],s={rightToc:i},b="wrapper";function d(e){var t=e.components,n=r(e,["components"]);return Object(o.b)(b,a({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"捕获"},"捕获"),Object(o.b)("p",null,"正则表达式中用 ",Object(o.b)("inlineCode",{parentName:"p"},"()")," 来表示分组，例如：",Object(o.b)("inlineCode",{parentName:"p"},"/([0-9])/"),"，",Object(o.b)("inlineCode",{parentName:"p"},"()")," 会把每个分组里匹配的值保存起来。"),Object(o.b)("h3",{id:"捕获型--"},"捕获型 ( )"),Object(o.b)("h4",{id:"捕获与引用"},"捕获与引用"),Object(o.b)("p",null,"被正则表达式匹配到的字符串会被暂存起来，其中分组捕获的串从 1 开始编号，",Object(o.b)("inlineCode",{parentName:"p"},"$1")," 表示第一个被捕获的串， ",Object(o.b)("inlineCode",{parentName:"p"},"$2")," 是第二个，以此类推，我们可以通过 ",Object(o.b)("inlineCode",{parentName:"p"},"$1，$2...")," 引用这些串。"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /(\\d{4})-(\\d{2})-(\\d{2})/\nlet data = '2017-10-24'\nreg.test(data)\nRegExp.$1 //2017\nRegExp.$2 //10\nRegExp.$3 //24\n")),Object(o.b)("h4",{id:"与-replace-配合"},"与 replace 配合"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"String.prototype.replace")," 方法的传参中可以直接引用被捕获的串。比如我们想将日期 ",Object(o.b)("inlineCode",{parentName:"p"},"10.24/2017")," 改为 ",Object(o.b)("inlineCode",{parentName:"p"},"2017-10-24")," ："),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /(\\d{2})\\.(\\d{2})\\/(\\d{4})/\nlet data = '10.24/2017'\ndata = data.replace(reg, '$3-$1-$2')\nconsole.log(data) //2017-10-24\n")),Object(o.b)("p",null,"给 ",Object(o.b)("inlineCode",{parentName:"p"},"replace")," 传递迭代函数可以优雅地解决一些问题："),Object(o.b)("p",null,"将违禁词转换为等字数的星号是一个常见的需求，比如文本是 ",Object(o.b)("inlineCode",{parentName:"p"},"dot is a doubi")," ，其中 ",Object(o.b)("inlineCode",{parentName:"p"},"dot")," 和 ",Object(o.b)("inlineCode",{parentName:"p"},"doubi")," 是违禁词，转换后应为 ",Object(o.b)("inlineCode",{parentName:"p"},"*** is a *****")," 。"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /(dot|doubi)/g\nlet str = 'dot is a doubi'\nstr = str.replace(reg, function (word) {\n    return word.replace(/./g, '*')\n})\nconsole.log(str) //*** is a *****\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"replace")," 与正则捕获组匹配还有一个常见用法，将浮点数左边的数从右向左每三位添加一个逗号，匹配全局中，数字后面跟随的是（以 ",Object(o.b)("inlineCode",{parentName:"p"},".")," 结尾的、三个数字的分组至少有一组）的串。"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"function commafy(num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+\\.)/g, function ($2) {\n        return $2 + ','\n    })\n}\nconsole.log(commafy(1200000000.11)) //1,200,000,000.11\nconsole.log(commafy(123246723749.213769283)) //123,246,723,749.21378\n")),Object(o.b)("h3",{id:"嵌套分组的捕获"},"嵌套分组的捕获"),Object(o.b)("p",null,"如果碰到类似 ",Object(o.b)("inlineCode",{parentName:"p"},"/((dot) is (a (doubi)))/")," 这种嵌套分组，规则是以左括号出现的顺序进行捕获。"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /((dot) is (a (doubi)))/\nlet str = 'dot is a doubi'\nreg.test(str)//true\nconsole.log(RegExp.$1) //dot is a doubi\nconsole.log(RegExp.$2) //dot\nconsole.log(RegExp.$3) //a doubi\nconsole.log(RegExp.$4) //doubi\n")),Object(o.b)("h3",{id:"反向引用"},"反向引用"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /(\\w{3}) is \\1/\nconsole.log(reg.test('dot is dot')) //true\nconsole.log(reg.test('dolby is dolby')) //false\nconsole.log(reg.test('dot is tod')) //false\nconsole.log(reg.test('dolby is dlboy')) //false\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"\\1")," 引用了第一个被分组所捕获的串，本例中即 ",Object(o.b)("inlineCode",{parentName:"p"},"(\\w{3})")," ，表达式是动态决定的，如果编号越界了会被当成普通的表达式。"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /(\\w{3}) is \\3/\nconsole.log(reg.test('dot is \\3')) //true\nconsole.log(reg.test('dolby is dolby')) //false\n")),Object(o.b)("h3",{id:"非捕获型--"},"非捕获型 (?: )"),Object(o.b)("p",null,"有时我们只是想分个组，并没有捕获的需求，这种情况下可以使用非捕获性分组，语法为 ",Object(o.b)("inlineCode",{parentName:"p"},"(?:)")," 。"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /(?:\\d{4})-(\\d{2})-(\\d{2})/\nlet date = '2017-10-24'\nconsole.log(reg.test(date)) //true\nconsole.log(RegExp.$1) //10\nconsole.log(RegExp.$2) //24\n")),Object(o.b)("p",null,"这个例子中，",Object(o.b)("inlineCode",{parentName:"p"},"(?:\\d{4})")," 分组不会捕获任何串，所以 ",Object(o.b)("inlineCode",{parentName:"p"},"$1")," 为 ",Object(o.b)("inlineCode",{parentName:"p"},"(\\d{2})")," 捕获的串。"),Object(o.b)("h3",{id:"正向前瞻型--"},"正向前瞻型 (?= )"),Object(o.b)(l.a,{type:"warning",mdxType:"Hint"},"前瞻型分组不会捕获值"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /dot is a (?=doubi)/\nconsole.log(reg.test('dot is a doubi')) //true\nconsole.log(reg.test('dot is a shadou')) //false\n")),Object(o.b)("p",null,"这个正则要求 ",Object(o.b)("inlineCode",{parentName:"p"},"dot is a")," 后面要跟上 ",Object(o.b)("inlineCode",{parentName:"p"},"doubi")," 才匹配成功。"),Object(o.b)("h3",{id:"反向前瞻型--"},"反向前瞻型 (?! )"),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let reg = /dot is a (?!doubi)/\nconsole.log(reg.test('dot is a doubi')) //false\nconsole.log(reg.test('dot is a shadou')) //true\n")),Object(o.b)("p",null,"这个正则要求 ",Object(o.b)("inlineCode",{parentName:"p"},"dot is a")," 后面除了跟上 ",Object(o.b)("inlineCode",{parentName:"p"},"doubi")," ，都能匹配成功。"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Q：前瞻型分组与非捕获型都不会捕获值，那么它们的区别是什么？")),Object(o.b)("p",null,"A： 非捕获型分组匹配到的串仍会被外层的捕获型分组捕获到，但前瞻型却不会，当你需要参考后面的值，又不想连它一起捕获时，前瞻型分组就派上用场了："),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{className:"language-js"}),"let str = 'dot is a doubi'\nlet reg = /dot is a (?:doubi)/\nconsole.log(reg.test(str)) //true\nconsole.log(RegExp.$1) //无结果\n\nreg = /dot is a (?=doubi)/\nconsole.log(reg.test(str)) //true\nconsole.log(RegExp.$1) //无结果\n\nreg = /(dot is a (?:doubi))/\nconsole.log(reg.test(str)) //true\nconsole.log(RegExp.$1) //dot is a doubi\n\nreg = /(dot is a (?=doubi))/\nconsole.log(reg.test(str)) //true\nconsole.log(RegExp.$1) //dot is a\n")))}d.isMDXComponent=!0},439:function(e,t,n){"use strict";var o=n(0),l=n.n(o),a=n(441),r=n.n(a),c=(n(440),{best:{name:"推荐",color:"#50c610",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),l.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},l.a.createElement("g",null,l.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},l.a.createElement("g",null,l.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),l.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),l.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});t.a=function(e){var t=e.type,n=e.children;return l.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(c[t].color)}},l.a.createElement("div",{style:{float:"left"}},c[t].icon),l.a.createElement("div",{dangerouslySetInnerHTML:{__html:r()("<strong>".concat(c[t].name,"</strong>：").concat(n))}}))}},440:function(e,t,n){}}]);