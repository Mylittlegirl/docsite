(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{208:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return s}));n(0);var a=n(388),c=n(389);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var n,a,c=function(e,t){if(null==e)return{};var n,a,c={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i={id:"event",title:"事件",sidebar_label:"事件"},o=[{value:"合成事件与原生事件",id:"合成事件与原生事件",children:[{value:"合成事件",id:"合成事件",children:[]},{value:"原生事件",id:"原生事件",children:[]}]},{value:"合成事件的绑定",id:"合成事件的绑定",children:[{value:"方式一：render 时绑定",id:"方式一：render-时绑定",children:[]},{value:"方式二：创建实例时绑定",id:"方式二：创建实例时绑定",children:[]}]}],b={rightToc:o},p="wrapper";function s(e){var t=e.components,n=l(e,["components"]);return Object(a.b)(p,r({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"合成事件与原生事件"},"合成事件与原生事件"),Object(a.b)("h3",{id:"合成事件"},"合成事件"),Object(a.b)("p",null,"在 JSX 中直接绑定的事件，如"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),'<a ref="aTag" onClick={(e)=>this.handleClick(e)}>UPDATE</a>\n')),Object(a.b)("p",null,"这里的 ",Object(a.b)("inlineCode",{parentName:"p"},"handleClick")," 事件就是合成事件。"),Object(a.b)("p",null,"VirtualDOM 在内存中是以 ",Object(a.b)("strong",{parentName:"p"},"对象")," 的形式存在，React 基于 VirtualDOM 实现了一个 SyntheticEvent（合成事件）层，我们所定义的事件处理器会接收到一个 SyntheticEvent 对象的实例（比如",Object(a.b)("inlineCode",{parentName:"p"},"handleChange(reactEvent)"),"），且与原生的浏览器事件有同样的接口。"),Object(a.b)(c.a,{type:"warning",mdxType:"Hint"},"React 使用事件委托机制，会将所有的事件都绑定在最外层\\(`document`\\)元素上，依赖事件的冒泡机制完成委派，在冒泡阶段处理事件，不支持捕获阶段处理事件。"),Object(a.b)(c.a,{type:"better",mdxType:"Hint"},"阻止合成事件间的冒泡，用 `e.stopPropagation()` 。"),Object(a.b)("h3",{id:"原生事件"},"原生事件"),Object(a.b)("p",null,"通过 JS 原生代码绑定的事件，如："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),"document.body.addEventListener('click',e => {\n  // 通过e.target判断阻止冒泡\n  if(e.target && e.target.matches('a')){\n    return;\n  }\n  console.log('body');\n})\n// 或\nthis.refs.update.addEventListener('click',e => {\n  console.log('update');\n});\n")),Object(a.b)("p",null,"Q：为什么有时候还需要原生事件？"),Object(a.b)("p",null,"A：react 的 app 一般是挂在 body 下面某个div 结点上，如果我想将事件绑定在 body 上（比如监听 body 的滚动事件，window 的 resize 事件）就需要用原生事件。实际上，react 合成事件只是原生 DOM 事件的一个子集，它仅仅实现了 ",Object(a.b)("a",r({parentName:"p"},{href:"https://www.w3.org/TR/DOM-Level-3-Events/"}),"DOM Level 3")," 的事件接口，并且统一了浏览器的兼容问题，有些事件 React 并没有实现。"),Object(a.b)("p",null,"Q：在什么生命周期才可以绑定原生事件？"),Object(a.b)("p",null,"A：组件挂载完成之后，即 componentDidMount。"),Object(a.b)(c.a,{type:"must",mdxType:"Hint"},"一定要在组件卸载（componentWillUnmount）时手动移除，否则很可能出现内存泄漏的问题，而合成事件不需要，因为 react 内部已经帮你自动处理了。"),Object(a.b)(c.a,{type:"warning",mdxType:"Hint"},"合成事件中阻止事件冒泡是没办法阻止原生事件的冒泡。即使是 reactEvent.nativeEvent.stopPropagation\\(\\)。"),Object(a.b)("p",null,"reactEvent 是封装好的事件，它是在 document 的回调里进行封装，并执行回调的。而原生的监听，在document 接收到冒泡时早就执行完了。",Object(a.b)("inlineCode",{parentName:"p"},"reactEvent.nativeEvent.stopPropagation()")," 方法实际上是在最外层节点上调用了原生的 stopPropagation， 只阻止了 document 的冒泡。"),Object(a.b)(c.a,{type:"warning",mdxType:"Hint"},"原生事件中阻止冒泡是可以阻止合成事件的冒泡。"),Object(a.b)(c.a,{type:"better",mdxType:"Hint"},"阻止合成事件与最外层 document 上的事件间的冒泡，用 `e.nativeEvent.stopImmediatePropagation()` 。"),Object(a.b)(c.a,{type:"better",mdxType:"Hint"},"阻止合成事件与除最外层 document 上的原生事件上的冒泡，通过判断 e.target 来避免。"),Object(a.b)("h2",{id:"合成事件的绑定"},"合成事件的绑定"),Object(a.b)("p",null,"对于 ",Object(a.b)("strong",{parentName:"p"},"合成事件")," 根据组件事件绑定的创建时间主要有两类方法："),Object(a.b)("h3",{id:"方式一：render-时绑定"},"方式一：render 时绑定"),Object(a.b)("p",null,"渲染时绑定主要有三种："),Object(a.b)("h4",{id:"bind-显式绑定方式："},"bind 显式绑定方式："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"onChange = {this.handleChange.bind(this)}\n")),Object(a.b)(c.a,{type:"warning",mdxType:"Hint"},"这种方法有一个潜在的性能问题：当组件每次重新渲染时，都会有一个新的函数创建。"),Object(a.b)("p",null,"但是在真正的开发场景中，由此引发的性能问题往往不值一提（除非是大型组件消费类应用或游戏）。"),Object(a.b)("h4",{id:"箭头函数隐式绑定："},"箭头函数隐式绑定："),Object(a.b)("p",null,"这种方法其实和第一种类似，我们可以利用ES6 箭头函数 ",Object(a.b)("strong",{parentName:"p"},"隐式")," 绑定 this："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"onChange = {e => this.handleChange(e)}\n")),Object(a.b)(c.a,{type:"warning",mdxType:"Hint"},"这种方法与第一种方法一样，同样存在潜在的性能问题。"),Object(a.b)(c.a,{type:"better",mdxType:"Hint"},"函数式组件优先使用箭头函数隐式绑定this。"),Object(a.b)("h4",{id:"双冒号隐式绑定："},"双冒号隐式绑定："),Object(a.b)("p",null,"ES next ",Object(a.b)("strong",{parentName:"p"},"Stage-0")," 中 ",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/zenparsing/es-function-bind"}),"Function bind syntax")," 提案："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"onChange = {::this.handleChange}\n")),Object(a.b)("p",null,"函数绑定运算符是并排的两个双冒号（ :: ），双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境（即 this 对象），绑定到右边的函数上面。如果双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定在该对象上面。"),Object(a.b)(c.a,{type:"warning",mdxType:"Hint"},"该方法不能带参数。"),Object(a.b)(c.a,{type:"tip",mdxType:"Hint"},"babel 会将该方法转译成 `.bind(this)` 的方式。"),Object(a.b)("h3",{id:"方式二：创建实例时绑定"},"方式二：创建实例时绑定"),Object(a.b)("h4",{id:"constructor-内绑定："},"constructor 内绑定："),Object(a.b)("p",null,"constructor 方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。 所以我们可以："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"constructor(props) {\n  super(props);\n  this.handleChange = this.handleChange.bind(this);\n}\n")),Object(a.b)("p",null,"就个人习惯而言，与前两种方法相比，constructor 内绑定在可读性和可维护性上也许有些欠缺。 同时，我们知道在 constructor 声明的方法不会存在实例的原型上，而属于实例本身的方法。每个实例都有同样一个 handleChange，这本身也是一种重复和浪费。"),Object(a.b)("p",null,"缺点：即使不用到state，也需要添加类构造函数来绑定this，代码量多； 添加参数要在构造函数中bind时指定，不在render中。"),Object(a.b)(c.a,{type:"warning",mdxType:"Hint"},"组件实例会重复绑定该方法。"),Object(a.b)(c.a,{type:"better",mdxType:"Hint"},"class 类型的组件优先使用该方法，也是性能最好的。"),Object(a.b)("h4",{id:"class-属性中使用--和箭头函数："},"class 属性中使用 = 和箭头函数："),Object(a.b)("p",null,"这个方法依赖于 ES next 的新特性，请参考：",Object(a.b)("a",r({parentName:"p"},{href:"https://tc39.github.io/proposal-class-public-fields/"}),"https://tc39.github.io/proposal-class-public-fields/")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"handleChange = () => {\n  // call this function from render \n  // and this.whatever in here works fine.\n};\n")),Object(a.b)("p",null,"总结一下这种方式的优点："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"使用箭头函数，有效绑定了 this； "),Object(a.b)("li",{parentName:"ul"},"没有方式一的潜在性能问题；"),Object(a.b)("li",{parentName:"ul"},"避免了constructor 内绑定的组件实例重复问题；")))}s.isMDXComponent=!0},389:function(e,t,n){"use strict";var a=n(0),c=n.n(a),r=n(391),l=n.n(r),i=(n(390),{better:{name:"推荐",color:"#50c610",icon:c.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},c.a.createElement("g",null,c.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),c.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:c.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},c.a.createElement("g",null,c.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:c.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},c.a.createElement("g",null,c.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:c.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},c.a.createElement("g",null,c.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),c.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),c.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});t.a=function(e){var t=e.type,n=e.children;return c.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(i[t].color)}},c.a.createElement("div",{style:{float:"left"}},i[t].icon),c.a.createElement("div",{dangerouslySetInnerHTML:{__html:l()("<strong>".concat(i[t].name,"</strong>：").concat(n))}}))}},390:function(e,t,n){}}]);