(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{390:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a),i=r.a.createContext({}),b=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=b(e.components);return r.a.createElement(i.Provider,{value:t},e.children)};var p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},o=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),o=b(n),u=a,m=o[l+"."+u]||o[u]||c[u]||i;return n?r.a.createElement(m,Object.assign({},{ref:t},p,{components:n})):r.a.createElement(m,Object.assign({},{ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,b=new Array(i);b[0]=o;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,b[1]=l;for(var u=2;u<i;u++)b[u]=n[u];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,n)}o.displayName="MDXCreateElement"},42:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return o}));n(0);var a=n(390);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b={id:"setTimeout-or-setInterval",title:"为什么使用 setTimeout 模拟 setInterval功能",author:"Robbie Han",authorTitle:"Front End Engineer @ Tradeshift",authorURL:"https://github.com/USTC-Han",authorImageURL:"https://robbie-pic.oss-cn-beijing.aliyuncs.com/IMG_4175.JPG?x-oss-process=style/compress",authorTwitter:null,tags:["setTimeout","setInterval"]},l=[{value:"setTimeout 和 setInterval功能",id:"settimeout-和-setinterval功能",children:[]},{value:"为什么要模拟",id:"为什么要模拟",children:[]},{value:"模拟后两者的区别",id:"模拟后两者的区别",children:[{value:"函数回调执行时长大于设定时间",id:"函数回调执行时长大于设定时间",children:[]}]},{value:"小结",id:"小结",children:[]},{value:"参考文章",id:"参考文章",children:[]}],p={rightToc:l},c="wrapper";function o(e){var t=e.components,n=i(e,["components"]);return Object(a.b)(c,r({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"settimeout-和-setinterval功能"},"setTimeout 和 setInterval功能"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"setTimeout()"),"会在确定的时间调用回调函数，且回调函数只会执行一次。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"setInterval()"),"会重复调用一个函数，在每次调用之间具有固定的时间延迟。"),Object(a.b)("h2",{id:"为什么要模拟"},"为什么要模拟"),Object(a.b)("p",null,"为什么使用",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"模仿",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"呢？这需要通过事件循环机制来解释，如果不清楚的话可以点击查看",Object(a.b)("a",r({parentName:"p"},{href:"https://thinkbucket.github.io/docsite/docs/javascript/8.async-programming/event-loop"}),"事件循环机制"),"和",Object(a.b)("a",r({parentName:"p"},{href:"https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine"}),"浏览器内核"),"相关内容。"),Object(a.b)("p",null,"由于",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"或",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"不是JS中定义的，他们并不会在JS引擎线程中直接执行。当代码执行到",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"或",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"时，事件循环机制会为",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"或",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"开一个定时器线程并开始计时，等定义的时间过后，将回调函数放到回调队列里，等到函数调用栈空（",Object(a.b)("inlineCode",{parentName:"p"},"JS"),"引擎线程空闲）时，将回调函数放入函数调用栈（使用JS引擎线程）执行。"),Object(a.b)("p",null,"这种机制导致",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"两次回调函数开始执行的时间间隔总会小于设定的间隔。如下所示："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),".    *    *    *    *    *    *\n     [-]  [-]  [-]  [-]  [-]  [-]\n")),Object(a.b)("p",null,"我们假设其中的",Object(a.b)("inlineCode",{parentName:"p"},"."),"代表",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"开始执行，",Object(a.b)("inlineCode",{parentName:"p"},"*"),"表示回调函数被触发， ",Object(a.b)("inlineCode",{parentName:"p"},"[-]"),"表示回调函数的执行时间。很显然相邻的两次回调函数开始执行的时间会小于我们设定的interval。取个极限，假设回调执行",Object(a.b)("strong",{parentName:"p"},"999ms,interval为1000ms，两次回调的间隔只用1ms"),"。很显然，使用setInterval很难满足两次回调函数执行间隔为固定为1000ms的需求。"),Object(a.b)("h2",{id:"模拟后两者的区别"},"模拟后两者的区别"),Object(a.b)("p",null,"使用",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"模仿",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"代码对比如下："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"function tick() {\n    doStuff();\n    setTimeout(tick, 100);\n}\ntick();\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"function doStuff(){\n    // 此处为需要执行一段时间T的代码\n    doStuff();\n}\nsetInterVal(doStuff, 100);\n")),Object(a.b)("p",null,"我们假设",Object(a.b)("inlineCode",{parentName:"p"},"."),"代表",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"和",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"开始执行，",Object(a.b)("inlineCode",{parentName:"p"},"*"),"表示回调函数被触发，",Object(a.b)("inlineCode",{parentName:"p"},"[-]"),"表示回调函数的执行时间。两者区别如下"),Object(a.b)("p",null,"Timeout:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),".    *  .    *  .    *  .    *  .\n     [--]    [--]    [--]    [--]\n")),Object(a.b)("p",null,"Timeout执行周期："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),"100ms\n.    *  .\n     [--]\n")),Object(a.b)("p",null,"Interval:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),".    *    *    *    *    *    *\n     [--] [--] [--] [--] [--] [--]\n")),Object(a.b)("p",null,"Interval执行周期："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{})," 100ms\n *    *\n [--] \n")),Object(a.b)("p",null,"由上可知，当回调函数",Object(a.b)("inlineCode",{parentName:"p"},"doStuff()"),"执行的时间较长时，",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"的执行周期会变长（100 + T）,但是相邻回调函数还是可以保证设定间隔。"),Object(a.b)("p",null,"对比",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"可知："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"当",Object(a.b)("inlineCode",{parentName:"li"},"doStuff()"),"执行的时间忽略不计时，两者几乎是等价的；"),Object(a.b)("li",{parentName:"ul"},"当",Object(a.b)("inlineCode",{parentName:"li"},"doStuff()"),"执行的时间小于100ms时，相邻回调函数间隔为（100-T）")),Object(a.b)("p",null,"那么还有一种情况当",Object(a.b)("inlineCode",{parentName:"p"},"doStuff()"),"执行的时间大于100ms时,setInterval会怎么表现呢？"),Object(a.b)("h3",{id:"函数回调执行时长大于设定时间"},"函数回调执行时长大于设定时间"),Object(a.b)("p",null,"对于",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"来说没啥问题，本身周期继续加长就行。"),Object(a.b)("p",null,"对于",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"来说，当下一次的回调函数入队时，会检测队列是否为空。如果不为空，则忽略本次回调。如果为空，将本次回调入队。"),Object(a.b)("p",null,"我们假设下图中的",Object(a.b)("inlineCode",{parentName:"p"},"w"),"代表在队列中等待不能立即被执行的回调函数，",Object(a.b)("inlineCode",{parentName:"p"},"x"),"表示会被忽略的、不会执行的回调。具体如下图所示："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{}),".    *    w    w    x    w    w    x\n     [------][------][------][------]\n")),Object(a.b)("p",null,"当",Object(a.b)("inlineCode",{parentName:"p"},"doStuff()"),"执行的时间长于间隔时，浏览器会为了让回调函数执行的更好而吃掉大量的内存，可能会影响页面的响应。"),Object(a.b)("h2",{id:"小结"},"小结"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"当回调执行时间较短时，完全不许要使用",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"代替",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"。")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"另外当回调执行时间执行时间过长时，并不会造成队列的待执行回调堆积，不会产生因为队列堆积影响性能问题。")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},"如果要保证回调函数执行间隔可以使用",Object(a.b)("inlineCode",{parentName:"p"},"setTimeout"),"代替",Object(a.b)("inlineCode",{parentName:"p"},"setInterval"),"。如果实现动画，在兼容性允许的情况下，使用requestAnimationFrame是更好的选择。"))),Object(a.b)("h2",{id:"参考文章"},"参考文章"),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"https://stackoverflow.com/questions/729921/settimeout-or-setinterval"}),"setTimeout or setInterval?")),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"https://juejin.im/post/5ca81370f265da308c199fe7"}),"为什么要用setTimeout模拟setInterval")),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"http://qingbob.com/difference-between-settimeout-setinterval/"}),"你真的了解setTimeout和setInterVal吗")))}o.isMDXComponent=!0}}]);