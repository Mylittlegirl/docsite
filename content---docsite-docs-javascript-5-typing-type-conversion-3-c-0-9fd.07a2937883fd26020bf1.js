(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{218:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return p}));t(0);var a=t(438),l=t(442),r=t(439);function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function b(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i={title:"类型转换",sidebar_label:"类型转换"},o=[{value:"手动类型转换",id:"手动类型转换",children:[{value:"将任意类型的值转为原始类型的值",id:"将任意类型的值转为原始类型的值",children:[]},{value:"将原始类型的值转为包装对象",id:"将原始类型的值转为包装对象",children:[]}]},{value:"自动转成包装对象",id:"自动转成包装对象",children:[{value:"valueOf()",id:"valueof",children:[]},{value:"toString()",id:"tostring",children:[]}]},{value:"自动转成字符串",id:"自动转成字符串",children:[]},{value:"自动转换数值",id:"自动转换数值",children:[]},{value:"自动转成布尔",id:"自动转成布尔",children:[]}],u={rightToc:o},s="wrapper";function p(e){var n=e.components,t=b(e,["components"]);return Object(a.b)(s,c({},u,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"手动类型转换"},"手动类型转换"),Object(a.b)("h3",{id:"将任意类型的值转为原始类型的值"},"将任意类型的值转为原始类型的值"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Number")," 、 ",Object(a.b)("inlineCode",{parentName:"p"},"String")," 和 ",Object(a.b)("inlineCode",{parentName:"p"},"Boolean")," 如果不作为构造函数调用（即调用时不加 new ），常常用于将任意类型的值显式地转为数值、字符串和布尔值："),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"Number(123) // 123\nString('abc') // \"abc\"\nBoolean(true) // true\n")),Object(a.b)("p",null,"这也解释新增的 ",Object(a.b)("inlineCode",{parentName:"p"},"Symbol()")," ，前面没有new，因为调用的根本不是构造函数。"),Object(a.b)("h3",{id:"将原始类型的值转为包装对象"},"将原始类型的值转为包装对象"),Object(a.b)("p",null,"所谓“包装对象”，就是分别与数值、字符串、布尔值相对应的",Object(a.b)("inlineCode",{parentName:"p"},"Number")," 、 ",Object(a.b)("inlineCode",{parentName:"p"},"String")," 、 ",Object(a.b)("inlineCode",{parentName:"p"},"Boolean")," 三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象："),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"new Number(123);\nnew String('abc');\nnew Boolean(true);\n")),Object(a.b)("p",null,"总结一下，这三个对象作为构造函数使用（带有new）时，可以将原始类型的值转为对象；作为普通函数使用时（不带有new），可以将任意类型的值，转为原始类型的值。"),Object(a.b)("p",null,"下面我们主要关注自动转换部分。我们知道JS是一种“动态弱类型”的语言，。"),Object(a.b)("p",null,"动态，变量没有类型限制，可以随时赋予任意值："),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"var x = y ? 1 : 'a';\n")),Object(a.b)("p",null,"上面代码中，变量x到底是数值还是字符串，取决于另一个变量y的值。y为true时，x是一个数值；y为false时，x是一个字符串。这意味着，x的类型没法在编译阶段就知道，必须等到运行时才能知道。"),Object(a.b)("p",null,"弱类型主要涉及的就是类型的隐式转换，运算时候对类型的容忍度。"),Object(a.b)("p",null,"JS中虽然变量的数据类型是不确定的，但是各种运算符对数据类型是有要求的。如果运算符发现，运算子的类型与预期不符，就会自动转换类型。比如，减法运算符预期左右两侧的运算子应该是数值，如果不是，就会自动将它们转为数值。"),Object(a.b)("h2",{id:"自动转成包装对象"},"自动转成包装对象"),Object(a.b)("p",null,"对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“",Object(a.b)("strong",{parentName:"p"},"包装对象"),"”。"),Object(a.b)(l.a,{width:"400",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/H28otE.jpg",mdxType:"Img"}),Object(a.b)("p",null,"包装对象的最大目的，首先是使得 JavaScript 的对象涵盖所有的值，其次使得",Object(a.b)("strong",{parentName:"p"},"原始类型的值可以方便地调用某些方法"),"。比如可以使用Object对象提供的valueOf方法和toString方法："),Object(a.b)("h3",{id:"valueof"},"valueOf()"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"valueOf")," 方法返回包装对象实例对应的原始类型的值。"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"new Number(123).valueOf()  // 123\nnew String('abc').valueOf() // \"abc\"\nnew Boolean(true).valueOf() // true\n")),Object(a.b)("h3",{id:"tostring"},"toString()"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"toString")," 方法返回对应的字符串形式。"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),'new Number(123).toString() // "123"\nnew String(\'abc\').toString() // "abc"\nnew Boolean(true).toString() // "true"\n')),Object(a.b)("p",null,"原始类型的值调用各种包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，在使用后立刻销毁实例。比如，字符串可以调用 ",Object(a.b)("inlineCode",{parentName:"p"},"length")," 属性，返回字符串的长度："),Object(a.b)(l.a,{width:"250",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/4TWRnN.jpg",mdxType:"Img"}),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),'// 等同于\nvar strObj = new String(str)\n// String {\n//   0: "a", 1: "b", 2: "c", length: 3, [[PrimitiveValue]]: "abc"\n// }\nstrObj.length // 3\nstrObj = null;\n')),Object(a.b)(r.a,{type:"tip",mdxType:"Hint"},"包装对象实例会自动销毁。这意味着，下一次调用字符串的属性时，实际是调用一个新生成的对象，而不是上一次调用时生成的那个对象。"),Object(a.b)(r.a,{type:"warning",mdxType:"Hint"},"数值类型要想自动转成包装对象需要加上括号，否则会当成小数点处理。"),Object(a.b)(l.a,{width:"250",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/aURQwt.jpg",mdxType:"Img"}),Object(a.b)("p",null,"三种包装对象除了提供很多实例方法，还可以在原型上添加自定义方法和属性，供原始类型的值直接调用。"),Object(a.b)("p",null,"比如，我们可以新增一个 ",Object(a.b)("inlineCode",{parentName:"p"},"double")," 方法，使得字符串和数字翻倍。"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"String.prototype.double = function () {\n return this.valueOf() + this.valueOf();\n};\n\n'abc'.double()\n// abcabc\n")),Object(a.b)("h2",{id:"自动转成字符串"},"自动转成字符串"),Object(a.b)("p",null,"主要发生在字符串的加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。但要注意："),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"'1' + 2 + '3' + 4 // '1234' 遇到字符串就会拼接\n4 + 3 + 2 + '1'  // '91' 先加在一起再拼接\n")),Object(a.b)("h2",{id:"自动转换数值"},"自动转换数值"),Object(a.b)("p",null,"JavaScript 遇到预期为数值的地方，就会将参数值自动转换为数值。系统内部会自动调用Number函数。"),Object(a.b)("p",null,"对于两个数的四则运算和模运算，如果存在字符串，则将字符串转为数字来计算，加法是个例外，他会做数字与字符串的链接返回字符串。如果运算存在到对象，调用对象的valueOf()转为数字，如果valueOf()返回值是Number类型直接运算，否则调用对象的toString方法，按照字符串规则运算。对于null和undefined会调用Number(null)和Number(undefined)转为Number类型的0和NaN"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"1 + [] ⇔  1 + ''  ⇔  '1'\n1 + {}  //  \"1[object Object]\"\n'5' * [] ⇔  '5' * '' ⇔ 5 * 0 //0\n")),Object(a.b)(r.a,{type:"tip",mdxType:"Hint"},"除了加法运算符 `+` 有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"'5' - '2' // 3\n'5' * '2' // 10\ntrue - 1  // 0\nfalse - 1 // -1\n'1' - 1   // 0\n'5' * []    // 0\nfalse / '5' // 0\n'abc' - 1   // NaN\nnull + 1 // 1\nundefined + 1 // NaN\n")),Object(a.b)(r.a,{type:"warning",mdxType:"Hint"}," `null` 转为数值时为 0，而 `undefined` 转为数值时为 `NaN` 。"),Object(a.b)("p",null,"一元运算符(!  !!除外)也会把运算子转成数值。一元运算符的本质是调用Number方法,Number方法的规则是：字符串如果全是数字组成转为数字，存在非数字子串转为NaN。对于Null和undefined转为0和NaN. 对于对象类型，调用对应的valueOf方法，如果valueOf的结果不是number类型，调用toString,在转为数字类型。"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"var obj = {\n  valueOf: function() {\n    return {}\n  },\n  toString: function() {\n    return '2'\n  }\n}\n+obj  //2\n")),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"+true // 1\n-false // 0\n+'abc' // NaN\n-'abc' // NaN\n+[] // 0\n+['12'] // 12\n+{} //NaN\n+null  // 0\n+undefined //NaN\n+new Date() // Date.now()\n+'   1   ' // 1\n+'1.2e2' // 120\n+new Set() //NaN\n+new Map() //NaN\n")),Object(a.b)("h2",{id:"自动转成布尔"},"自动转成布尔"),Object(a.b)("p",null,"if 语句和三目运算符的条件部分会将非布尔值的参数自动转换为布尔值。系统内部会自动调用 Boolean 函数。"),Object(a.b)("p",null,"因此除了以下五个值(六个假值 还有一个false)，其他都是自动转为 true 。"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"undefined\nnull\n0 +0 -0\nNaN\n''\n")),Object(a.b)("p",null,"一元运算符 ",Object(a.b)("inlineCode",{parentName:"p"},"!")," ",Object(a.b)("inlineCode",{parentName:"p"},"!!")," 可以将任意值转为对应的布尔值。"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-js"}),"!!undefined // false\n!!null // false\n!!0 // false\n!!'' // false\n!!NaN // false\n!!1 // true\n!!'false' // true\n!![] // true\n!!{} // true\n!!function(){} // true\n!!/foo/ // true\n")))}p.isMDXComponent=!0},439:function(e,n,t){"use strict";var a=t(0),l=t.n(a),r=t(441),c=t.n(r),b=(t(440),{best:{name:"推荐",color:"#50c610",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),l.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},l.a.createElement("g",null,l.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},l.a.createElement("g",null,l.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),l.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),l.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});n.a=function(e){var n=e.type,t=e.children;return l.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(b[n].color)}},l.a.createElement("div",{style:{float:"left"}},b[n].icon),l.a.createElement("div",{dangerouslySetInnerHTML:{__html:c()("<strong>".concat(b[n].name,"</strong>：").concat(t))}}))}},440:function(e,n,t){},442:function(e,n,t){"use strict";var a=t(0),l=t.n(a);n.a=function(e){var n=e.align,t=e.width,a=e.src,r=e.legend;return n?l.a.createElement("div",{align:n},l.a.createElement("img",{src:a,width:t}),r&&l.a.createElement("p",null,r)):l.a.createElement("img",{src:a,width:t})}}}]);