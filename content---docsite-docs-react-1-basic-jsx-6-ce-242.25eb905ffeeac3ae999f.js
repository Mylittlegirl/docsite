(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{100:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return i}));t(0);var r=t(257);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l={id:"jsx",title:"JSX",sidebar_label:"JSX"},b=[{value:"JSX 基础概念",id:"jsx-基础概念",children:[{value:"形态",id:"形态",children:[]},{value:"属性",id:"属性",children:[]},{value:"嵌套",id:"嵌套",children:[]},{value:"JSX 代表 Objects",id:"jsx-代表-objects",children:[]}]},{value:"条件渲染",id:"条件渲染",children:[{value:"JS 写法",id:"js-写法",children:[]},{value:"JSX 写法：与运算",id:"jsx-写法：与运算",children:[]},{value:"JSX 写法：三目运算",id:"jsx-写法：三目运算",children:[]}]},{value:"列表渲染",id:"列表渲染",children:[{value:"map",id:"map",children:[]},{value:"key",id:"key",children:[]}]}],p={rightToc:b},o="wrapper";function i(e){var n=e.components,t=c(e,["components"]);return Object(r.b)(o,a({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"jsx-基础概念"},"JSX 基础概念"),Object(r.b)("h3",{id:"形态"},"形态"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const element = <h1>Hello, world!</h1>;\n")),Object(r.b)("p",null,"JSX， 乍看起来可能比较像是模版语言，但本质上是JS的一种扩展，完全是在 JS 内部实现的。 主要用来描述用户界面，常见于 render 方法里面的 return 和一些用户界面相关变量定义。"),Object(r.b)("p",null,"你可以任意地在 JSX 当中使用 ",Object(r.b)("a",a({parentName:"p"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions"}),"JS 表达式"),"，在 JSX 当中的表达式要包含在",Object(r.b)("inlineCode",{parentName:"p"},"单大括号 {}"),"里。"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"推荐"),"：对于需要换行的 JSX 代码，在其外面加上一个小括号","(",")","，这样可以防止 ",Object(r.b)("a",a({parentName:"p"},{href:"http://stackoverflow.com/q/2846283"}),"分号自动插入")," 的 bug，且便于 JSX 代码的换行对齐。")),Object(r.b)("h3",{id:"属性"},"属性"),Object(r.b)("p",null,"你可以使用引号来定义以字符串为值的属性："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),'const element = <div tabIndex="0"></div>;\n')),Object(r.b)("p",null,"也可以使用大括号来定义以 JS 表达式为值的属性："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const element = <img src={user.avatarUrl}></img>;\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"提示"),"：如果使用大括号包裹的 JS 表达式时就不要再到外面套引号了。否则 JSX 会将引号当中的内容识别为字符串而不是表达式。")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"强制"),"：使用 ",Object(r.b)("inlineCode",{parentName:"p"},"camelCase")," 小驼峰命名来定义属性的名称，而不是使用 HTML 的属性名称。因为 JSX 的特性更接近 JavaScript 而不是 HTML 。")),Object(r.b)("h3",{id:"嵌套"},"嵌套"),Object(r.b)("p",null,"如果 JSX 标签是闭合式的，那么你需要在结尾处用 ",Object(r.b)("inlineCode",{parentName:"p"},"/>"),", 就好像 XML/HTML 一样："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const element = <img src={user.avatarUrl} />;\n")),Object(r.b)("p",null,"JSX 标签同样可以相互嵌套："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n")),Object(r.b)("h3",{id:"jsx-代表-objects"},"JSX 代表 Objects"),Object(r.b)("p",null,"Babel 转译器会把 JSX 转换成一个名为 ",Object(r.b)("inlineCode",{parentName:"p"},"React.createElement()")," 的方法调用。"),Object(r.b)("p",null,"下面两种代码的作用是完全相同的："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),'const element = (\n  <h1 className="greeting">\n    Hello, world!\n  </h1>\n);\n')),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"React.createElement()")," 这个方法首先会进行一些避免 bug 的检查，之后会返回一个类似下面例子的对象："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"// 注意: 以下示例是简化过的（不代表在 React 源码中是这样）\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world'\n  }\n};\n")),Object(r.b)("p",null,"这样的对象被称为 “",Object(r.b)("inlineCode",{parentName:"p"},"React 元素"),"”。它代表所有你在屏幕上看到的东西。React 通过读取这些对象来构建 DOM 并保持数据内容一致。"),Object(r.b)("p",null,"有关元素渲染更新的内容请参考：",Object(r.b)("a",a({parentName:"p"},{href:"https://doc.react-china.org/docs/rendering-elements.html"}),"React 官方文档：元素渲染"),"。"),Object(r.b)("h2",{id:"条件渲染"},"条件渲染"),Object(r.b)("p",null,"条件渲染大体有两种，一种是 JS 写法，它在 render 方法里面写多个 return 语句，那么你可以将逻辑放在 JS 中判断，和一般的 JS 中的 if-else 语句写法无异。另一种就是 JSX 写法，render 方法里面只有一个 return 语句，可以通过用 ",Object(r.b)("inlineCode",{parentName:"p"},"单大括号 {}")," 包裹代码在 JSX 中嵌入任何 ",Object(r.b)("a",a({parentName:"p"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions"}),"JS 表达式"),"，这种相对更为简洁。当然也可以采用两种组合式的写法。"),Object(r.b)("h3",{id:"js-写法"},"JS 写法"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const renderComponent = props => {\n  if (props.isFirstTime) {\n    return (\n      <div>\n        This is homepage\n        <span>Hello, World</span>\n      </div>\n    )\n  }\n  return <div>This is homepage</div>\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"推荐"),"：一般开发中建议不要使用该写法，除非不同条件下 return 的 v-dom 没有公共部分。")),Object(r.b)("h3",{id:"jsx-写法：与运算"},"JSX 写法：与运算"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const renderComponent = props => {\n  return (\n    <div>\n      This is homepage\n      {!!props.isFirstTime && <span>Hello, World</span>}\n    </div>\n  )\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"强制"),"：与运算要使用 !! 进行显式强制转换，防止某些假值被渲染出来，",Object(r.b)("a",a({parentName:"p"},{href:"https://codepen.io/muwenzi/pen/YjNYYp?editors=0010"}),"demo"),"。")),Object(r.b)("h3",{id:"jsx-写法：三目运算"},"JSX 写法：三目运算"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const renderComponent = props => {\n  return (\n    <div>\n      This is homepage\n      {props.isFirstTime ? <span>Hello, World</span> : <span>See you again</span>}\n    </div>\n  )\n}\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"推荐"),"：三目运算的判断可以不用加 !! ，因为其肯定会渲染后面二者之一。")),Object(r.b)("h2",{id:"列表渲染"},"列表渲染"),Object(r.b)("h3",{id:"map"},"map"),Object(r.b)("p",null,"列表的渲染要使用 JS 数组实例方法 ",Object(r.b)("inlineCode",{parentName:"p"},".map()")," ，不能使用 forEach，因为它不会将需要渲染的 react-dom return 出来，而 map 是有返回值的。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"const renderListItems = props => {\n  const numbers = [1, 2, 3, 4, 5];\n  return (\n    <ul>{numbers.map((number) => <li>{number}</li>}</ul>\n  )\n}\n")),Object(r.b)("h3",{id:"key"},"key"),Object(r.b)("p",null,"写动态子组件时，如果没有给动态子项添加 key prop，则会报一个警告："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-text"}),"Warning: Each child in an array or iterator should have a unique \"key\" prop. Check the render method of 'renderListItems'. See [https://fb.me/react-warning-keys](https://fb.me/react-warning-keys) for more information.\n")),Object(r.b)("p",null,"这个警告指的是，如果每一个组件是一个数组或迭代器的话，那么必须有一个唯一的 key prop。那么这个key prop 是做什么的？"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"react 利用 key 来识别组件，它是一种身份标识。keys 是 react 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。"),Object(r.b)("li",{parentName:"ul"},"react 根据 key 来决定是销毁重新创建组件还是更新组件")),Object(r.b)("p",null,"直接用数组的 index 是非常低效的做法。我们在生产环境下常常犯这样的错，这个 key 是每次用来做 Virtual-Dom diff 的，如果使用 index 作为 key 就相当于用了一个随机键，那么不论有没有相同的项，更新都会重新渲染。"),Object(r.b)("p",null,"在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"key 相同，若组件属性有所变化，则 react 只更新组件对应的属性，没有变化则不更新。"),Object(r.b)("li",{parentName:"ul"},"key 不同，则 react 先销毁该组件（有状态组件的componentWillUnmount会执行），然后重新创建该组件（constructor和componentWillUnmount都会执行）")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"推荐"),"：不要使用 index 作为 key prop。")))}i.isMDXComponent=!0},257:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return s}));var r=t(0),a=t.n(r),c=a.a.createContext({}),l=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},b=function(e){var n=l(e.components);return a.a.createElement(c.Provider,{value:n},e.children)};var p="mdxType",o={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},i=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,b=e.parentName,p=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),i=l(t),s=r,u=i[b+"."+s]||i[s]||o[s]||c;return t?a.a.createElement(u,Object.assign({},{ref:n},p,{components:t})):a.a.createElement(u,Object.assign({},{ref:n},p))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,l=new Array(c);l[0]=i;var b={};for(var o in n)hasOwnProperty.call(n,o)&&(b[o]=n[o]);b.originalType=e,b[p]="string"==typeof e?e:r,l[1]=b;for(var s=2;s<c;s++)l[s]=t[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}i.displayName="MDXCreateElement"}}]);