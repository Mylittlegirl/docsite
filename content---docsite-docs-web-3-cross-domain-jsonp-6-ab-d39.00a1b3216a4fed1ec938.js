(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{340:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return u}));t(0);var r=t(388);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o={id:"jsonp",title:"JSONP",sidebar_label:"JSONP"},p=[],i={rightToc:p},l="wrapper";function u(e){var n=e.components,t=c(e,["components"]);return Object(r.b)(l,a({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"JSONP是服务器与客户端跨源通信的常用方法。",Object(r.b)("strong",{parentName:"p"},"最大特点就是简单适用，老式浏览器全部支持，服务器改造非常小"),"。但只能发",Object(r.b)("strong",{parentName:"p"},"GET"),"请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。"),Object(r.b)("p",null,"它的基本思想是，网页通过添加一个",Object(r.b)("inlineCode",{parentName:"p"},"<script>"),"元素，向服务器请求JSON数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。"),Object(r.b)("p",null,"首先，网页动态插入",Object(r.b)("inlineCode",{parentName:"p"},"<script>"),"元素，由它向跨源网址发出请求。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"function addScriptTag(src) {\n  var script = document.createElement('script');\n  script.setAttribute(\"type\",\"text/javascript\");\n  script.src = src;\n  document.body.appendChild(script);\n}\n\nwindow.onload = function () {\n  addScriptTag('http://example.com/ip?callback=foo');\n}\n\nfunction foo(data) {\n  console.log('Your public IP address is: ' + data.ip);\n};\n")),Object(r.b)("p",null,"上面代码通过动态添加",Object(r.b)("inlineCode",{parentName:"p"},"<script>"),"元素，向服务器example.com发出请求。注意，该请求的查询字符串有一个callback参数，用来指定回调函数的名字，这对于JSONP是必需的。"),Object(r.b)("p",null,"服务器收到这个请求以后，会将",Object(r.b)("strong",{parentName:"p"},"数据放在回调函数的参数位置"),"返回。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),'foo({\n  "ip": "8.8.8.8"\n});\n')),Object(r.b)("p",null,"由于 ",Object(r.b)("inlineCode",{parentName:"p"},"<script>"),"元素请求的脚本，直接作为代码运行。这时，只要浏览器定义了foo函数，该函数就会立即调用。",Object(r.b)("strong",{parentName:"p"},"作为参数的JSON数据被视为JavaScript对象"),"，而不是字符串，因此避免了使用JSON.parse的步骤。"))}u.isMDXComponent=!0},388:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return s}));var r=t(0),a=t.n(r),c=a.a.createContext({}),o=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},p=function(e){var n=o(e.components);return a.a.createElement(c.Provider,{value:n},e.children)};var i="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,p=e.parentName,i=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),u=o(t),s=r,b=u[p+"."+s]||u[s]||l[s]||c;return t?a.a.createElement(b,Object.assign({},{ref:n},i,{components:t})):a.a.createElement(b,Object.assign({},{ref:n},i))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,o=new Array(c);o[0]=u;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p[i]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<c;s++)o[s]=t[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);