(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{300:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return u}));n(0);var r=n(438);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c={id:"model",title:"Model",sidebar_label:"Model"},i=[],p={rightToc:i},l="wrapper";function u(e){var t=e.components,n=o(e,["components"]);return Object(r.b)(l,a({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Model 是 Rematch 中的概念，主要用来简化 Redux，它将 Reducer, Action 放到了一起形成了 model 概念，并移除了定义起来非常繁琐鸡肋的 type。且内部支持异步功能，不需要引入 ",Object(r.b)("inlineCode",{parentName:"p"},"redux-thunk"),"。"),Object(r.b)("p",null,"在 store 定义的时候不需要手动去加载",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/zalmoxisus/redux-devtools-extension"}),"Redux Devtools"),"，Rematch具有开箱即用的Redux Devtools。不需要配置。详情见：",Object(r.b)("a",a({parentName:"p"},{href:"https://rematch.gitbook.io/handbook/ji-qiao/untitled"}),"https://rematch.gitbook.io/handbook/ji-qiao/untitled")),Object(r.b)("p",null,"需要注意的是 effect 的函数定义："),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"effects: { [string]: (payload, rootState) }")),Object(r.b)("p",null,"例如："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-javascript"}),"{\n  effects: {\n    logState(payload, rootState) {\n      console.log(rootState)\n    }\n  }\n}\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"rootState")," 其实就相当于 ",Object(r.b)("inlineCode",{parentName:"p"},"getState")," 用来获取当前状态树的所有状态。注意它是在第二个参数，当该函数需要传多个参数的时候，可以将它们封装在一个对象里面作为 payload。"),Object(r.b)("p",null,"采用 model 的方式，可以直接进行链式 dispatch，这将移除以前 dispatch 时对action 函数的引入。例如："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-javascript"}),"import { dispatch } from '@rematch/core'\n\n// old\ndispatch({ type: 'count/increment', payload: 1 }) // or maybe action function\n// new\ndispatch.count.increment(1)\n")),Object(r.b)("p",null,"更多请参考 Rematch 的使用文档：",Object(r.b)("a",a({parentName:"p"},{href:"https://rematch.gitbook.io/handbook/"}),"https://rematch.gitbook.io/handbook/")))}u.isMDXComponent=!0},438:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r),o=a.a.createContext({}),c=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=c(e.components);return a.a.createElement(o.Provider,{value:t},e.children)};var p="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),u=c(n),b=r,s=u[i+"."+b]||u[b]||l[b]||o;return n?a.a.createElement(s,Object.assign({},{ref:t},p,{components:n})):a.a.createElement(s,Object.assign({},{ref:t},p))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:r,c[1]=i;for(var b=2;b<o;b++)c[b]=n[b];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);