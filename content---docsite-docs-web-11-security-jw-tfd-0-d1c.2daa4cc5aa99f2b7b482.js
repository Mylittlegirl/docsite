(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{178:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));t(0);var a=t(249);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c={id:"JWT",title:"JWT",sidebar_label:"JWT"},l=[{value:"为什么使用 JWT？",id:"为什么使用-jwt？",children:[]},{value:"使用 JWT",id:"使用-jwt",children:[]},{value:"创建 header",id:"创建-header",children:[{value:"创建 payload",id:"创建-payload",children:[]},{value:"计算生成 signature",id:"计算生成-signature",children:[]}]},{value:"怎么验证 JWT token？",id:"怎么验证-jwt-token？",children:[]},{value:"安全性？",id:"安全性？",children:[]}],o={rightToc:l},b="wrapper";function u(e){var n=e.components,t=i(e,["components"]);return Object(a.b)(b,r({},o,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"JSON Web Token，JWT 是一个基于 JSON 的开放标准（RFC 7519），用于创建访问 token。简单来说，",Object(a.b)("strong",{parentName:"p"},"一个 JWT 就是一个字符串"),"，形式如下："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"header.payload.signature\n")),Object(a.b)("h2",{id:"为什么使用-jwt？"},"为什么使用 JWT？"),Object(a.b)("div",{align:"center"},Object(a.b)("img",{width:"430",height:"310",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/qh2bq2.png"})),Object(a.b)("p",null,"如图所示，存在3个角色："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"uthentication server （登录／授权服务器）"),Object(a.b)("li",{parentName:"ul"},"user（用户）"),Object(a.b)("li",{parentName:"ul"},"app server （应用服务器）")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"步骤："),"\n1. 用户通过授权服务器的登录系统登录，授权服务器把 JWT 传给用户。\n2. 用户访问应用服务器的API时，带上 JWT，应用服务器通过 JWT 来判断用户身份。"),Object(a.b)("p",null,"可以看到，这是一套无状态的验证机制，不必在内存中保存用户状态。用户访问时自带 JWT，无需像传统应用使用 session，应用可以做到更多的解耦和扩展。同时，JWT 可以保存用户的数据，减少数据库访问。"),Object(a.b)("h2",{id:"使用-jwt"},"使用 JWT"),Object(a.b)("h2",{id:"创建-header"},"创建 header"),Object(a.b)("p",null,"JWT 的 header 部分包含怎么计算 signature 的信息。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'{\n    "typ": "JWT", // 表明是 JWT\n    "alg": "HS256" // 代表生成 signature 所用的哈希算法，这里是 HMAC-SHA256\n}\n')),Object(a.b)("h3",{id:"创建-payload"},"创建 payload"),Object(a.b)("p",null,"JWT 的 payload 部分即 JWT 所带的数据。"),Object(a.b)("p",null,"比如我们这里存储了用户 ID："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'{\n    "userId": "b08f86af-35da-48f2-8fab-cef3904660bd"\n}\n')),Object(a.b)("p",null,"你可以在 payload 里存储大量信息，但大量信息会降低性能，增加延迟。"),Object(a.b)("h3",{id:"计算生成-signature"},"计算生成 signature"),Object(a.b)("p",null,"把 header 和 payload 分别 base64 编码（两个对象已 JSON.stringify 转为字符串）后，通过 . 相加，然后用之前指定的哈希算法计算，即可得到 signature。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),'// signature algorithm\ndata = base64urlEncode( header ) + "." + base64urlEncode( payload )\nsignature = Hash( data, secret );\n')),Object(a.b)("p",null,"组装 header，payload 和 signature。把 header，payload 和 signature 用 . 相连即最终的 JWT token。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"header.payload.signature\n\n// header 是 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9\n// payload 是 eyJ1c2VySWQiOiJiMDhmODZhZi0zNWRhLTQ4ZjItOGZhYi1jZWYzOTA0NjYwYmQifQ\n// signature 是 -xN_h82PHVTCMA9vdoHrcZxH-x5mb11y1537t3rGzcM\n// 最终 jwt token 是 eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJiMDhmODZhZi0zNWRhLTQ4ZjItOGZhYi1jZWYzOTA0NjYwYmQifQ.-xN_h82PHVTCMA9vdoHrcZxH-x5mb11y1537t3rGzcM\n")),Object(a.b)("h2",{id:"怎么验证-jwt-token？"},"怎么验证 JWT token？"),Object(a.b)("p",null,"通过前面 4 步生成了 JWT token，验证服务器把它发送给用户，用户带着它访问应用服务器，应用服务器怎么验证 JWT token ？"),Object(a.b)("p",null,"因为应用服务器知道验证服务器哈希计算 signature 的 secret key，所以应用服务器可以用这个 secret key 去重新计算 signature （用户发送过来的 token 里有 header 和 payload），并与用户发送过来的 token 中 signature 比较，最终验证是否合法。"),Object(a.b)("h2",{id:"安全性？"},"安全性？"),Object(a.b)("p",null,"JWT 本身的内容只是 base64 编码了，跟明文几乎没差别。JWT 并不比 cookie 更安全，所以最好配合使用 https。"))}u.isMDXComponent=!0},249:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return p}));var a=t(0),r=t.n(a),i=r.a.createContext({}),c=function(e){var n=r.a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=c(e.components);return r.a.createElement(i.Provider,{value:n},e.children)};var o="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),u=c(t),p=a,s=u[l+"."+p]||u[p]||b[p]||i;return t?r.a.createElement(s,Object.assign({},{ref:n},o,{components:t})):r.a.createElement(s,Object.assign({},{ref:n},o))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,c=new Array(i);c[0]=u;var l={};for(var b in n)hasOwnProperty.call(n,b)&&(l[b]=n[b]);l.originalType=e,l[o]="string"==typeof e?e:a,c[1]=l;for(var p=2;p<i;p++)c[p]=t[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);