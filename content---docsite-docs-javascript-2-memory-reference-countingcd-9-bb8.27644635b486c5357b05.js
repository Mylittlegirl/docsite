(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{178:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return i}));t(0);var r=t(438);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c={title:"引用计数",sidebar_label:"引用计数"},l=[],p={rightToc:l},u="wrapper";function i(e){var n=e.components,t=o(e,["components"]);return Object(r.b)(u,a({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"引用计数reference counting（第一个版本js的， 90年代初 的事情，最简单的GC算法），缺点，",Object(r.b)("strong",{parentName:"p"},"循环引用会有可能内存泄漏"),"，不能做并行GC，效率是最高，移动端native还在用"),Object(r.b)("div",{align:"center"},Object(r.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/lAnhj6.jpg"})),Object(r.b)("p",null,"在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。"),Object(r.b)("p",null,"在IE中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的， 也就是说只要涉及BOM及DOM就会出现循环引用问题。"),Object(r.b)("p",null,"引用计数（Reference Count）方式是GC算法中最简单也最容易实现的一种，它和标记清除方式差不多是在同一时间发明出来的。它的基本原理是，在每个对象中保存该对象的引用计数，当引用发生增减时对计数进行更新。引用计数的增减，一般发生在变量赋值、对象内容更新、函数结束（局部变量不再被引用）等时间点。当一个对象的引用计数变为0时，则说明它将来不会再被引用，因此可以释放相应的内存空间。"),Object(r.b)("p",null,'语言引擎有一张"引用表"，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放。'),Object(r.b)("div",{align:"center"},Object(r.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/jEdPCn.jpg"})),Object(r.b)("p",null,"上图中，左下角的两个值，没有任何引用，所以可以释放。"),Object(r.b)("p",null,"如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"const arr = [1, 2, 3, 4];\nconsole.log('hello world');\n")),Object(r.b)("p",null,"上面代码中，数组","[1, 2, 3, 4]","是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它还是会持续占用内存。"),Object(r.b)("p",null,"如果增加一行代码，解除arr对","[1, 2, 3, 4]","引用，这块内存就可以被垃圾回收机制释放了。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"let arr = [1, 2, 3, 4];\nconsole.log('hello world');\narr = null;\n")),Object(r.b)("p",null,"上面代码中，arr重置为null，就解除了对","[1, 2, 3, 4]","的引用，引用次数变成了0，内存就可以释放出来了。"),Object(r.b)("p",null,"因此，并不是说有了垃圾回收机制，程序员就轻松了。你还是需要关注内存占用：那些很占空间的值，一旦不再用到，你必须检查是否还存在对它们的引用。如果是的话，就",Object(r.b)("strong",{parentName:"p"},"必须手动解除引用"),"。比如闭包如果没有及时解除引用也会产生内存泄漏问题。"))}i.isMDXComponent=!0},438:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r),o=a.a.createContext({}),c=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=c(e.components);return a.a.createElement(o.Provider,{value:n},e.children)};var p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},i=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),i=c(t),b=r,s=i[l+"."+b]||i[b]||u[b]||o;return t?a.a.createElement(s,Object.assign({},{ref:n},p,{components:t})):a.a.createElement(s,Object.assign({},{ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=i;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:r,c[1]=l;for(var b=2;b<o;b++)c[b]=t[b];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}i.displayName="MDXCreateElement"}}]);