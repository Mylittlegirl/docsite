(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{438:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return b}));var r=n(0),o=n.n(r),i=o.a.createContext({}),a=function(e){var t=o.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=a(e.components);return o.a.createElement(i.Provider,{value:t},e.children)};var c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},s=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),s=a(n),b=r,p=s[l+"."+b]||s[b]||u[b]||i;return n?o.a.createElement(p,Object.assign({},{ref:t},c,{components:n})):o.a.createElement(p,Object.assign({},{ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=s;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var b=2;b<i;b++)a[b]=n[b];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},45:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));n(0);var r=n(438);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a={id:"for循环中的setTimeout",title:"for循环中的setTimeout",author:"Robbie Han",authorTitle:"Front End Engineer @ Tradeshift",authorURL:"https://github.com/USTC-Han",authorImageURL:"https://robbie-pic.oss-cn-beijing.aliyuncs.com/IMG_4175.JPG?x-oss-process=style/compress",authorTwitter:null,tags:["setTimeout","for"]},l=[{value:"前言：",id:"前言：",children:[]},{value:"闭包法：",id:"闭包法：",children:[]},{value:"使用let：",id:"使用let：",children:[]},{value:"使用setTimeOut的第三个参数：",id:"使用settimeout的第三个参数：",children:[]}],c={rightToc:l},u="wrapper";function s(e){var t=e.components,n=i(e,["components"]);return Object(r.b)(u,o({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"前言："},"前言："),Object(r.b)("p",null,"浏览器事件循环经典题目:"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"for (var i=0; i<5; i++) {\n    setTimeout( function timer() {\n        console.log(new Date, i);\n    }, 1000);\n}\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\nVM84:3 Wed Oct 09 2019 09:29:47 GMT+0800 (中国标准时间) 5\n")),Object(r.b)("p",null,"解析： 根据setTimeout定义的操作在函数调用栈清空之后才会执行的特点，for循环里定义了5个setTimeout操作。而等待1秒后，任务队列里的setTimeout开始依次执行时，for循环的i值，已经先一步变成了5。因为任务队列推到函数调用栈执行的时间可以忽略不记（毫秒级），所以打印的GMT时间（精确到秒）和i的值都是相同的。"),Object(r.b)("p",null,"解决这个问题有三种方法："),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"使用闭包"),Object(r.b)("li",{parentName:"ol"},"使用let定义变量 i"),Object(r.b)("li",{parentName:"ol"},"使用setTimeOut的第三个参数，将第三个参数作为setTimeout回调函数。")),Object(r.b)("h2",{id:"闭包法："},"闭包法："),Object(r.b)("p",null,"闭包可以将外层引用保存在内存中，借助闭包的特性，每次循环时，将i值保存在一个闭包中，当setTimeout中定义的操作执行时，则访问对应闭包保存的i值。"),Object(r.b)("p",null,"而我们知道在函数中闭包判定的准则，即执行时是否在内部定义的函数中访问了上层作用域的变量。因此我们需要包裹一层自执行函数为闭包的形成提供条件。"),Object(r.b)("p",null,"具体代码，如下所示："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"for (var i=0; i<5; i++) { \n    (function(i) {\n        setTimeout( function timer() {\n            console.log(i);\n        }, i*1000 );\n    })(i)\n}\n")),Object(r.b)("p",null,"代码主要通过使用",Object(r.b)("strong",{parentName:"p"},"自执行函数提供闭包条件"),"并将",Object(r.b)("strong",{parentName:"p"},"传入i的值保存在闭包"),"中实现的。"),Object(r.b)("p",null,"如下图所示，我们可以通过在Chrome中打断点查看闭包的值"),Object(r.b)("p",null,Object(r.b)("img",o({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/xTvjaK.png",alt:null}))),Object(r.b)("h2",{id:"使用let："},"使用let："),Object(r.b)("p",null,"在for循环中使用let声明循环因子时，不仅将循环因子i绑定到了for循环的块级作用域中，还保证了每次迭代都会对i进行重新赋值。"),Object(r.b)("p",null,"使用let的代码如下："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"for (let i=0; i<5; i++) {\n    setTimeout( function timer() {\n        console.log(new Date, i);\n    }, 1000);\n}\n")),Object(r.b)("p",null,"每次迭代，i的绑定和赋值可以等价下面的代码："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"{\n  let j\n  for (j=0; j<5; j++) {\n    let i=j;\n    // some code\n  }\n}\n\n")),Object(r.b)("h2",{id:"使用settimeout的第三个参数："},"使用setTimeOut的第三个参数："),Object(r.b)("p",null,"setTimeOut可以有多个参数，第一个参数是回调函数，第二个参数是回调函数被推向回调队列的时间，多于两个的参数将作为回调函数的参数。"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"for (var i=0; i<5; i++) {\n    setTimeout(function timer(v) {\n        console.log(new Date, v);\n    }, i*1000, i);\n}\n")),Object(r.b)("p",null,"使用setTimeOut的第三个参数可以让回调函数避免引用同一个参数，解决了前言中存在的问题"))}s.isMDXComponent=!0}}]);