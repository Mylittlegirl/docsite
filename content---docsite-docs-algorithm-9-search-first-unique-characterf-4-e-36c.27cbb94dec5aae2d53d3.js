(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{114:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return p}));t(0);var r=t(396);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c={id:"first-unique-character",title:"字符串中的第一个唯一字符",sidebar_label:"字符串中的第一个唯一字符"},o=[{value:"题目",id:"题目",children:[]},{value:"思路",id:"思路",children:[]},{value:"代码实现",id:"代码实现",children:[]}],i={rightToc:o},u="wrapper";function p(e){var n=e.components,t=l(e,["components"]);return Object(r.b)(u,a({},i,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"题源：《剑指Offer: 面试题 50》P243"),Object(r.b)("li",{parentName:"ul"},"在线：",Object(r.b)("a",a({parentName:"li"},{href:"https://leetcode-cn.com/problems/first-unique-character-in-a-string/"}),"LeetCode: 387"))),Object(r.b)("h2",{id:"题目"},"题目"),Object(r.b)("p",null,"给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。假定该字符串只包含小写字母。"),Object(r.b)("p",null,"示例:"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-text"}),'输入: "leetcode"\n输出: 0\n')),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-text"}),'输入: "loveleetcode"\n输出: 2\n')),Object(r.b)("h2",{id:"思路"},"思路"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"使用哈希表，第一次遍历该字符串，以该字符为 key，value 为下标索引"),Object(r.b)("li",{parentName:"ol"},"如果出现次数超过一次则 value 设为 -1"),Object(r.b)("li",{parentName:"ol"},"再遍历哈希表，或者遍历字符串，找出第一个不等于 -1 的value，即下标索引")),Object(r.b)("h2",{id:"代码实现"},"代码实现"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"function firstUniqChar (s) {\n    let hash = new Map();\n    len = s.length;\n    for (let i = 0; i < len; i++) {\n        if (hash.has(s[i])) {\n            hash.set(s[i], -1);\n        } else {\n            hash.set(s[i], i);\n        }\n    }\n    for (let [key, value] of hash) {\n        if (value !== -1) {\n            return value;\n        }\n    }\n    return -1;\n}\n")))}p.isMDXComponent=!0},396:function(e,n,t){"use strict";t.d(n,"a",(function(){return o})),t.d(n,"b",(function(){return s}));var r=t(0),a=t.n(r),l=a.a.createContext({}),c=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},o=function(e){var n=c(e.components);return a.a.createElement(l.Provider,{value:n},e.children)};var i="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,i=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=c(t),s=r,b=p[o+"."+s]||p[s]||u[s]||l;return t?a.a.createElement(b,Object.assign({},{ref:n},i,{components:t})):a.a.createElement(b,Object.assign({},{ref:n},i))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,c=new Array(l);c[0]=p;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[i]="string"==typeof e?e:r,c[1]=o;for(var s=2;s<l;s++)c[s]=t[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);