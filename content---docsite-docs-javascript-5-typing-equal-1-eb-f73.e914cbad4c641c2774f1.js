(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{212:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));n(0);var a=n(438),l=n(439);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var b={title:"比较",sidebar_label:"比较"},c=[{value:"== 和 ===",id:"-和-",children:[]},{value:"关系运算符比较(>, < , >=,<=)",id:"关系运算符比较---",children:[]},{value:"Object.is 等值比较",id:"objectis-等值比较",children:[]},{value:"如何实现 lodash 的 _.isEqual 函数？",id:"如何实现-lodash-的-_isequal-函数？",children:[]}],o={rightToc:c},u="wrapper";function p(e){var t=e.components,n=i(e,["components"]);return Object(a.b)(u,r({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"-和-"},"== 和 ==="),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"undefined == null // true\nundefined === null // false\n[] == [] // false\n[] === [] // false\n{} === {} // false\n")),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"==")," 的比较规则："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"存在布尔值，两侧都转成数字"),Object(a.b)("li",{parentName:"ul"},"字符串和数字，都转成数字"),Object(a.b)("li",{parentName:"ul"},"有一个对象，调 ",Object(a.b)("inlineCode",{parentName:"li"},"valueOf()")," ，如果 ",Object(a.b)("inlineCode",{parentName:"li"},"valueOf()")," 不是数字类型，调用 ",Object(a.b)("inlineCode",{parentName:"li"},"toString()")," 。然后和另一个值比较"),Object(a.b)("li",{parentName:"ul"},"都是对象，是同一引用才相等"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"null")," 和 ",Object(a.b)("inlineCode",{parentName:"li"},"undefined")," 任何时候不会做转换为其他值，但是 ",Object(a.b)("inlineCode",{parentName:"li"},"null == undefined")),Object(a.b)("li",{parentName:"ul"},"如果存在 ",Object(a.b)("inlineCode",{parentName:"li"},"NaN"),", 两侧不相等")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"false == 0 // true\ntrue == 1\n\n'12' == 12 // true\n\n[12] == 12 // true\n[12] == '12' // true\n\n[12] == [12] // false\n{a: 12} == {a: 12} //false\n\nnull == 0 // false\nundefined == 0 //false\nnull == undefined // false\n\nNaN == NaN // false\n")),Object(a.b)("h2",{id:"关系运算符比较---"},"关系运算符比较(>, < , >=,<=)"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"存在布尔值，两侧都转成数字"),Object(a.b)("li",{parentName:"ul"},"字符串和数字，都转成数字"),Object(a.b)("li",{parentName:"ul"},"都是字符串,按字典序比较"),Object(a.b)("li",{parentName:"ul"},"如果是数组，数组调用 ",Object(a.b)("inlineCode",{parentName:"li"},"toString()")," 转字符串，再和另一个值比"),Object(a.b)("li",{parentName:"ul"},"如果是其它对象返回 ",Object(a.b)("inlineCode",{parentName:"li"},"false")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"https://stackoverflow.com/questions/2910495/why-null-0-null-0-but-not-null-0"}),"如果存在 ",Object(a.b)("inlineCode",{parentName:"a"},"null")," ， ",Object(a.b)("inlineCode",{parentName:"a"},"null")," 转为0")),Object(a.b)("li",{parentName:"ul"},"如果存在 ",Object(a.b)("inlineCode",{parentName:"li"},"undefined")," 返回 ",Object(a.b)("inlineCode",{parentName:"li"},"false")),Object(a.b)("li",{parentName:"ul"},"如果存在 ",Object(a.b)("inlineCode",{parentName:"li"},"NaN")," 返回 ",Object(a.b)("inlineCode",{parentName:"li"},"false"))),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"true > 0  // true\n'12' >  2 // true\n\n'12' > '2' // false\n'b' > 'abbb' // true\n\n[12] > '2' //false\n[12] >= '12' // true\n[12] > 2 // true\n\n{a: 1} < {b: 2} //false\n\nnull > 0 || null < 0 //false\nnull >= 0 && null <= 0 //true\n\nundefined >= 0 || undefined <= 0 // false\n")),Object(a.b)(l.a,{type:"warning",mdxType:"Hint"},"引用类型都是地址的比较，而非真实值的比较"),Object(a.b)("p",null,"其实我们自己可以重写 ",Object(a.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate")," 这个函数，使得其能够对任何事物进行比较，也就是深比较（通过一层一层的递归进行比较），深比较是很耗时的，一般不推荐这么干，因为要保证比较所花的时间少于重新渲染的整个组件所花的时间 ",Object(a.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),", redux状态树的比较是什么比较？"),Object(a.b)("h2",{id:"objectis-等值比较"},"Object.is 等值比较"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",r({parentName:"tr"},{align:null})),Object(a.b)("th",r({parentName:"tr"},{align:null}),"解释"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"基础类型"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"引用类型"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"+0和-0"),Object(a.b)("th",r({parentName:"tr"},{align:null}),"NaN和NaN"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"=="),Object(a.b)("td",r({parentName:"tr"},{align:null}),"相等运算符"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"值的比较（会自动转换数据类型）"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"引用地址比较"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"true"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"==="),Object(a.b)("td",r({parentName:"tr"},{align:null}),"严格相等运算符"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"值+类型的比较（不会自动转换数据类型）"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"引用地址比较"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"true"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"false")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"Object.is"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"(a,b)"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"同值相等比较"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"值+类型的比较（不会自动转换数据类型）"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"引用地址比较"),Object(a.b)("td",r({parentName:"tr"},{align:null}),"false")))),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"undefined")," 和 ",Object(a.b)("inlineCode",{parentName:"p"},"null")," 与自（严格）相等。"),Object(a.b)("p",null,"ES6之前缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等（指的是+0和-0，NaN和NaN的情况，引用类型还是引用比较）。"),Object(a.b)("p",null,"ES6 提出“Same-value equality”（同值相等）算法，用来解决这个问题。Object.is 就是部署这个算法的新方法。它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"Object.is('foo', 'foo')  // true\nObject.is({}, {})  // false\n")),Object(a.b)("p",null,"不同之处只有两个：一是+0不等于-0，二是NaN等于自身。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"+0 === -0 //true\nNaN === NaN // false\n\nObject.is(+0, -0) // false\nObject.is(NaN, NaN) // true\n")),Object(a.b)("h2",{id:"如何实现-lodash-的-_isequal-函数？"},"如何实现 lodash 的 _.isEqual 函数？"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"_.isEqual")," 支持的比较的数据类型较多， 包括Set,Map和类数组类型等，要想了解 ",Object(a.b)("inlineCode",{parentName:"p"},"_.isEqual")," 的实现，首先需要对数据类型进行分类的判断。"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"对于非引用类型：数字、字符串、 ",Object(a.b)("inlineCode",{parentName:"li"},"null")," 、 ",Object(a.b)("inlineCode",{parentName:"li"},"undefined")," 、布尔类型，使用 ",Object(a.b)("inlineCode",{parentName:"li"},"===")," 操作既可以判断出来。对于特殊的 ",Object(a.b)("inlineCode",{parentName:"li"},"NaN === NaN")," 为 false 和 ",Object(a.b)("inlineCode",{parentName:"li"},"0 === -0")," 为 true 这两种情况要特殊处理。这里我们不讨论这两种情况，因为我觉的这两种值没有意义，业务中也不会出现这两种值，但是他们在 ",Object(a.b)("inlineCode",{parentName:"li"},"_.isEqual")," 下是相等的。"),Object(a.b)("li",{parentName:"ol"},"对于日期类型、正则类型不能使用 ",Object(a.b)("inlineCode",{parentName:"li"},"===")," 处理，需要单独做处理。"),Object(a.b)("li",{parentName:"ol"},"对于 Object 和 Array 类型则需要递归处理， ",Object(a.b)("inlineCode",{parentName:"li"},"Object")," 和 ",Object(a.b)("inlineCode",{parentName:"li"},"Array")," 的元素可能包括任何数据类型。"),Object(a.b)("li",{parentName:"ol"},"如何实现对 ",Object(a.b)("inlineCode",{parentName:"li"},"Set()")," 、 ",Object(a.b)("inlineCode",{parentName:"li"},"Map()")," 、类数组对像等其他类型的实现。")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"const equals = (a, b) => {\n // 三等判断出是true，那肯定是true\n if (a === b) return true;\n\n // 三等判断出是false，只要其中一个是原始类型，那这个false是有效的\n // ps：如果a,b都是函数的话统统不等，lodash是这个效果\n if (typeof a !== 'object' || typeof b !== 'object') return false;\n if (a === null || b === null) return false;\n\n // 相同类的实例才继续，否则就没必要比了\n if (a.__proto__ !== b.__proto__) return false;\n if (a instanceof RegExp) return ''+a === ''+b;\n if (a instanceof Date) return a.getTime() ===  b.getTime();\n\n // 先看看a, b的大小，不一样也没必要比了\n let keys = Object.keys(a);\n if (keys.length !== Object.keys(b).length) return false;\n\n // 对其属性再进行递归比较\n return keys.every(k => equals(a[k], b[k]));\n};\n")))}p.isMDXComponent=!0},439:function(e,t,n){"use strict";var a=n(0),l=n.n(a),r=n(441),i=n.n(r),b=(n(440),{best:{name:"推荐",color:"#50c610",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),l.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},l.a.createElement("g",null,l.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},l.a.createElement("g",null,l.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),l.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),l.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});t.a=function(e){var t=e.type,n=e.children;return l.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(b[t].color)}},l.a.createElement("div",{style:{float:"left"}},b[t].icon),l.a.createElement("div",{dangerouslySetInnerHTML:{__html:i()("<strong>".concat(b[t].name,"</strong>：").concat(n))}}))}},440:function(e,t,n){}}]);