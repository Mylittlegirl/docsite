(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{136:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return p}));t(0);var r=t(390);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a={title:"闭包的神",sidebar_label:"闭包的神"},i=[{value:"神1：Scope",id:"神1：scope",children:[{value:"局部作用域（局部变量/私有变量）",id:"局部作用域（局部变量私有变量）",children:[]},{value:"全局作用域（全局变量）",id:"全局作用域（全局变量）",children:[]},{value:"闭包作用域",id:"闭包作用域",children:[]}]},{value:"神2：GC",id:"神2：gc",children:[{value:"闭包常驻内存原因",id:"闭包常驻内存原因",children:[]},{value:"闭包的隐式写法",id:"闭包的隐式写法",children:[]}]}],l={rightToc:i},b="wrapper";function p(e){var n=e.components,t=c(e,["components"]);return Object(r.b)(b,o({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"闭包本质上是函数作用域的继承。")),Object(r.b)("h2",{id:"神1：scope"},"神1：Scope"),Object(r.b)("p",null,"Scope包括：局部作用域，全局作用域，闭包"),Object(r.b)("img",{width:"250",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/S6CoAv.jpg"}),Object(r.b)("p",null,"JS 中创建的函数，可以访问函数内局部变量，以及函数外全局变量。"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"那如果函数嵌套函数呢？")),Object(r.b)("h3",{id:"局部作用域（局部变量私有变量）"},"局部作用域（局部变量/私有变量）"),Object(r.b)("p",null,"函数内部定义的变量是定义在局部的变量。在下面的示例中，如果我们尝试在函数外面输出 ",Object(r.b)("inlineCode",{parentName:"p"},"words")," 的值，会得到一个引用错误。因为 ",Object(r.b)("inlineCode",{parentName:"p"},"words")," 是一个存在于局部作用域的变量："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"// Example of accessing variables INSIDE the function\n// words is a LOCAL variable\nfunction speak(){\n   var words = 'hi';\n   console.log(words);\n}\nspeak(); // 'hi'\nconsole.log(words); // Uncaught ReferenceError: words is not defined\n")),Object(r.b)("h3",{id:"全局作用域（全局变量）"},"全局作用域（全局变量）"),Object(r.b)("p",null,"与上面的例子不同，下面例子中的 ",Object(r.b)("inlineCode",{parentName:"p"},"words")," 是定义在全局作用域的。也就是说，它可以被所有函数访问到。"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"// Example of accessing variables OUTSIDE the function\n// words is a GLOBAL variable\nvar words = 'hi';\nfunction speak(){\n   console.log(words);\n}\nspeak(); // 'hi'\nconsole.log(words); // 'hi'\n")),Object(r.b)("h3",{id:"闭包作用域"},"闭包作用域"),Object(r.b)("p",null,"闭包是在函数外部的 Scope 访问私有变量的方式，开辟了一条特殊的作用域，即闭包作用域"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"需要例子")),Object(r.b)("h2",{id:"神2：gc"},"神2：GC"),Object(r.b)("p",null,"JS垃圾回收基本原理："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"如果一个对象不再被引用，那么这个对象就会被GC回收；"),Object(r.b)("li",{parentName:"ul"},"如果在两个不同的",Object(r.b)("strong",{parentName:"li"},"函数作用域内"),"（可以简单这样理解，准确说是 ",Object(r.b)("inlineCode",{parentName:"li"},"handleScope")," ）两个对象互相引用，而不再被其它作用域内对象所引用，那么这两个互相引用的对象也会被回收。")),Object(r.b)("h3",{id:"闭包常驻内存原因"},"闭包常驻内存原因"),Object(r.b)("p",null,"在了解闭包的作用之前，我们先回顾一下 JS 中的 GC 机制：在 JS 中，如果一个对象不再被引用，那么这个对象就会被 GC 回收，否则这个对象一直会保存在内存中。在下面的例子中，B 定义在 A 中，因此 B 依赖于 A ,而外部变量 C 又引用了 B , 所以 A 间接的被 C 引用。也就是说，A 不会被 GC 回收，会一直保存在内存中。为了证明我们的推理，可以将下面的例子运行下，会得出下面注释中的结果："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"function A() {  \n   var count = 0;  \n   function B() {  \n      count++;  \n      console.log(count);  \n   }  \n   return B;  \n}  \nvar C = A();  \nC();// 1  \nC();// 2  \nC();// 3\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"count")," 是函数 A 中的一个变量，它的值在函数 B 中被改变，函数 B 每执行一次， ",Object(r.b)("inlineCode",{parentName:"p"},"count")," 的值就在原来的基础上累加 1 。因此，函数 A 中的 ",Object(r.b)("inlineCode",{parentName:"p"},"count")," 变量会一直保存在内存中。"),Object(r.b)("p",null,"当我们需要在模块中定义一些变量，并希望这些",Object(r.b)("strong",{parentName:"p"},"变量一直保存在内存中"),"但又不会“污染”全局的变量时，就可以用闭包来定义这个模块。"),Object(r.b)("h3",{id:"闭包的隐式写法"},"闭包的隐式写法"),Object(r.b)("p",null,"上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),'(function(document){  \n   var viewport;  \n   var obj = {  \n       init:function(id){  \n          viewport = document.querySelector("#"+id);  \n       },  \n       addChild:function(child){  \n           viewport.appendChild(child);  \n       },  \n       removeChild:function(child){  \n           viewport.removeChild(child);  \n       }  \n   }  \n   window.jView = obj;  \n})(document);\n')),Object(r.b)("p",null,"这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。"),Object(r.b)("p",null,"功能很简单，但这里涉及到了另外一个概念：",Object(r.b)("strong",{parentName:"p"},"立即执行函数"),"。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。"),Object(r.b)("p",null,"可以将上面的代码拆分成两部分：",Object(r.b)("inlineCode",{parentName:"p"},"(function(){})")," 和 ",Object(r.b)("inlineCode",{parentName:"p"},"()")," , ",Object(r.b)("inlineCode",{parentName:"p"},"(function(){})")," 是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加 ",Object(r.b)("inlineCode",{parentName:"p"},"()")," 就表示执行这个匿名函数。"),Object(r.b)("p",null,"因此这段代码执行执行过程可以分解如下："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),'var f = function(document){  \n   var viewport;  \n   var obj = {  \n       init:function(id){  \n           viewport = document.querySelector("#"+id);  \n       },  \n       addChild:function(child){  \n           viewport.appendChild(child);  \n       },  \n       removeChild:function(child){  \n           viewport.removeChild(child);  \n       }  \n   }  \n   window.jView = obj;  \n};  \nf(document);\n')),Object(r.b)("p",null,"在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，由似乎不具备闭包的条件，但注意这句代码："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"window.jView = obj;\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"obj")," 是在函数 f 中定义的一个对象，这个对象中定义了一系列方法， 执行 ",Object(r.b)("inlineCode",{parentName:"p"},"window.jView = obj")," 就是在 ",Object(r.b)("inlineCode",{parentName:"p"},"window")," 全局对象定义了一个变量 ",Object(r.b)("inlineCode",{parentName:"p"},"jView")," ，并将这个变量指向 ",Object(r.b)("inlineCode",{parentName:"p"},"obj")," 对象，即全局变量 ",Object(r.b)("inlineCode",{parentName:"p"},"jView")," 引用了 ",Object(r.b)("inlineCode",{parentName:"p"},"obj")," . 而 ",Object(r.b)("inlineCode",{parentName:"p"},"obj")," 对象中的函数又引用了函数 f 中的变量 ",Object(r.b)("inlineCode",{parentName:"p"},"viewport")," ,因此函数 f 中的 ",Object(r.b)("inlineCode",{parentName:"p"},"viewport")," 不会被 GC 回收， ",Object(r.b)("inlineCode",{parentName:"p"},"viewport")," 会一直保存到内存中，所以这种写法满足了闭包的条件。"),Object(r.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/vVS1rY.png"}))}p.isMDXComponent=!0},390:function(e,n,t){"use strict";t.d(n,"a",(function(){return i})),t.d(n,"b",(function(){return u}));var r=t(0),o=t.n(r),c=o.a.createContext({}),a=function(e){var n=o.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},i=function(e){var n=a(e.components);return o.a.createElement(c.Provider,{value:n},e.children)};var l="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},p=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,l=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=a(t),u=r,d=p[i+"."+u]||p[u]||b[u]||c;return t?o.a.createElement(d,Object.assign({},{ref:n},l,{components:t})):o.a.createElement(d,Object.assign({},{ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,a=new Array(c);a[0]=p;var i={};for(var b in n)hasOwnProperty.call(n,b)&&(i[b]=n[b]);i.originalType=e,i[l]="string"==typeof e?e:r,a[1]=i;for(var u=2;u<c;u++)a[u]=t[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);