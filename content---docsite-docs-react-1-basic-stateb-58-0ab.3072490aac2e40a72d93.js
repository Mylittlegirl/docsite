(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return i}));n(0);var r=n(179);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)n=p[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o={id:"state",title:"状态",sidebar_label:"状态"},l=[{value:"state v.s. props",id:"state-vs-props",children:[]},{value:"prop-types",id:"prop-types",children:[]},{value:"defaultProps",id:"defaultprops",children:[]},{value:"setState",id:"setstate",children:[{value:"哪些周期可以使用？",id:"哪些周期可以使用？",children:[]},{value:"如何修改 state？",id:"如何修改-state？",children:[]}]}],c={rightToc:l},b="wrapper";function i(e){var t=e.components,n=p(e,["components"]);return Object(r.b)(b,a({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"state-vs-props"},"state v.s. props"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"state")," 是组件自身的状态，组件自己维护，也可以从父组件传递而来。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"props")," 是传递来的状态，可以是从父组件传递而来，也可以是组件自身绑定的属性。")),Object(r.b)("p",null,"可以通过 ES2018 的对象扩展运算符，将父组件的信息以更简洁的方式快速地传递给子组件："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-jsx"}),"<Component {...props} />\n")),Object(r.b)("p",null,"通过这种方式，不用考虑性能的问题，通过 babel 转义后的 ",Object(r.b)("inlineCode",{parentName:"p"},"... 运算符")," 性能和原生的一致。"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"强制"),"：请只传递 component 需要的 props，不要滥用。传得太多，或者层次传得太深，都会加重 shouldComponentUpdate 里面的数据比较负担，因此请慎用spread attributes。")),Object(r.b)("h2",{id:"prop-types"},"prop-types"),Object(r.b)("p",null,"prop-types用来检查组件的属性，当你给属性传递了无效值时，JavsScript 控制台将会打印警告。出于性能原因，prop-types 只在",Object(r.b)("strong",{parentName:"p"},"开发模式"),"下进行检查。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-text"}),"prop-types // 包名\npropTypes // 组件属性名\nPropTypes // 类名\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"注意"),"：命名，尤其是后面两个p的大小写")),Object(r.b)("h2",{id:"defaultprops"},"defaultProps"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"defaultProps")," 用来确保 ",Object(r.b)("inlineCode",{parentName:"p"},"this.props.name")," 在父组件没有特别指定的情况下，有一个初始值。类型检查发生在 ",Object(r.b)("inlineCode",{parentName:"p"},"defaultProps")," 赋值之后，所以类型检查也会应用在 ",Object(r.b)("inlineCode",{parentName:"p"},"defaultProps")," 上面。"),Object(r.b)("h2",{id:"setstate"},"setState"),Object(r.b)("h3",{id:"哪些周期可以使用？"},"哪些周期可以使用？"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"did 的生命周期都可以。"),Object(r.b)("li",{parentName:"ul"},"will 的生命周期只有",Object(r.b)("inlineCode",{parentName:"li"},"componentWillReceiveProps"),"、",Object(r.b)("inlineCode",{parentName:"li"},"componentWillMount")," ，且这两个周期都将要废弃。")),Object(r.b)("h3",{id:"如何修改-state？"},"如何修改 state？"),Object(r.b)("p",null,"在合适的生命周期内调用 ",Object(r.b)("inlineCode",{parentName:"p"},"this.setState()")," 函数。"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"强制"),"：绝对不要直接修改 this.state，这不仅是一种低效的做法，而且修改的状态有可能被之后的 setState 操作覆盖。")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"注意"),"：setState 方法只适用于 class 类型的组件，函数式组件一般无法调用该方法。")))}i.isMDXComponent=!0},179:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return s}));var r=n(0),a=n.n(r),p=a.a.createContext({}),o=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=o(e.components);return a.a.createElement(p.Provider,{value:t},e.children)};var c="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},i=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),i=o(n),s=r,u=i[l+"."+s]||i[s]||b[s]||p;return n?a.a.createElement(u,Object.assign({},{ref:t},c,{components:n})):a.a.createElement(u,Object.assign({},{ref:t},c))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,o=new Array(p);o[0]=i;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<p;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}i.displayName="MDXCreateElement"}}]);