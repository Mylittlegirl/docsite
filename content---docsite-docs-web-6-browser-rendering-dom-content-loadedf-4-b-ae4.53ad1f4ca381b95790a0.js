(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{362:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return b}));n(0);var o=n(388);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r={id:"DOMContentLoaded",title:"DOMContentLoaded和load",sidebar_label:"DOMContentLoaded和load"},d=[{value:"DOMContentLoaded和load",id:"domcontentloaded和load",children:[]},{value:"两者的意义",id:"两者的意义",children:[]},{value:"JS脚本与DOMContentLoaded",id:"js脚本与domcontentloaded",children:[]},{value:"1. JS脚本都在CSS引入前",id:"1-js脚本都在css引入前",children:[]},{value:"2. 存在JS脚本在CSS引入后",id:"2-存在js脚本在css引入后",children:[]},{value:"async和defer与DOMContentLoaded",id:"async和defer与domcontentloaded",children:[{value:"1. async和DOMContentLoaded",id:"1-async和domcontentloaded",children:[]},{value:"2. defer和DOMContentLoaded",id:"2-defer和domcontentloaded",children:[]}]},{value:"参考链接",id:"参考链接",children:[]}],l={rightToc:d},s="wrapper";function b(e){var t=e.components,n=c(e,["components"]);return Object(o.b)(s,a({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"domcontentloaded和load"},"DOMContentLoaded和load"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"当初始的 HTML 文档被完全加载和解析完成之后，",Object(o.b)("strong",{parentName:"p"},"DOMContentLoaded 事件"),"被触发，而无需等待样式表、图像和子框架的完成加载。")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"load事件"),"，当整个页面加载后会触发该事件，包括所有相关资源，如样式表、图像。"))),Object(o.b)("p",null,"在下图中，在控制台中展示了DOMContentLoaded、load的执行时间，其中蓝色线代表的是DOMContentLoaded，红色的线代表load的时间。"),Object(o.b)("p",null,Object(o.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/L5hJR0.png",alt:null}))),Object(o.b)("p",null,"通过这个",Object(o.b)("a",a({parentName:"p"},{href:"https://testdrive-archive.azurewebsites.net/HTML5/DOMContentLoaded/Default.html"}),"链接"),"，可以直观感受下两者的不同。"),Object(o.b)("h2",{id:"两者的意义"},"两者的意义"),Object(o.b)("p",null,"对于load来说，它代表了访问页面所需要的所有资源已经全部加载完毕。"),Object(o.b)("p",null,"但是如果拿load事件来衡量网页加载速度其实并不准确，因为我们访问网页时可能并不需要文档的所有信息。打个比方，对于官方文档来说，你所需要关注的可能只有文档的文字是否已经加载完毕，并不需要等待页面上广告和图片的加载。而DOMContentLoaded则是来衡量网页从白屏到出现内容所需要的时间。"),Object(o.b)("h2",{id:"js脚本与domcontentloaded"},"JS脚本与DOMContentLoaded"),Object(o.b)("p",null,"DOMContentLoaded事件的触发代表",Object(o.b)("strong",{parentName:"p"},"HTML文档被加载和解析完成"),"，由",Object(o.b)("a",a({parentName:"p"},{href:"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/page-rendering"}),"页面渲染"),"这一节可知，JS脚本的加载、解析和执行会会影响DOM树的构建，那么两者之间到底是什么关系呢？本节将对两者的关系进行详细的介绍。"),Object(o.b)("h2",{id:"1-js脚本都在css引入前"},"1. JS脚本都在CSS引入前"),Object(o.b)("p",null,"如果CSS的引入都在JS脚本后，DOMContentLoaded事件的触发不需要等到css加载完毕。"),Object(o.b)("p",null,"测试代码："),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{}),'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <title>JS脚本都在CSS引入前</title>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <script>\n      document.addEventListener(\'DOMContentLoaded\', function() {\n        console.log(\'DOMContentLoaded\');\n      })\n    <\/script>\n    <script>\n      console.log(\'hello world\');\n    <\/script>\n\n    <link href="https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css" rel="stylesheet">\n\n  </head>\n  <body>\n  </body>\n</html>\n')),Object(o.b)("p",null,"测试截图："),Object(o.b)("p",null,Object(o.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/2ysZtE.png",alt:null}))),Object(o.b)("h2",{id:"2-存在js脚本在css引入后"},"2. 存在JS脚本在CSS引入后"),Object(o.b)("p",null,"如果存在JS脚本在CSS引入后，那么该脚本的执行必须等到CSSOM树构建完才能执行，而DOM树的构建会因为js脚本加载或执行而暂停，直到脚本执行完，才会继续构建DOM树。所以DOMContentLoaded事件的触发要等待CSSOM构建完后触发。"),Object(o.b)("p",null,"关于GUI渲染线程与JS线程之间的关系可以参考：",Object(o.b)("a",a({parentName:"p"},{href:"https://thinkbucket.github.io/docsite/docs/web/13.rendering-engine/rendering-engine"}),"浏览器内核")),Object(o.b)("p",null,"测试代码："),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{}),'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <title>JS脚本都在CSS引入前</title>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <script>\n      document.addEventListener(\'DOMContentLoaded\', function() {\n        console.log(\'DOMContentLoaded\');\n      })\n    <\/script>\n    <link href="https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css" rel="stylesheet">\n  </head>\n  <body>\n  </body>\n  <script>\n    console.log(\'hello world\');\n  <\/script>\n</html>\n')),Object(o.b)("p",null,"测试截图："),Object(o.b)("p",null,Object(o.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/cdZQTk.png",alt:null}))),Object(o.b)("h2",{id:"async和defer与domcontentloaded"},"async和defer与DOMContentLoaded"),Object(o.b)("p",null,"由",Object(o.b)("a",a({parentName:"p"},{href:"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer"}),"async和defer"),"这一节可知，当外联的script添加了async或defer时，会影响页面DOM树的构建。那么这两个属性和DOMContentLoaded是什么关系呢？"),Object(o.b)("h3",{id:"1-async和domcontentloaded"},"1. async和DOMContentLoaded"),Object(o.b)("p",null,"对于设置了async属性的外链JS脚本，DOMContentLoaded事件的触发无需等待样式表加载，当DOM构建完成后就可以触发。"),Object(o.b)("p",null,"由",Object(o.b)("a",a({parentName:"p"},{href:"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/async-defer"}),"async和defer"),"中可知，设置async的脚本加载不影响DOM的构建，执行的时候会影响。也就是说如果DOM的构建快于JS脚本的加载速度，那么DOMContentLoaded和外联脚本无关。如果DOM构建的速度慢于JS脚本的加载时间，那脚本的执行会影响DOMContentLoaded的触发时间。"),Object(o.b)("p",null,"测试脚本："),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{}),'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <title>css阻塞</title>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <script>\n      document.addEventListener(\'DOMContentLoaded\', function() {\n        console.log(\'DOMContentLoaded\');\n      })\n    <\/script>\n    <link href="https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css" rel="stylesheet">\n    <script src="https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js" async><\/script>\n  </head>\n  <body>\n  </body>\n</html>\n\n')),Object(o.b)("p",null,"测试截图：\n",Object(o.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/bh7fCd.png",alt:null}))),Object(o.b)("h3",{id:"2-defer和domcontentloaded"},"2. defer和DOMContentLoaded"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"defer 这个布尔属性被设定用来通知浏览器该脚本将在文档完成解析后，触发 DOMContentLoaded 事件前执行")),Object(o.b)("p",null,"从",Object(o.b)("a",a({parentName:"p"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script"}),"MDN"),"上可以看出,当defer对应的脚本执行完成且DOM构建完成后，DOMContentLoaded事件触发。"),Object(o.b)("p",null,"测试代码："),Object(o.b)("pre",null,Object(o.b)("code",a({parentName:"pre"},{}),'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <title>css阻塞</title>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <script>\n      document.addEventListener(\'DOMContentLoaded\', function() {\n        console.log(\'DOMContentLoaded\');\n      })\n    <\/script>\n    <link href="https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css" rel="stylesheet">\n    <script src="https://cdn.bootcss.com/lodash.js/4.17.15/lodash.core.js" defer><\/script>\n  </head>\n  <body>\n  </body>\n</html>\n')),Object(o.b)("p",null,"测试截图："),Object(o.b)("p",null,Object(o.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/uY4AEb.png",alt:null}))),Object(o.b)("h2",{id:"参考链接"},"参考链接"),Object(o.b)("p",null,Object(o.b)("a",a({parentName:"p"},{href:"https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-0"}),"参考链接1")),Object(o.b)("p",null,Object(o.b)("a",a({parentName:"p"},{href:"https://zhuanlan.zhihu.com/p/25876048"}),"参考链接2")))}b.isMDXComponent=!0},388:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return i}));var o=n(0),a=n.n(o),c=a.a.createContext({}),r=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},d=function(e){var t=r(e.components);return a.a.createElement(c.Provider,{value:t},e.children)};var l="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,d=e.parentName,l=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===t.indexOf(o)&&(n[o]=e[o]);return n}(e,["components","mdxType","originalType","parentName"]),b=r(n),i=o,p=b[d+"."+i]||b[i]||s[i]||c;return n?a.a.createElement(p,Object.assign({},{ref:t},l,{components:n})):a.a.createElement(p,Object.assign({},{ref:t},l))}));function i(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,r=new Array(c);r[0]=b;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[l]="string"==typeof e?e:o,r[1]=d;for(var i=2;i<c;i++)r[i]=n[i];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);