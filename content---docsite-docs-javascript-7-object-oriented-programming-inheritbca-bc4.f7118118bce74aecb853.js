(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{180:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return p}));t(0);var r=t(388);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c={title:"原型链继承",sidebar_label:"原型链继承"},l=[{value:"组合继承",id:"组合继承",children:[]},{value:"寄生继承",id:"寄生继承",children:[]},{value:"寄生组合继承",id:"寄生组合继承",children:[]}],u={rightToc:l},b="wrapper";function p(e){var n=e.components,t=o(e,["components"]);return Object(r.b)(b,a({},u,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"JS相比于其他面向类的语言，在实现继承时并没有真正对构造类进行复制。严格来说，JS才是真正的面向对象语言，而不是面向类语言。它所实现的继承，都是通过每个函数创建之初就存在的",Object(r.b)("inlineCode",{parentName:"p"},"prototype属性进行关联、委托"),"，从而建立联系，间接的实现继承，实际上不会复制父类。"),Object(r.b)("p",null,"JS的继承都基于两种方式："),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"通过原型链继承，即子类的原型指向父类的实例从而实现原型共享。"),Object(r.b)("li",{parentName:"ol"},"通过构造函数继承，即通过js的apply、call实现子类调用父类的属性、方法。")),Object(r.b)("p",null,"原型链方式可以实现所有属性方法共享，但无法做到属性、方法独享（例如Sub1修改了父类的函数，其他所有的子类Sub2、Sub3...想调用旧的函数就无法实现了）；"),Object(r.b)("p",null,"而借用构造函数除了能独享属性、方法外还能在子类构造函数中传递参数，但代码无法复用。"),Object(r.b)("p",null,"总体而言就是可以实现所有属性方法独享，但无法做到属性、方法共享（例如，Sub1新增了一个函数，然后想让Sub2、Sub3...都可以用的话就无法实现了，只能Sub2、Sub3...各自在构造函数中新增）。"),Object(r.b)("h2",{id:"组合继承"},"组合继承"),Object(r.b)("p",null,"组合继承就是把以上两种继承方式一起使用，把共享的属性、方法用原型链继承实现，独享的属性、方法用借用构造函数实现。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"// 定义父类\nfunction Super(name) {\n   this.name = name;\n}\n// 定义共享属性、方法\nSuper.prototype.getName = function () {\n return this.name;\n}\n\n// 定义子类\nfunction Sub(name, age) {\n   // 独享的属性、方法用借用构造函数继承实现\n   Super.call(this, name);\n   this.age = age;\n}\n\n// 共享的属性、方法用原型链继承实现\nSub.prototype = new Super()\n\nvar sub = new Sub('Kimi', 18);\n\nconsole.log(sub.name) // 'Kimi'\nconsole.log(sub.age) // 18\n")),Object(r.b)("p",null,"构造继承关键在于，通过在子类的内部调用父类，即通过使用apply()或call()方法可以在将来新创建的对象上获取父类的成员和方法。"),Object(r.b)("p",null,"组合继承几乎完美实现了js的继承；为什么说是“几乎”？因为组合继承有一个小bug，",Object(r.b)("strong",{parentName:"p"},"实现的时候调用了两次父类构造函数，性能上和副作用上都存在一些问题，于是“寄生继承”就出来了"),"。"),Object(r.b)("h2",{id:"寄生继承"},"寄生继承"),Object(r.b)("p",null,"寄生继承属于第一种通过原型链的方式继承，但是不用实例化父类了，直接实例化一个临时副本实现了相同的原型链继承。（即子类的原型指向父类副本的实例从而实现原型共享）"),Object(r.b)("p",null,"关键方法："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"ES5: ",Object(r.b)("a",a({parentName:"li"},{href:"https://www.google.com/url?q=http://javascript.ruanyifeng.com/oop/object.html%23toc2&sa=D&ust=1570507768698000"}),"Object.create()"),"，底层也是调用了new，但是new的是一个空构造函数。")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"Object.create = function(proto){\n function F() {}\n F.prototype = proto;\n return new F();\n};\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"ES6: Object.setPrototypeOf")),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"\nObject.setPrototypeOf = function(Sub, Super) {\n Sub.__proto__ = Super;\n return Sub;\n};\n")),Object(r.b)("h2",{id:"寄生组合继承"},"寄生组合继承"),Object(r.b)("p",null,"“寄生组合继承”用了“寄生继承”修复了“组合继承”的小bug，让js完美实现继承了"),Object(r.b)("p",null,"特点：委托继承，是一种",Object(r.b)("inlineCode",{parentName:"p"},"间接继承"),"，不会复制父类。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"// 定义父类\nfunction Super(name) {\n   this.name = name;\n}\n// 定义共享属性、方法\nSuper.prototype.getName = function () {\n return this.name;\n}\n\n// 定义子类\nfunction Sub(name, age) {\n   // 独享的属性、方法用借用构造函数继承实现\n   Super.call(this, name);\n   this.age = age;\n}\n// 共享的属性、方法用原型链继承实现\nSub.prototype = Object.create(Super.prototype, {\n constructor: {\n   value: Sub,\n   writable: true,\n\n    enumerable: false, // constructor不可枚举\n   configurable: true\n }\n});\n\nvar sub = new Sub('Kimi', 18);\n\nconsole.log(sub.name) // 'Kimi'\nconsole.log(sub.age) // 18\n")),Object(r.b)("p",null,Object(r.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/image78.png",alt:null}))))}p.isMDXComponent=!0},388:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return i}));var r=t(0),a=t.n(r),o=a.a.createContext({}),c=function(e){var n=a.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=c(e.components);return a.a.createElement(o.Provider,{value:n},e.children)};var u="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=c(t),i=r,s=p[l+"."+i]||p[i]||b[i]||o;return t?a.a.createElement(s,Object.assign({},{ref:n},u,{components:t})):a.a.createElement(s,Object.assign({},{ref:n},u))}));function i(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=p;var l={};for(var b in n)hasOwnProperty.call(n,b)&&(l[b]=n[b]);l.originalType=e,l[u]="string"==typeof e?e:r,c[1]=l;for(var i=2;i<o;i++)c[i]=t[i];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);