(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{158:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return o}));n(0);var r=n(271);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p={id:"ajax",title:"Ajax",sidebar_label:"Ajax"},s=[{value:"Ajax",id:"ajax",children:[]}],c={rightToc:s},u="wrapper";function o(e){var t=e.components,n=l(e,["components"]);return Object(r.b)(u,a({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"ajax"},"Ajax"),Object(r.b)("p",null,"Ajax是Asynchronous Javascript + XML的简写，这一技术能够向服务器请求额外的数据而无须卸载页面，Ajax技术的核心是XMLHttpRequest对象（简称XHR）。"),Object(r.b)("p",null,"XHR的用法首先创建XHR对象，如下："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"var xhr = new XMLHttpRequest();\n")),Object(r.b)("p",null,"在使用XHR对象时，要调用的第一个方法是open()，它接受3个参数："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'要发送的请求的类型（"get"、"post"等）'),Object(r.b)("li",{parentName:"ul"},"请求的URL"),Object(r.b)("li",{parentName:"ul"},"表示是否异步发送请求的布尔值，",Object(r.b)("strong",{parentName:"li"},"默认是true(异步),可以省去"))),Object(r.b)("p",null,"下面就是调用这个方法的例子。  "),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),'xhr.open("get", "api/example", false);\n')),Object(r.b)("p",null,"这行代码会启动一个针对api/example的GET请求。有关这行代码，需要说明两点："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"URL相对于执行代码的当前页面（当然也可以使用绝对路径）；"),Object(r.b)("li",{parentName:"ul"},"调用open()方法并不会真正发送请求，而只是启动一个请求以备发送。")),Object(r.b)("p",null,"注：只能向同一个域使用相同端口和协议的URL发送请求。如果URL与启动请求的页面有任何差别，都会引发安全错误。要发送特定的请求，必须像下面这样调用send()方法："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),'xhr.open("get", "api/example", false);\nxhr.send(null);\n')),Object(r.b)("p",null,"这里的send()方法接收一个参数，即要作为请求主体发送的数据。",Object(r.b)("strong",{parentName:"p"},"如果不需要通过请求主体发送数据，则必须传入null"),"，因为这个参数对有些浏览器来说是必需的。"),Object(r.b)("p",null,"调用send()之后，请求就会被发送到服务器。由于这次请求是同步的，JS代码会等到服务器响应之后再继续执行。在收到响应后，响应的数据会自动填充XHR对象的属性，相关的属性简介如下："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"status：响应的HTTP状态。"),Object(r.b)("li",{parentName:"ul"},"responseText：作为响应主体被返回的文本。"),Object(r.b)("li",{parentName:"ul"},'responseXML：如果响应的内容类型是"text/xml"或"application/xml"，这个属性中将保存包含着响应数据的XML DOM文档。'),Object(r.b)("li",{parentName:"ul"},"statusText：HTTP状态的说明。")),Object(r.b)("p",null,"在接收到响应后，第一步是检查status属性，以确定响应已经成功返回。一般来说，可以将HTTP状态代码为200作为成功的标志。此时，responseText属性的内容已经就绪，而且在内容类型正确的情况下，responseXML也应该能够访问了。此外，状态代码为304表示请求的资源并没有被修改，可以直接使用浏览器中缓存的版本；也意味着响应是有效的。为确保接收到适当的响应，应该像下面这样检查上述两种状态代码："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{}),'xhr.open("get", "api/example", false);\nxhr.send(null);\nif ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {\n          alert(xhr.responseText);\n} else {\n          alert("Request was unsuccessful:"+xhr.status);\n}\n')),Object(r.b)("p",null,"根据返回的状态代码，这个例子可能会显示由服务器返回的内容，也可能会显示一条错误信息。建议通过检测status来决定下一步的操作，不要依赖statusText，因为后者在浏览器使用时不太可靠。"),Object(r.b)("p",null,"另外，无论内容类型是什么，响应主体的内容都会保存到responseText属性中；而对于非XML而言，responseXML属性的值将为null。像前面这样发送同步请求当然没有问题，但多数情况下，我们还是要发送异步请求，才能让JavaScript继续执行而不必等待响应。此时，可以检测XHR对象的readyState属性，该属性表示请求/响应过程的当前活动阶段。这个属性可取的值如下："),Object(r.b)("p",null,"0：未初始化。尚未调用open()方法。"),Object(r.b)("p",null,"1：启动。已经调用open()方法，但尚未调用send()方法。"),Object(r.b)("p",null,"2：发送。已经调用send()方法，但尚未接收到响应。"),Object(r.b)("p",null,"3：接收。已经接收到部分响应数据。"),Object(r.b)("p",null,"4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。"),Object(r.b)("p",null,"只要readyState属性的值由一个值变成另一个值，都会触发一次 ",Object(r.b)("strong",{parentName:"p"},"readystatechange")," 事件，可以利用这个事件来检测每次状态变化后readyState的值。通常我们只对",Object(r.b)("strong",{parentName:"p"},"readyState值为4的阶段感兴趣"),"，因为这时所有数据都已经就绪。不过，",Object(r.b)("strong",{parentName:"p"},"必须在调用open()之前指定onreadystatechange事件处理程序才能确保跨浏览器兼容性"),"。"),Object(r.b)("p",null,"Old XHR Ajax："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),'var xhr = new XMLHttpRequest();\nxhr.onreadystatechange = function(){\n   if (xhr.readyState == 4){\n           if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {\n               alert(xhr.responseText);\n         } else {\n              alert("Request was unsuccessful:" + xhr.status);\n         }\n   }\n};\nxhr.open("get", "exanmple.php", true);\nxhr.send(null);\n')),Object(r.b)("p",null,"XHR Level2 Ajax："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),'function myAsyncFunction(url) {\n return new Promise((resolve, reject) => {\n   const xhr = new XMLHttpRequest();\n   xhr.open("GET", url); // 通过url建立链接\n   xhr.onload = () => resolve(xhr.responseText); //接收到完整响应数据时触发\n   xhr.onerror = () => reject(xhr.statusText); //请求发生错误的时候触发。\n   xhr.send();\n });\n};\n')),Object(r.b)("p",null,"完整的XHR应用参考：",Object(r.b)("a",a({parentName:"p"},{href:"https://github.com/cosmos-x/earth-ui/blob/master/src/components/_utils/xhr/index.js"}),"https://github.com/cosmos-x/earth-ui/blob/master/src/components/_utils/xhr/index.js")," "),Object(r.b)("p",null,Object(r.b)("a",a({parentName:"p"},{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"}),"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest")," "),Object(r.b)("p",null,Object(r.b)("a",a({parentName:"p"},{href:"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html"}),"XMLHttpRequest Level 2 使用指南，作者：阮一峰")),Object(r.b)("p",null,"掘金上一篇",Object(r.b)("a",a({parentName:"p"},{href:"https://juejin.im/post/5a20b1f1f265da432529179c#heading-8"}),"Ajax"),"详解讲的还不错"))}o.isMDXComponent=!0},271:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r),l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},s=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)};var c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},o=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),o=p(n),b=r,i=o[s+"."+b]||o[b]||u[b]||l;return n?a.a.createElement(i,Object.assign({},{ref:t},c,{components:n})):a.a.createElement(i,Object.assign({},{ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,p=new Array(l);p[0]=o;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[c]="string"==typeof e?e:r,p[1]=s;for(var b=2;b<l;b++)p[b]=n[b];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,n)}o.displayName="MDXCreateElement"}}]);