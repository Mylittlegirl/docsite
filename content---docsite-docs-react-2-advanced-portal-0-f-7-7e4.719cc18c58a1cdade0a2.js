(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{210:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return b}));n(0);var a=n(390),l=n(391);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var r={id:"portal",title:"Portal",sidebar_label:"Portal"},i=[{value:"什么是 Portal?",id:"什么是-portal",children:[]},{value:"为什么需要 Portal?",id:"为什么需要-portal",children:[]},{value:"React v16 中的 Portal",id:"react-v16-中的-portal",children:[]},{value:"通过 Portal 进行事件冒泡",id:"通过-portal-进行事件冒泡",children:[]},{value:"参考资料",id:"参考资料",children:[]}],p={rightToc:i},s="wrapper";function b(e){var t=e.components,n=c(e,["components"]);return Object(a.b)(s,o({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"什么是-portal"},"什么是 Portal?"),Object(a.b)("p",null,"Portal 中文即“传送门”的意思，来看一张电影剧照，不用多说，你应该能猜出来是什么意思："),Object(a.b)("div",{align:"center"},Object(a.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/p2474141533.jpg"}),Object(a.b)("p",null,"图：《",Object(a.b)("a",{href:"https://movie.douban.com/subject/3025375/"},"奇异博士"),"》中的传送门")),Object(a.b)("p",null,"官方定义：Portals 提供了一种很好的将子节点渲染到父组件以外的 DOM 节点的方式。"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"ReactDOM.createPortal(child, container)\n")),Object(a.b)("p",null,"第一个参数 ",Object(a.b)("inlineCode",{parentName:"p"},"child")," 是任何",Object(a.b)("a",o({parentName:"p"},{href:"https://reactjs.org/docs/react-component.html#render"}),"可渲染的 React 子元素"),"，例如一个元素，字符串或 ",Object(a.b)("inlineCode",{parentName:"p"},"fragment")," 。第二个参数 ",Object(a.b)("inlineCode",{parentName:"p"},"container")," 则是一个真实的 DOM 元素。"),Object(a.b)("h2",{id:"为什么需要-portal"},"为什么需要 Portal?"),Object(a.b)("p",null,"React Portal 之所以叫 Portal，因为做的就是和“传送门”一样的事情：",Object(a.b)("strong",{parentName:"p"},"在 JSX 中 ",Object(a.b)("inlineCode",{parentName:"strong"},"render")," 到一个组件里面去，实际改变的是网页上另一处的 DOM 结构"),"。"),Object(a.b)("p",null,"在 React 的世界中，一切都是组件，用组件可以表示一切界面中发生的逻辑，不过，有些特例处理起来还比较麻烦，比如某个组件在渲染时，在某种条件下需要显示一个 Dialog，这该怎么做呢？"),Object(a.b)("p",null,"最直观的做法，就是直接在 JSX 中把 Dialog 画出来，像下面代码的样子："),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"<div>\n   <p>this is p</p>\n   { needDialog ? <Dialog /> : null }\n</div>\n")),Object(a.b)("p",null,"我们写的 Dialog 组件是这样渲染的话，那么 Dialog 最终渲染产生的 DOM 将会出现在 JSX 相应定义的地方:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),'<div>\n   <p>this is p</p>\n   <div class="dialog">Dialog Content</div>\n</div>\n')),Object(a.b)("p",null,"这样写会有什么问题呢？对于 Dialog ，从用户感知角度，应该是一个独立的组件，通常应该显示在屏幕的最中间，现在 Dialog 被包在其他组件中，要用 CSS 的 ",Object(a.b)("inlineCode",{parentName:"p"},"position")," 属性控制 Dialog 位置，就要求从 Dialog 往上一直到 ",Object(a.b)("inlineCode",{parentName:"p"},"body")," 没有其他 ",Object(a.b)("inlineCode",{parentName:"p"},"position: relative")," 的元素干扰，这有点难为作为通用组件的 Dialog，毕竟谁管得住所有组件不用 ",Object(a.b)("inlineCode",{parentName:"p"},"position")," 。另外 Dialog 的样式，因为包在其他元素中，各种样式纠缠，CSS 样式会变得难以维护。"),Object(a.b)("p",null,"这样写 Dialog 组件虽然能满足基本需求，但局限很多，维护代价也比较高，有没有其他办法？"),Object(a.b)("p",null,"有一个其他办法，就是在 React 组件树的最顶层留一个元素专属于 Dialog，然后通过 Redux 或 Context 或其他什么通讯方式给这个 Dialog 发送信号，让 Dialog 显示或者不显示。"),Object(a.b)("div",{align:"center"},Object(a.b)("img",{width:"480",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/yjyy0B.png"})),Object(a.b)("p",null,"这种方法看起来还凑合着，但是无疑增加了代码之间的耦合，维护成本是可想而知的。而且如果我们把 Dialog 做成一个通用组件，希望里面的内容完全定制，这就更加麻烦了，看如下代码："),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"<div>\n  <p>this is p</p>\n  { needDialog ?\n    <Dialog>\n       <header>Any Header</header>\n       <section>Any content</section>\n    </Dialog>\n    : null }\n</div>\n")),Object(a.b)("p",null,"如果以上代码想写成 ",Object(a.b)("inlineCode",{parentName:"p"},"signal")," 的方式传递，要传递的东西会变得更加复杂，也缺乏灵活性。"),Object(a.b)(l.a,{type:"tip",mdxType:"Hint"},"当我们既希望在组件的 JSX 中选择使用 Dialog ，把 Dialog 用得像一个普通组件一样，但是又希望 Dialog 内容显示在另一个地方，就需要 Portal 上场了。"),Object(a.b)("h2",{id:"react-v16-中的-portal"},"React v16 中的 Portal"),Object(a.b)("p",null,"Portal 就是建立一个“",Object(a.b)("strong",{parentName:"p"},"传送门"),"”，让 Dialog 这样的组件在表示层和其他组件没有任何差异，但是渲染的东西却像经过传送门一样出现在另一个地方。"),Object(a.b)("div",{align:"center"},Object(a.b)("img",{width:"480",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/0F52fx.png"})),Object(a.b)("p",null,"在 v16 中，使用 Portal 创建 Dialog 组件简单多了，不需要牵扯到 ",Object(a.b)("inlineCode",{parentName:"p"},"componentDidMount")," 、 ",Object(a.b)("inlineCode",{parentName:"p"},"componentDidUpdate")," ，也不用调用 API 清理 Portal，关键代码在  ",Object(a.b)("inlineCode",{parentName:"p"},"render")," 中，像下面这样就行。"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { createPortal } from 'react-dom';\n\nclass Dialog extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const doc = window.document;\n    this.node = doc.createElement('div');\n    doc.body.appendChild(this.node);\n  }\n\n  componentWillUnmount() {\n    window.document.body.removeChild(this.node);\n  }\n\n  render() {\n    return createPortal(\n      <div class=\"dialog\">\n        {this.props.children}\n      </div>, //塞进传送门的JSX\n      this.node //传送门的另一端DOM node\n    );\n  }\n}\n")),Object(a.b)("p",null,"假设在 ",Object(a.b)("inlineCode",{parentName:"p"},"Parent")," 组件中是这样进行调用的:"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),'render() {\n  return (\n    <div onClick={this.handleClick}>\n      <p>this is p</p>\n      <Dialog>\n        <div className="dialog">\n          <button>Click</button>\n        </div>\n      </Dialog>\n    </div>\n  );\n}\n')),Object(a.b)("p",null,"那么实际渲染出来的 DOM 大概如下图所示，不难发现在 p 之后定义的 ",Object(a.b)("inlineCode",{parentName:"p"},"Dialog")," 实际被传送到了 body 下面："),Object(a.b)("img",{width:"500",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/MIG83K.png"}),Object(a.b)("h2",{id:"通过-portal-进行事件冒泡"},"通过 Portal 进行事件冒泡"),Object(a.b)("p",null,"v16 之前的 React Portal 实现方法，有一个小小的缺陷，就是 Portal 是单向的，内容通过 Portal 传到另一个出口，在那个出口 DOM 上发生的事件是不会冒泡传送回进入那一端的。"),Object(a.b)("p",null,"也就是说，这样的代码："),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"<div onClick={handleDialogClick}>\n   <Dialog>\n     What ever shit\n   </Dialog>\n</div>\n")),Object(a.b)("p",null,"在 Dialog 画出的内容上点击， ",Object(a.b)("inlineCode",{parentName:"p"},"handleDialogClick")," 是不会被触发的。当然，这只是一个小小的缺陷，大部分场景下事件不传过来也没什么大问题。"),Object(a.b)(l.a,{type:"tip",mdxType:"Hint"},"在 v16 中，通过 Portal 渲染出去的 DOM，事件是会传送门的入口端冒泡出来的，上面的 `handleDialogClick` 也就会被调用到了。[Run in CodePen](https://codepen.io/muwenzi/pen/xxxZYER)"),Object(a.b)("h2",{id:"参考资料"},"参考资料"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("a",o({parentName:"li"},{href:"https://zh-hans.reactjs.org/docs/portals.html"}),"React 官方文档（中文）：Portals")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("a",o({parentName:"li"},{href:"https://zhuanlan.zhihu.com/p/29880992"}),"传送门：React Portal，作者：程墨Morgan"))))}b.isMDXComponent=!0},391:function(e,t,n){"use strict";var a=n(0),l=n.n(a),o=n(393),c=n.n(o),r=(n(392),{better:{name:"推荐",color:"#50c610",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),l.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},l.a.createElement("g",null,l.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},l.a.createElement("g",null,l.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:l.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},l.a.createElement("g",null,l.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),l.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),l.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});t.a=function(e){var t=e.type,n=e.children;return l.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(r[t].color)}},l.a.createElement("div",{style:{float:"left"}},r[t].icon),l.a.createElement("div",{dangerouslySetInnerHTML:{__html:c()("<strong>".concat(r[t].name,"</strong>：").concat(n))}}))}},392:function(e,t,n){}}]);