(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{122:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"rightToc",(function(){return b})),t.d(n,"default",(function(){return o}));t(0);var r=t(388);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i={title:"内存空间",sidebar_label:"内存空间"},b=[{value:"Object",id:"object",children:[{value:"继承关系",id:"继承关系",children:[]},{value:"内嵌对象",id:"内嵌对象",children:[]}]}],p={rightToc:b},l="wrapper";function o(e){var n=e.components,t=c(e,["components"]);return Object(r.b)(l,a({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"object"},"Object"),Object(r.b)("h3",{id:"继承关系"},"继承关系"),Object(r.b)("p",null,"0bject类是Javascript的对象的具体表现。Javascript 的对象种类繁多，它们是以继承object类的子对象的形式表现出来的。Object类的继承关系如图1所示："),Object(r.b)("div",{align:"center"},Object(r.b)("img",{width:"450",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/cDO0Dx.png"}),Object(r.b)("p",null,"图1：Object类的继承关系")),Object(r.b)("p",null,"Object类的子对象的分配方法各有不同，下文所说的 ",Object(r.b)("inlineCode",{parentName:"p"},"对象")," 指的是顶层的 ",Object(r.b)("inlineCode",{parentName:"p"},"Object"),"。"),Object(r.b)("p",null,"图1中的 ",Object(r.b)("inlineCode",{parentName:"p"},"Smi (Small integer)")," 类和 ",Object(r.b)("inlineCode",{parentName:"p"},"Failure")," 类是下文将要介绍过的“内嵌对象”。也就是说，它们是没有被分配到 VMHeap 的直接数据。"),Object(r.b)("p",null,"生成实例时会把图1中的 ",Object(r.b)("inlineCode",{parentName:"p"},"HeapObject")," 类从 VM Heap 分配出去。也就是说， ",Object(r.b)("inlineCode",{parentName:"p"},"HeapObject")," 类的实例是 GC 的对象。因此，我们没必要明确地销毁实例。 ",Object(r.b)("inlineCode",{parentName:"p"},"HeapObject")," 类是用于生成 GC 对象，也就是实例的，所以可以说是本章中最为重要的类。"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"HeapObject")," 类实例(对象)必定存有指向 ",Object(r.b)("inlineCode",{parentName:"p"},"Map")," 类实例(map对象)的指针。本文将其称为 ",Object(r.b)("inlineCode",{parentName:"p"},"map地址")," 。这个 ",Object(r.b)("inlineCode",{parentName:"p"},"Map")," 类负责管理对象的型信息，例如保留实例的大小和型的种类等。 ",Object(r.b)("inlineCode",{parentName:"p"},"Map")," 这个名字来源于 ",Object(r.b)("inlineCode",{parentName:"p"},"SelfVM")," 。"),Object(r.b)("h3",{id:"内嵌对象"},"内嵌对象"),Object(r.b)("p",null,"这里所说的“内嵌对象”指的是不经过VMHeap的对象分配，而把对象的信息直接嵌人指针本身的对象。它跟C++.上的int、double、 float 等“直接数据”是不同的东西。"),Object(r.b)("p",null,"Rubinius的内嵌对象包括以下几种:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"number(数值)"),Object(r.b)("li",{parentName:"ol"},"symbol(符号)"),Object(r.b)("li",{parentName:"ol"},"true、false"),Object(r.b)("li",{parentName:"ol"},"null、undefined")),Object(r.b)("p",null,"下面就以其中的Number 为例来说明。 Number 不会分配 VM Heap 的对象，而是把信息嵌入指针本身。"),Object(r.b)("p",null,"为什么要这么办呢?这是为了实现高速化。因为 Number 是经常被使用的对象，所以把它一个一个地分配到 VM Heap 太浪费时间和资源了。因此才通过将信息本身嵌入指针来实现高速化。不过如果指针是32位的话， Number 只能处理不超过 31 位的数值。如果超过了31位，也就超过了嵌人的信息量，这样一来Number就会把对象当成  Bignum 分配到 VMHeap。"))}o.isMDXComponent=!0},388:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return u}));var r=t(0),a=t.n(r),c=a.a.createContext({}),i=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},b=function(e){var n=i(e.components);return a.a.createElement(c.Provider,{value:n},e.children)};var p="mdxType",l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},o=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,b=e.parentName,p=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),o=i(t),u=r,O=o[b+"."+u]||o[u]||l[u]||c;return t?a.a.createElement(O,Object.assign({},{ref:n},p,{components:t})):a.a.createElement(O,Object.assign({},{ref:n},p))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,i=new Array(c);i[0]=o;var b={};for(var l in n)hasOwnProperty.call(n,l)&&(b[l]=n[l]);b.originalType=e,b[p]="string"==typeof e?e:r,i[1]=b;for(var u=2;u<c;u++)i[u]=t[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}o.displayName="MDXCreateElement"}}]);