(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{249:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return p}));var l=t(0),r=t.n(l),a=r.a.createContext({}),i=function(e){var n=r.a.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=i(e.components);return r.a.createElement(a.Provider,{value:n},e.children)};var o="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=Object(l.forwardRef)((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,o=function(e,n){var t={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&-1===n.indexOf(l)&&(t[l]=e[l]);return t}(e,["components","mdxType","originalType","parentName"]),b=i(t),p=l,s=b[c+"."+p]||b[p]||u[p]||a;return t?r.a.createElement(s,Object.assign({},{ref:n},o,{components:t})):r.a.createElement(s,Object.assign({},{ref:n},o))}));function p(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=b;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[o]="string"==typeof e?e:l,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},76:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));t(0);var l=t(249);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}function a(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i={id:"merge-two-sorted-lists",title:"合并两个有序链表",sidebar_label:"合并两个有序链表"},c=[{value:"题目",id:"题目",children:[]},{value:"思路",id:"思路",children:[]},{value:"特殊测试",id:"特殊测试",children:[]},{value:"代码实现",id:"代码实现",children:[{value:"方法一：递归",id:"方法一：递归",children:[]},{value:"方法二：迭代",id:"方法二：迭代",children:[]}]},{value:"复杂度",id:"复杂度",children:[]}],o={rightToc:c},u="wrapper";function b(e){var n=e.components,t=a(e,["components"]);return Object(l.b)(u,r({},o,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"题源：《剑指Offer: 面试题 25》P145"),Object(l.b)("li",{parentName:"ul"},"在线：",Object(l.b)("a",r({parentName:"li"},{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/"}),"LeetCode: 21"))),Object(l.b)("h2",{id:"题目"},"题目"),Object(l.b)("p",null,"输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的，节点定义如下："),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{className:"language-js"}),"function ListNode(val) {\n    this.val = val;\n    this.next = null;\n}\n")),Object(l.b)("div",{align:"center"},Object(l.b)("img",{width:"580",src:"https://raw.githubusercontent.com/ThinkBucket/oss/master/u0mCYK.png"}),Object(l.b)("p",null,"图1：合并两个有序链表的过程")),Object(l.b)("h2",{id:"思路"},"思路"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"本质上是归并排序里的 ",Object(l.b)("inlineCode",{parentName:"li"},"merge")," 函数在链表中的应用，只是不需要进行分割，直接合并即可"),Object(l.b)("li",{parentName:"ol"},"可以从递归和迭代两个思路去思考如何进行合并")),Object(l.b)("div",{align:"center"},Object(l.b)("img",{width:"420",src:"https://raw.githubusercontent.com/ThinkBucket/oss/master/NzXzvj.png"}),Object(l.b)("p",null,"图2：合并两个有序链表的过程")),Object(l.b)("h2",{id:"特殊测试"},"特殊测试"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"其中一个是空链表"),Object(l.b)("li",{parentName:"ul"},"两个只有一个节点的链表"),Object(l.b)("li",{parentName:"ul"},"链表中存在多个相等的值")),Object(l.b)("h2",{id:"代码实现"},"代码实现"),Object(l.b)("h3",{id:"方法一：递归"},"方法一：递归"),Object(l.b)("p",null,"当我们得到两个链表中值较小的头节点并把它链接到已经合并的链表之后，两个链表剩余的节点依然是有序的（如图2中间图所示），因此合并的步骤和之前是一样的，这就是典型的递归过程。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{className:"language-js"}),"/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nfunction mergeTwoLists (l1, l2) {\n    if (l1 === null) return l2;\n    if (l2 === null) return l1;\n    let ans;\n    if (l1.val < l2.val) {\n        ans = l1;\n        ans.next = mergeTwoLists(l1.next, l2);\n    } else {\n        ans = l2;\n        ans.next = mergeTwoLists(l1, l2.next);\n    }\n    return ans;\n}\n")),Object(l.b)("h3",{id:"方法二：迭代"},"方法二：迭代"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{className:"language-js"}),"/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nfunction mergeTwoLists (l1, l2) {\n    if (l1 === null) return l2;\n    if (l2 === null) return l1;\n    let ans = new ListNode();\n    let p = ans;\n    while (l1 && l2) {\n        if (l1.val < l2.val) {\n            p.next = l1;\n            l1 = l1.next;\n        } else {\n            p.next = l2;\n            l2 = l2.next;\n        }\n        p = p.next;\n    }\n    p.next = l1 || l2;\n    return ans.next;\n}\n")),Object(l.b)("p",null,"其中 ",Object(l.b)("inlineCode",{parentName:"p"},"p.next = l1 || l2;")," 可以替换成如下代码，本质上是归并排序里的 ",Object(l.b)("inlineCode",{parentName:"p"},"merge")," 函数："),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{className:"language-js"}),"while (l1) {\n    p.next = l1;\n    p = p.next;\n    l1 = l1.next;\n}\nwhile (l2) {\n    p.next = l2;\n    p = p.next;\n    l2 = l2.next;\n}\n")),Object(l.b)("h2",{id:"复杂度"},"复杂度"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"时间复杂度: O(n)"),Object(l.b)("li",{parentName:"ul"},"空间复杂度: O(1)")))}b.isMDXComponent=!0}}]);