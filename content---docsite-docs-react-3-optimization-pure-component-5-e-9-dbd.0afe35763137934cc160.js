(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{242:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));n(0);var r=n(388),o=n(389);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c={id:"pure-component",title:"纯组件",sidebar_label:"纯组件"},p=[{value:"PureRender",id:"purerender",children:[{value:"shouldComponentUpdate 作用",id:"shouldcomponentupdate-作用",children:[]}]},{value:"PureRender 本质",id:"purerender-本质",children:[]},{value:"组件提纯",id:"组件提纯",children:[]}],i={rightToc:p},s="wrapper";function b(e){var t=e.components,n=l(e,["components"]);return Object(r.b)(s,a({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"purerender"},"PureRender"),Object(r.b)("p",null,"PureRender 的核心在于 ",Object(r.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate")," 方法"),Object(r.b)("h3",{id:"shouldcomponentupdate-作用"},"shouldComponentUpdate 作用"),Object(r.b)("p",null,"shouldComponentUpdate 是 PureRender 的关键之所在，这个生命周期钩子函数决定了需不需要执行 render 方法。一个组件的状态更新到真实 dom 的更新大致流程如下："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-text"}),"SCU(shouldComponentUpdate)  --true--\x3e  render  --true--\x3e  vDOMEq  --true--\x3e realDOM\n")),Object(r.b)("p",null,"以 ",Object(r.b)("a",a({parentName:"p"},{href:"https://doc.react-china.org/docs/optimizing-performance.html#shouldcomponentupdate%E5%BA%94%E7%94%A8"}),"React 官方的例子")," 为例，补充说明如下："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"SCU"),"表明了",Object(r.b)("inlineCode",{parentName:"li"},"shouldComponentUpdate"),"的返回内容，绿色代表 true，会重新执行 render 方法；红色代表 false，不会执行 render 方法。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"vDOMEq"),"表明了执行 v-diff 后待渲染的 v-dom 与原始 v-dom 是否相等，绿色代表相等，红色代表不等，需要更新 dom。"),Object(r.b)("li",{parentName:"ul"},"圆圈的颜色表明这个组件是否需要更新 dom，红色和 ",Object(r.b)("inlineCode",{parentName:"li"},"vDOMEq")," 的值的颜色一致。")),Object(r.b)("p",null,Object(r.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/kmVWxE.jpg",alt:"shouldComponentUpdate"}))),Object(r.b)("p",null,"由于 C2 的",Object(r.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),"返回了",Object(r.b)("inlineCode",{parentName:"p"},"false"),"，React 不会调用 C2 的 render 方法，也就不会生成 v-dom，甚至不会在 C4 和 C5 上调用",Object(r.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),"。"),Object(r.b)("p",null,"对 C1 和 C3 来说，",Object(r.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),"返回了",Object(r.b)("inlineCode",{parentName:"p"},"true"),"，因此 React 会深入到分支中并检查它们。C6 的",Object(r.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),"返回了",Object(r.b)("inlineCode",{parentName:"p"},"true"),"，然后进行 v-diff，由于 ",Object(r.b)("inlineCode",{parentName:"p"},"vDOMEq")," 返回 false，React 会更新这个真实的 DOM 节点。"),Object(r.b)("p",null,"最后一个有趣的情况是 C8，",Object(r.b)("inlineCode",{parentName:"p"},"SCU")," 为 true 会调用 render 方法进行 v-diff，但是由于",Object(r.b)("inlineCode",{parentName:"p"},"vDOMEq")," 返回 true，因此它并没有更新这个真实的 DOM 节点。"),Object(r.b)("p",null,"分析完以上所有过程，我们会发现 React ",Object(r.b)("strong",{parentName:"p"},"只需更新 C6 的真实 DOM 节点"),"，因为它是不可避免的。对C8来说，它通过 v-diff 避免了更新真实 DOM，对 C2 的子树和 C7，它们甚至都没有执行比较，因为我们设置了",Object(r.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),"为",Object(r.b)("inlineCode",{parentName:"p"},"false"),"，",Object(r.b)("inlineCode",{parentName:"p"},"render"),"没有被调用。"),Object(r.b)(o.a,{type:"warning",mdxType:"Hint"},"虽然 C1 和 C3 节点被标记为红色，但实际更新真实 DOM 的时候只会更新 C6 节点。"),Object(r.b)("h2",{id:"purerender-本质"},"PureRender 本质"),Object(r.b)("p",null,"PureRender 的本质就是把 shouldComponentUpdate 函数用浅比较（shallowCompare）进行重写。"),Object(r.b)("p",null,"以下是 React 中 ",Object(r.b)("inlineCode",{parentName:"p"},"shallowCompare.js")," 的核心源码："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-javascript"}),"function shallowCompare(instance, nextProps, nextState) {\n  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);\n}\n")),Object(r.b)("p",null,"\0我们可以看到 shallowCompare 实际返回的是 shallowEqual 的",Object(r.b)("strong",{parentName:"p"},"取反"),"结果，那 shallowEqual 的源码则是核心所在，react 的 shallowEqual 其实就是引用的 ",Object(r.b)("inlineCode",{parentName:"p"},"fibjs")," 库的 shallowEqual 方法。假设 objA，objB 都是对象，提取关键代码的核心思想进行了改写："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-javascript"}),"function shallowEqual(objA, objB) {\n  if (objA === objB) {\n    return true;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // 关键代码，只需关注 props 中每一个是否相等，无需深入判断\n  return keysA.every(key => \n    Object.hasOwnProperty.call(objB, keys) &&\n    objA[key] === objB[key];\n  )\n}\n")),Object(r.b)("p",null,"当 shallowEqual 为 true 的时候，shouldComponentUpdate 为 false，组件不会更新，这样便减少了某些组件的状态更新导致的一些不必要的 render 和 v-diff。"),Object(r.b)("h2",{id:"组件提纯"},"组件提纯"),Object(r.b)("p",null,"非纯代码虽然有害但不可或缺。大多数应用都需要全局状态、网络请求、本地存储等等。你能做的只是将非纯代码从纯代码中隔离出来，这一过程又成为 ",Object(r.b)("strong",{parentName:"p"},"提纯（purification）"),"。"),Object(r.b)("p",null,Object(r.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/b3Yv90.jpg",alt:"组件提纯类比图"}))),Object(r.b)("p",null,"孤立的非纯代码有明确的副作用，或对全局状态的依赖。在隔离状态下，非纯代码对系统中其余部分的不可预测性影响会降低很多。"))}b.isMDXComponent=!0},389:function(e,t,n){"use strict";var r=n(0),o=n.n(r),a=n(391),l=n.n(a),c=(n(390),{better:{name:"推荐",color:"#50c610",icon:o.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},o.a.createElement("g",null,o.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),o.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:o.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},o.a.createElement("g",null,o.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:o.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},o.a.createElement("g",null,o.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:o.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},o.a.createElement("g",null,o.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),o.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),o.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});t.a=function(e){var t=e.type,n=e.children;return o.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(c[t].color)}},o.a.createElement("div",{style:{float:"left"}},c[t].icon),o.a.createElement("div",{dangerouslySetInnerHTML:{__html:l()("<strong>".concat(c[t].name,"</strong>：").concat(n))}}))}},390:function(e,t,n){}}]);