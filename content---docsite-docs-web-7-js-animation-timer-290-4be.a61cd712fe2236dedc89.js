(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{256:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));n(0);var r=n(275);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i={id:"timer",title:"定时器",sidebar_label:"定时器"},c=[{value:'关于"this"的问题',id:"关于this的问题",children:[]},{value:"取消定时器的方法：",id:"取消定时器的方法：",children:[]},{value:"clearInterval(timer) 和 timer=null 区别",id:"clearintervaltimer-和-timernull-区别",children:[]},{value:"setTimeout和setInterval区别",id:"settimeout和setinterval区别",children:[]}],o={rightToc:c},u="wrapper";function p(e){var t=e.components,n=l(e,["components"]);return Object(r.b)(u,a({},o,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"setTimeout()和setInterval ()主要是自身会执行动画效果，它们在里面放入function和时间参数，然后即可以设置事件，比如点击按钮开始执行动画。定时器在JS基础部分主要研究的是异步编程相关的，这里我们主要关注一下它们的API部分："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"var timerID = setTimeout(function[, delay, param1, parm2...])\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"param1, ..., paramN (可选)\n附加参数，一旦定时器到期，它们会作为参数传递给function")),Object(r.b)("p",null,"返回值timerID是一个正整数，表示定时器的编号。这个值可以传递给clearTimeout()来取消该定时器。"),Object(r.b)("p",null,"需要注意的是setTimeout()和setInterval()共用一个编号池，技术上，clearTimeout()和 clearInterval() 可以互换。但是，为了避免混淆，不要混用取消定时函数。"),Object(r.b)("p",null,"在同一个对象上（一个window或者worker），setTimeout()或者setInterval()在后续的调用不会重用同一个定时器编号。但是不同的对象使用独立的编号池。"),Object(r.b)("h2",{id:"关于this的问题"},'关于"this"的问题'),Object(r.b)("p",null,"由setTimeout()调用的代码运行在与所在函数完全分离的执行环境上。这会导致，这些代码中包含的 this 关键字在严格模式和非严格模式都会指向 window (或全局)对象。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"var obj = {\n  a: 2,\n  foo: function() {\n      'use strict'\n      console.log(this.a)\n    }\n}\nvar a = 1\nsetTimeout(obj.foo, 0) // 1\n")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"备注：在严格模式下，setTimeout( )的回调函数里面的this仍然默认指向window对象， 并不是undefined。")),Object(r.b)("h2",{id:"取消定时器的方法："},"取消定时器的方法："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"window.clearInterval(intervalID)\n")),Object(r.b)("p",null,"intervalID就是刚才的timerID，要注意的是这并不是清除定时器，而是终止其执行，有点类似for循环里面的break的作用。clearTimeout也是类似。"),Object(r.b)("h2",{id:"clearintervaltimer-和-timernull-区别"},"clearInterval(timer) 和 timer=null 区别"),Object(r.b)("p",null,"clearInterval(timer)清除了timer指向的定时器，timer=null，是修改timer的指向，是timer这个变量不指向某个定时器，然而并没有清除这个定时器，不到终止计时器的作用，定时器依旧可以使用。"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-js"}),"var timer = setInterval(function(){\n  alert()\n  timer = null;\n}, 1000);\n")),Object(r.b)("p",null,"这段代码依然会不断运行。"),Object(r.b)("h2",{id:"settimeout和setinterval区别"},"setTimeout和setInterval区别"),Object(r.b)("p",null,"与setTimeout不同，你并不能保证到了时间间隔，代码就准能执行。如果你调用的函数需要花很长时间才能完成，那某些调用会被直接忽略。"),Object(r.b)("p",null,"如果确实要保证事件“匀速”被触发，那可以用希望的延迟减去上次调用所花时间，然后将得到的差值作为延迟动态指定给setTimeout。 不过，要注意的是JavaScript的计时器并不是非常精确。因此你不可能得到绝对“平均”的延迟，即使使用setInterval也不行，原因很多（比如垃圾回收、JavaScript是单线程的，等等）。此外，当前浏览器也会将最小的超时时间固定在4ms到15ms之间。因此不要指望一点误差也没有。"),Object(r.b)("p",null,Object(r.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/hm3Yaq.png",alt:null}))))}p.isMDXComponent=!0},275:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return s}));var r=n(0),a=n.n(r),l=a.a.createContext({}),i=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},c=function(e){var t=i(e.components);return a.a.createElement(l.Provider,{value:t},e.children)};var o="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,o=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),p=i(n),s=r,m=p[c+"."+s]||p[s]||u[s]||l;return n?a.a.createElement(m,Object.assign({},{ref:t},o,{components:n})):a.a.createElement(m,Object.assign({},{ref:t},o))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c[o]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<l;s++)i[s]=n[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);