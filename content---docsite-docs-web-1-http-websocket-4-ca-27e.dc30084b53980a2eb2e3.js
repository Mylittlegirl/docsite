(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{160:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));t(0);var o=t(249);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)t=c[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var a={id:"websocket",title:"Websocket",sidebar_label:"Websocket"},l=[],s={rightToc:l},p="wrapper";function b(e){var n=e.components,t=c(e,["components"]);return Object(o.b)(p,r({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,'HTTP 协议有一个缺陷：通信只能由客户端发起。这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用"轮询"：每隔一段时候，就发出一个询问，了解服务器有没有新的信息。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。'),Object(o.b)("p",null,"WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。WebSocket不是HTTP协议，HTTP只负责建立WebSocket连接。"),Object(o.b)("p",null,"它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。"),Object(o.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/EoAH0t.png",width:"425",height:"340"}),Object(o.b)("p",null,"其他特点包括："),Object(o.b)("p",null,"（1）建立在 TCP 协议之上，服务器端的实现比较容易。"),Object(o.b)("p",null,"（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。"),Object(o.b)("p",null,"（3）数据格式比较轻量，性能开销小，通信高效。"),Object(o.b)("p",null,"（4）可以发送文本，也可以发送二进制数据。"),Object(o.b)("p",null,"（5）没有同源限制，客户端可以与任意服务器通信。"),Object(o.b)("p",null,"（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"ws://example.com:80/some/path")),Object(o.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/f9ZdFk.png",width:"410",height:"310"}),Object(o.b)("p",null,"客户端的简单示例\nWebSocket 的用法相当简单。"),Object(o.b)("p",null,"下面是一个网页脚本的例子（点击这里看运行结果），基本上一眼就能明白。"),Object(o.b)("pre",null,Object(o.b)("code",r({parentName:"pre"},{className:"language-js"}),'var ws = new WebSocket("wss://echo.websocket.org");\nws.onopen = function(evt) { \n  console.log("Connection open ..."); \n  ws.send("Hello WebSockets!");\n};\nws.onmessage = function(evt) {\n  console.log( "Received Message: " + evt.data);\n  ws.close();\n};\nws.onclose = function(evt) {\n  console.log("Connection closed.");\n};      \n')),Object(o.b)("p",null,"更多内容请阅读：\n",Object(o.b)("a",r({parentName:"p"},{href:"http://www.ruanyifeng.com/blog/2017/05/websocket.html"}),"WebSocket 教程，作者：阮一峰"),"\n",Object(o.b)("a",r({parentName:"p"},{href:"http://www.ruanyifeng.com/blog/2017/05/websocket.html"}),"JavaScript 服务器推送技术之 WebSocket，作者：SHERlocked93")))}b.isMDXComponent=!0},249:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return u}));var o=t(0),r=t.n(o),c=r.a.createContext({}),a=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=a(e.components);return r.a.createElement(c.Provider,{value:n},e.children)};var s="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=Object(o.forwardRef)((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,l=e.parentName,s=function(e,n){var t={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===n.indexOf(o)&&(t[o]=e[o]);return t}(e,["components","mdxType","originalType","parentName"]),b=a(t),u=o,i=b[l+"."+u]||b[u]||p[u]||c;return t?r.a.createElement(i,Object.assign({},{ref:n},s,{components:t})):r.a.createElement(i,Object.assign({},{ref:n},s))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=b;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[s]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<c;u++)a[u]=t[u];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);