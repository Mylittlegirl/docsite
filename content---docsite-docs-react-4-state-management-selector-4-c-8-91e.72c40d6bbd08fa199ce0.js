(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{138:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return i}));n(0);var r=n(193);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c={id:"selector",title:"Selector",sidebar_label:"Selector"},l=[{value:"什么是 selector？",id:"什么是-selector？",children:[]},{value:"reselect 计算缓存",id:"reselect-计算缓存",children:[]}],p={rightToc:l},u="wrapper";function i(e){var t=e.components,n=o(e,["components"]);return Object(r.b)(u,a({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"什么是-selector？"},"什么是 selector？"),Object(r.b)("p",null,"mapStateToProps 中从状态树获取数据的方法也被叫做 selector，它主要用于从 redux 状态树获取数据时候的过滤和筛选，包括直接从状态树获取的数据的方法和计算推导状态的方法。"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"推荐"),"：在",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps"),"中尽量避免使用",Object(r.b)("inlineCode",{parentName:"p"},"_.get"),"去拿数据，从状态树推导数据的方法尽可能地封装到 selector 里。")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"推荐"),"：在所有地方使用 selector，即使是在一个细小的位置。这样的好处是你很容易在多个 selector 中发现重复的逻辑，抽出共用的方法。即使是从状态树上直接获取的状态（非推导状态），如果有多个地方在使用，也应当放在 selector 中，避免重复逻辑。")),Object(r.b)("h2",{id:"reselect-计算缓存"},"reselect 计算缓存"),Object(r.b)("p",null,"如果需要缓存之前 selectors 的计算结果","(","某些派生数据",")","，所以如果 selector 计算量非常大，每次更新都重新计算可能会带来性能问题，那么使用 reselect 能帮你省去这些没必要的重新计算。"),Object(r.b)("p",null,"reselect 提供 ",Object(r.b)("inlineCode",{parentName:"p"},"createSelector")," 函数来创建可记忆的 selector。",Object(r.b)("inlineCode",{parentName:"p"},"createSelector")," 接收一个 ",Object(r.b)("inlineCode",{parentName:"p"},"input-selectors 数组")," 和一个 ",Object(r.b)("inlineCode",{parentName:"p"},"转换函数")," 作为参数。如果 state tree 的改变会引起 input-selector 值变化，那么 selector 会调用转换函数，传入 input-selectors 作为参数，并返回结果。如果 input-selectors 的值和前一次的一样，它将会直接返回前一次计算的数据，而不会再调用一次转换函数。这样就可以避免不必要的计算，为性能带来提升。"),Object(r.b)("p",null,"示例："),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-javascript"}),"import { createSelector } from 'reselect';\nimport { get } from 'lodash';\n\nconst getTaxSubtotal = proforma => get(proforma, 'ubl.TaxTotal[0].TaxSubtotal');\nconst getTaxAmount = proforma => get(proforma, 'ubl.TaxTotal[0].TaxAmount');\n\nexport const getTaxTotal = createSelector(\n    [getTaxSubtotal, getTaxAmount],\n    (taxSubtotal, taxAmount) => ({\n        taxAmount,\n        taxSubtotal:\n            taxSubtotal &&\n            taxSubtotal.map(item => ({\n                taxableAmount: get(item, 'TaxableAmount.value'),\n                taxScheme: get(item, 'TaxCategory.TaxScheme.Name.value'),\n                taxAmount: get(item, 'TaxAmount.value')\n            }))\n    })\n);\n")),Object(r.b)("p",null,"弊端："),Object(r.b)("p",null,"reselect带来计算性能提升的同时，也增加了一些 input-selectors 和缓存数据，使得 selector 的逻辑变得更为琐碎，嵌套的逻辑也相应增加，可维护性在某种程度上会受到影响，在实际使用中要在衍生数据的计算性能和可维护性上做一个权衡。"))}i.isMDXComponent=!0},193:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return s}));var r=n(0),a=n.n(r),o=a.a.createContext({}),c=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=c(e.components);return a.a.createElement(o.Provider,{value:t},e.children)};var p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},i=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),i=c(n),s=r,b=i[l+"."+s]||i[s]||u[s]||o;return n?a.a.createElement(b,Object.assign({},{ref:t},p,{components:n})):a.a.createElement(b,Object.assign({},{ref:t},p))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=i;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:r,c[1]=l;for(var s=2;s<o;s++)c[s]=n[s];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}i.displayName="MDXCreateElement"}}]);