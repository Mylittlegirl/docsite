(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{212:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return i}));t(0);var a=t(396);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p={title:"ES6 Module",sidebar_label:"ES6 Module"},l=[{value:"概述",id:"概述",children:[]},{value:"export命令",id:"export命令",children:[{value:"export变量",id:"export变量",children:[]},{value:"export函数",id:"export函数",children:[]},{value:"export别名",id:"export别名",children:[]}]},{value:"import命令",id:"import命令",children:[{value:"注意事项：",id:"注意事项：",children:[]},{value:"import 别名",id:"import-别名",children:[]},{value:"模块整体加载",id:"模块整体加载",children:[]}]},{value:"export default 命令",id:"export-default-命令",children:[]},{value:"ES6 Module与CommonJS差异",id:"es6-module与commonjs差异",children:[{value:"整体加载VS静态加载",id:"整体加载vs静态加载",children:[]},{value:"拷贝VS引用",id:"拷贝vs引用",children:[]},{value:"严格模式",id:"严格模式",children:[]},{value:"循环依赖",id:"循环依赖",children:[]}]},{value:"参考链接",id:"参考链接",children:[]}],b={rightToc:l},c="wrapper";function i(e){var n=e.components,t=o(e,["components"]);return Object(a.b)(c,r({},b,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"概述"},"概述"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。")),Object(a.b)("p",null,"ES6模块功能主要由两个命令构成：",Object(a.b)("inlineCode",{parentName:"p"},"export"),"和",Object(a.b)("inlineCode",{parentName:"p"},"import"),"。",Object(a.b)("inlineCode",{parentName:"p"},"export"),"命令用于规定模块的对外接口，",Object(a.b)("inlineCode",{parentName:"p"},"import"),"命令用于输入其他模块提供的功能。"),Object(a.b)("h2",{id:"export命令"},"export命令"),Object(a.b)("h3",{id:"export变量"},"export变量"),Object(a.b)("p",null,"将profile文件看作模块导出，其中的变量"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// profile.js\nexport var firstName = 'Michael';\nexport var lastName = 'Jackson';\nexport var year = 1958;\n")),Object(a.b)("p",null,"等价于："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// profile.js\nvar firstName = 'Michael';\nvar lastName = 'Jackson';\nvar year = 1958;\n\nexport { firstName, lastName, year };\n")),Object(a.b)("p",null,"注意： 无论导出的是一个变量，还是多个变量，",Object(a.b)("inlineCode",{parentName:"p"},"{}"),"是必须的"),Object(a.b)("p",null,"错误写法："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"var firstName = 'Michael';\nexport firstName;\n")),Object(a.b)("h3",{id:"export函数"},"export函数"),Object(a.b)("p",null,"导出函数和类的语法与导出变量的一致"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"function f() {}\nexport f;\n\n// 正确\nexport function f() {};\n\n// 正确\nfunction f() {}\nexport {f}; //{}是必须的\n")),Object(a.b)("h3",{id:"export别名"},"export别名"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"export"),"导出的变量和函数可以被重命名"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"function v1() { ... }\nvar n = 1;\n\nexport {\n  v1 as streamV1,\n  v1 as streamLatestVersion\n  n as m\n};\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"export"),"命令可以出现在模块的任何位置，但必须处于模块顶层，处于块级作用域时会报错")),Object(a.b)("h2",{id:"import命令"},"import命令"),Object(a.b)("p",null,"和上面",Object(a.b)("inlineCode",{parentName:"p"},"export"),"导出模块相对应，",Object(a.b)("inlineCode",{parentName:"p"},"import"),"用来导入模块"),Object(a.b)("p",null,"使用",Object(a.b)("inlineCode",{parentName:"p"},"import"),"命令加载profile文件"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// main.js\nimport { firstName, lastName, year } from './profile.js';\n\nfunction setName(element) {\n  element.textContent = firstName + ' ' + lastName;\n}\n")),Object(a.b)("h3",{id:"注意事项："},"注意事项："),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},Object(a.b)("inlineCode",{parentName:"strong"},"import"),"命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"import"),"命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import {a} from './xxx.js'\n\na = {}; // Syntax Error : 'a' is read-only;\n\n"))),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"import"),"后面的",Object(a.b)("inlineCode",{parentName:"p"},"from"),"指定模块文件的位置，可以是相对路径，也可以是绝对路径，.js后缀可以省略。如果只是模块名，不带有路径，那么必须有配置文件，告诉 JavaScript引擎该模块的位置。")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"import"),"命令具有提升效果，在代码编译时，",Object(a.b)("inlineCode",{parentName:"p"},"import"),"会提升到整个模块的头部，首先执行。"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"foo();\n\nimport { foo } from 'my_module';\n")),Object(a.b)("p",{parentName:"li"},"上面的代码不会报错，因为",Object(a.b)("inlineCode",{parentName:"p"},"import"),"的执行早于",Object(a.b)("inlineCode",{parentName:"p"},"foo"),"的调用。这种行为的本质是，",Object(a.b)("inlineCode",{parentName:"p"},"import"),"命令是编译阶段执行的，在代码运行之前。")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"由于",Object(a.b)("inlineCode",{parentName:"p"},"import"),"是静态执行，所以不能使用表达式和变量，这些只有在运行时才能得到结果的语法结构。"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// 报错\nimport { 'f' + 'oo' } from 'my_module';\n\n// 报错\nlet module = 'my_module';\nimport { foo } from module;\n\n// 报错\nif (x === 1) {\n  import { foo } from 'module1';\n} else {\n  import { foo } from 'module2';\n}\n")),Object(a.b)("p",{parentName:"li"},"上面三种写法都会报错，因为它们用到了表达式、变量和if结构。在静态分析阶段，这些语法都是没法得到值的。")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"相同模块，多次引用只会加载一次"),Object(a.b)("pre",{parentName:"li"},Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import 'lodash';\nimport 'lodash';\n//上面代码加载了两次lodash，但是只会执行一次。\n\nimport { foo } from 'my_module';\nimport { bar } from 'my_module';\n// 等同于\nimport { foo, bar } from 'my_module';\n")))),Object(a.b)("h3",{id:"import-别名"},"import 别名"),Object(a.b)("p",null,"如果想为输入的变量重新取一个名字，",Object(a.b)("inlineCode",{parentName:"p"},"import"),"命令要使用as关键字，将输入的变量重命名。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import { lastName as surname } from './profile.js';\n")),Object(a.b)("p",null,"导入的",Object(a.b)("inlineCode",{parentName:"p"},"lastName"),"被重命名为",Object(a.b)("inlineCode",{parentName:"p"},"surname")),Object(a.b)("h3",{id:"模块整体加载"},"模块整体加载"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"除了指定加载某个输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// main.js\n\nimport { area, circumference } from './circle';\n\nconsole.log('圆面积：' + area(4));\nconsole.log('圆周长：' + circumference(14));\n上面写法是逐一指定要加载的方法，整体加载的写法如下。\n\nimport * as circle from './circle';\n\nconsole.log('圆面积：' + circle.area(4));\nconsole.log('圆周长：' + circle.circumference(14));\n")),Object(a.b)("h2",{id:"export-default-命令"},"export default 命令"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到export default命令，为模块指定默认输出。")),Object(a.b)("p",null," ",Object(a.b)("inlineCode",{parentName:"p"},"export default"),"命令有下面两种写法，两种是等效的。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"export default function foo() {\n  console.log('foo');\n}\n\n// 或者写成\n\nfunction foo() {\n  console.log('foo');\n}\n\nexport default foo;\n")),Object(a.b)("p",null,"对比默认输出和正常输出:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// 第一组\nexport default function crc32() { // 输出\n  // ...\n}\n\nimport crc32 from 'crc32'; // 输入\n// 等同于\n// import { default as crc32 } from 'crc32';\n\n// 第二组\nexport function crc32() { // 输出\n  // ...\n};\n\nimport {crc32} from 'crc32'; // 输入\n\n")),Object(a.b)("p",null,"第二组是不使用",Object(a.b)("inlineCode",{parentName:"p"},"export default"),"时，对应的",Object(a.b)("inlineCode",{parentName:"p"},"import"),"语句需要使用大括号。"),Object(a.b)("p",null,"因为",Object(a.b)("inlineCode",{parentName:"p"},"export default"),"命令其实只是输出一个叫做",Object(a.b)("inlineCode",{parentName:"p"},"default"),"的变量，所以它后面不能跟变量声明语句。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// 正确\nexport var a = 1;\n\n// 正确\nvar a = 1;\nexport default a;\n\n// 错误\nexport default var a = 1;\n")),Object(a.b)("p",null,"上面代码中，",Object(a.b)("inlineCode",{parentName:"p"},"export default a"),"的含义是将变量",Object(a.b)("inlineCode",{parentName:"p"},"a"),"的值赋给变量",Object(a.b)("inlineCode",{parentName:"p"},"default"),"。所以，最后一种写法会报错。"),Object(a.b)("p",null,"如果想在一条",Object(a.b)("inlineCode",{parentName:"p"},"import"),"语句中，同时输入默认方法和其他接口，可以写成下面这样。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import _, { each, forEach } from 'lodash';\n")),Object(a.b)("h2",{id:"es6-module与commonjs差异"},"ES6 Module与CommonJS差异"),Object(a.b)("h3",{id:"整体加载vs静态加载"},"整体加载VS静态加载"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块的设计思想是尽量的静态化，使得",Object(a.b)("strong",{parentName:"p"},"编译时就能确定模块的依赖关系"),"，以及输入和输出的变量。",Object(a.b)("inlineCode",{parentName:"p"},"CommonJS")," 和 ",Object(a.b)("inlineCode",{parentName:"p"},"AMD")," 模块，",Object(a.b)("strong",{parentName:"p"},"都只能在运行时确定这些东西"),"。比如，",Object(a.b)("inlineCode",{parentName:"p"},"CommonJS")," 模块就是对象，输入时必须查找对象属性。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// CommonJS模块\nlet { stat, exists, readFile } = require('fs');\n\n// 等同于\nlet _fs = require('fs');\nlet stat = _fs.stat;\nlet exists = _fs.exists;\nlet readfile = _fs.readfile;\n")),Object(a.b)("p",null,"上面代码的实质是",Object(a.b)("inlineCode",{parentName:"p"},"整体加载fs"),"模块（即加载fs的所有方法），生成一个对象（_fs），然后再从这个对象上面读取 3 个方法。这种加载称为“运行时加载”，因为只有运行时才能得到这个对象，导致完全没办法在编译时做“静态优化”。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块不是对象，而是通过",Object(a.b)("inlineCode",{parentName:"p"},"export"),"命令显式指定输出的代码，再通过import命令输入。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"\n// ES6模块\nimport { stat, exists, readFile } from 'fs';\n")),Object(a.b)("p",null,"上面代码的实质是从",Object(a.b)("inlineCode",{parentName:"p"},"fs"),"模块加载 3 个方法，其他方法不加载。",Object(a.b)("strong",{parentName:"p"},"这种加载称为“编译时加载”或者静态加载"),"，即 ",Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 可以在编译时就完成模块加载，效率要比 ",Object(a.b)("inlineCode",{parentName:"p"},"CommonJS")," 模块的加载方式高。当然，这也导致了没法引用 ",Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块本身，因为它不是对象。"),Object(a.b)("p",null,"由于 ",Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块是编译时加载，使得静态分析成为可能。有了它，就能进一步拓宽 ",Object(a.b)("inlineCode",{parentName:"p"},"JavaScript")," 的语法，比如引入宏（macro）和类型检验（type system）这些只能靠静态分析实现的功能。"),Object(a.b)("p",null,"除了静态加载带来的各种好处，",Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块还有以下好处。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"不再需要UMD模块格式了，将来服务器和浏览器都会支持 ",Object(a.b)("inlineCode",{parentName:"li"},"ES6")," 模块格式。目前，通过各种工具库，其实已经做到了这一点。"),Object(a.b)("li",{parentName:"ul"},"将来浏览器新 API 就能用模块格式提供，不再必须做成全局变量或者",Object(a.b)("inlineCode",{parentName:"li"},"navigator"),"对象的属性。"),Object(a.b)("li",{parentName:"ul"},"不再需要对象作为命名空间（比如",Object(a.b)("inlineCode",{parentName:"li"},"Math"),"对象），未来这些功能可以通过模块提供。")),Object(a.b)("h3",{id:"拷贝vs引用"},"拷贝VS引用"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"CommonJS")," 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块的运行机制与",Object(a.b)("inlineCode",{parentName:"p"},"CommonJS")," 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令",Object(a.b)("inlineCode",{parentName:"p"},"import"),"，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。原始值变了，",Object(a.b)("inlineCode",{parentName:"p"},"import"),"加载的值也会跟着变。因此，",Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块不会缓存运行结果，而是动态地去被加载的模块取值，并且变量总是绑定其所在的模块。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// lib.js\nexport let obj = {};\n\n// a.js\nimport { obj } from './lib';\n\nobj.prop = 123; // OK\nconsole.log('a.js', obj)\nobj = {}; // TypeError\n\n// b.js\nimport { obj } from './lib';\n\nconsole.log('b.js', obj)\n\n// {props: 123}\n// {props: 123}\n")),Object(a.b)("h3",{id:"严格模式"},"严格模式"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"ES6"),' 的模块自动采用严格模式，不管你有没有在模块头部加上"use strict";。尤其需要注意',Object(a.b)("inlineCode",{parentName:"p"},"this"),"的限制。",Object(a.b)("inlineCode",{parentName:"p"},"ES6")," 模块之中，顶层的",Object(a.b)("inlineCode",{parentName:"p"},"this"),"指向",Object(a.b)("inlineCode",{parentName:"p"},"undefined"),"，即不应该在顶层代码使用",Object(a.b)("inlineCode",{parentName:"p"},"this"),"。"),Object(a.b)("h3",{id:"循环依赖"},"循环依赖"),Object(a.b)("p",null,"a脚本的执行依赖b脚本，而b脚本的执行又依赖a脚本。"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"// a.js\nvar b = require('b');\n\n// b.js\nvar a = require('a');\n")),Object(a.b)("p",null,"对于",Object(a.b)("inlineCode",{parentName:"p"},"CommonJS"),"而言循环引用的时候会去执行引用的模块，并输出引用模块已经执行部分",Object(a.b)("inlineCode",{parentName:"p"},"exports"),"的值，还未执行的部分不会输出。"),Object(a.b)("p",null,"对于",Object(a.b)("inlineCode",{parentName:"p"},"ES6"),"的",Object(a.b)("inlineCode",{parentName:"p"},"import"),"而言，执行到",Object(a.b)("inlineCode",{parentName:"p"},"import"),"的时候，它不会去执行引入模块的代码，而只是返回模块的引用，只有在真正调用引用模块中的值的时候才会执行。也就是说",Object(a.b)("inlineCode",{parentName:"p"},"ES6"),"的本身不会关注代码是否在循环引用，这需要编写代码的人去保证在真正取值的时候能够取道值，不会出错。"),Object(a.b)("h2",{id:"参考链接"},"参考链接"),Object(a.b)("p",null,"《ECMAScript 6 入门》：",Object(a.b)("a",r({parentName:"p"},{href:"http://es6.ruanyifeng.com/#docs/module"}),"http://es6.ruanyifeng.com/#docs/module")),Object(a.b)("p",null,"JavaScript 模块的循环加载：",Object(a.b)("a",r({parentName:"p"},{href:"http://www.ruanyifeng.com/blog/2015/11/circular-dependency.html"}),"http://www.ruanyifeng.com/blog/2015/11/circular-dependency.html")))}i.isMDXComponent=!0},396:function(e,n,t){"use strict";t.d(n,"a",(function(){return l})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a),o=r.a.createContext({}),p=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},l=function(e){var n=p(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var b="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},i=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,b=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),i=p(t),m=a,j=i[l+"."+m]||i[m]||c[m]||o;return t?r.a.createElement(j,Object.assign({},{ref:n},b,{components:t})):r.a.createElement(j,Object.assign({},{ref:n},b))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=i;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[b]="string"==typeof e?e:a,p[1]=l;for(var m=2;m<o;m++)p[m]=t[m];return r.a.createElement.apply(null,p)}return r.a.createElement.apply(null,t)}i.displayName="MDXCreateElement"}}]);