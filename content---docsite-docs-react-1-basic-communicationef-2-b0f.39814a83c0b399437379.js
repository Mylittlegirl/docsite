(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{102:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return p}));n(0);var r=n(271);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c={id:"communication",title:"通信",sidebar_label:"通信"},i=[{value:"简单通信",id:"简单通信",children:[{value:"父传子",id:"父传子",children:[]},{value:"子传父",id:"子传父",children:[]}]},{value:"复杂通信",id:"复杂通信",children:[{value:"方式一：Redux 统一管理状态",id:"方式一：redux-统一管理状态",children:[]},{value:"方式二：逐级传递",id:"方式二：逐级传递",children:[]},{value:"方式三：context",id:"方式三：context",children:[]}]}],b={rightToc:i},l="wrapper";function p(e){var t=e.components,n=o(e,["components"]);return Object(r.b)(l,a({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("img",a({parentName:"p"},{src:"https://raw.githubusercontent.com/ThinkBucket/oss/master/RO2S67.jpg",alt:"组件之间的关系图谱"}))),Object(r.b)("h2",{id:"简单通信"},"简单通信"),Object(r.b)("h3",{id:"父传子"},"父传子"),Object(r.b)("p",null,"通讯是单向的，数据必须是由一方传到另一方。在 React 中，父组件可以向子组件通过传 props 的方式，向子组件进行通讯。"),Object(r.b)("p",null,Object(r.b)("a",a({parentName:"p"},{href:"https://jsbin.com/rixofod/1/edit?html,js,output"}),"demo")),Object(r.b)("h3",{id:"子传父"},"子传父"),Object(r.b)("p",null,"子组件向父组件通信，同样也需要父组件向子组件传递 props 进行通信，只是父组件传递的是",Object(r.b)("strong",{parentName:"p"},"作用域为父组件自身的函数"),"，子组件调用该函数，将子组件想要传递的信息作为参数，传递到父组件的作用域中。"),Object(r.b)("p",null,Object(r.b)("a",a({parentName:"p"},{href:"https://jsbin.com/gulebam/2/edit?html,js,output"}),"demo")),Object(r.b)("h2",{id:"复杂通信"},"复杂通信"),Object(r.b)("p",null,"复杂通信包括 ",Object(r.b)("strong",{parentName:"p"},"多级嵌套组件通信")," 和 ",Object(r.b)("strong",{parentName:"p"},"兄弟组件通信"),"，通信的方式基本上差不多，项目里面主要是三种方式："),Object(r.b)("h3",{id:"方式一：redux-统一管理状态"},"方式一：Redux 统一管理状态"),Object(r.b)("p",null,"在 ",Object(r.b)("inlineCode",{parentName:"p"},"container")," 里面直接在 ",Object(r.b)("inlineCode",{parentName:"p"},"mapStateToProps")," 里面从状态树或通过 ",Object(r.b)("inlineCode",{parentName:"p"},"selector")," 获取父组件的状态。"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"推荐"),"：超过两个层级的通信，推荐使用 Redux 去管理这个状态。")),Object(r.b)("h3",{id:"方式二：逐级传递"},"方式二：逐级传递"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"多级嵌套组件通信：",Object(r.b)("a",a({parentName:"li"},{href:"https://jsbin.com/yibazoh/6/edit?html,js,output"}),"demo")),Object(r.b)("li",{parentName:"ul"},"兄弟组件通信：",Object(r.b)("a",a({parentName:"li"},{href:"https://jsbin.com/fopikor/3/edit?html,js,output"}),"demo"))),Object(r.b)("h3",{id:"方式三：context"},"方式三：context"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"多级嵌套组件通信：",Object(r.b)("a",a({parentName:"li"},{href:"https://jsbin.com/yibazoh/6/edit?html,js,output"}),"demo")),Object(r.b)("li",{parentName:"ul"},"兄弟组件通信：原理同上demo")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("strong",{parentName:"p"},"注意"),"：React 官方并不建议大量使用 context，因为尽管它可以减少逐层传递，但当组件结构复杂的时候，我们并不知道 context 是从哪里传来的。context 就像一个全局变量，而全局变量正是导致应用走向混乱的罪魁祸首之一。")))}p.isMDXComponent=!0},271:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u}));var r=n(0),a=n.n(r),o=a.a.createContext({}),c=function(e){var t=a.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=c(e.components);return a.a.createElement(o.Provider,{value:t},e.children)};var b="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,b=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,m=p[i+"."+u]||p[u]||l[u]||o;return n?a.a.createElement(m,Object.assign({},{ref:t},b,{components:n})):a.a.createElement(m,Object.assign({},{ref:t},b))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[b]="string"==typeof e?e:r,c[1]=i;for(var u=2;u<o;u++)c[u]=n[u];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);