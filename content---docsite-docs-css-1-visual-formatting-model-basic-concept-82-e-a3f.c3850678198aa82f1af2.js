(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{112:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return s}));n(0);var l=n(438),i=n(439),a=n(442);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function r(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o={title:"基础概念",sidebar_label:"基础概念"},b=[{value:"可替换元素",id:"可替换元素",children:[]},{value:"包含块",id:"包含块",children:[]}],p={rightToc:b},m="wrapper";function s(e){var t=e.components,n=r(e,["components"]);return Object(l.b)(m,c({},p,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"可替换元素"},"可替换元素"),Object(l.b)("p",null,"可替换元素（replaced element）是CSS世界中的另一个派系。从名字上理解："),Object(l.b)("pre",null,Object(l.b)("code",c({parentName:"pre"},{className:"language-html"}),"<img src=”1.jpg”>\n")),Object(l.b)("p",null,"如果把上面 ",Object(l.b)("inlineCode",{parentName:"p"},"1.jpg")," 换成 ",Object(l.b)("inlineCode",{parentName:"p"},"2.jpg")," ，那么该图片是不是会被替换？其导致的现象就是该图片内容或者宽高就会变得不一样了，所以浏览器将这一类元素话费为可替换元素，并为其设置一些默认样式，还有一些属性（比如 ",Object(l.b)("inlineCode",{parentName:"p"},"src")," ,  ",Object(l.b)("inlineCode",{parentName:"p"},"width")," ），来决定元素的具体显示内容。"),Object(l.b)("p",null,"又比如 ",Object(l.b)("inlineCode",{parentName:"p"},"<img>")," ，在 HTML 和 CSS 都没有设置宽高，但其却有自己的宽高，因为其内容是可替换的："),Object(l.b)(a.a,{width:"450",align:"center",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/q8V0BB.jpg",mdxType:"Img"}),Object(l.b)("p",null,"又例如根据 ",Object(l.b)("inlineCode",{parentName:"p"},"<input>")," 标签的 ",Object(l.b)("inlineCode",{parentName:"p"},"type")," 属性来决定是显示输入框，还是单选按钮等。"),Object(l.b)("p",null,"HTML 中的 ",Object(l.b)("inlineCode",{parentName:"p"},"<img>、<input>、<button>、<textarea>、<select>、<object>、<iframe>、<video>、<canvas> "),"等都是替换元素。这些元素往往没有实际的内容，即是一个空元素。"),Object(l.b)("p",null,"可替换元素出了内容可替换外，还有以下一些特征："),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"内容的外观不受页面上的CSS影响"),"：需要利用浏览器暴露出来的类似appearance属性去修改。")),Object(l.b)(a.a,{width:"500",align:"center",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/2d38wr.png",mdxType:"Img"}),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"有自己的尺寸"),"：原则上是CSS尺寸>HTML尺寸>固有尺寸，具体计算规则可以参考《CSS世界》P47"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"在很多CSS属性上有自己的一套表现规则"),"：比如 ",Object(l.b)("inlineCode",{parentName:"li"},"vertical-align"))),Object(l.b)("p",null,"可替换元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。"),Object(l.b)("p",null,"简单来说，它们的内容不受当前文档的样式的影响。CSS 可以影响可替换元素的位置，但不会影响到可替换元素自身的内容。某些可替换元素，例如 ",Object(l.b)("inlineCode",{parentName:"p"},"<iframe>")," 元素，可能具有自己的样式表，但它们不会继承父文档的样式。"),Object(l.b)("p",null,"CSS 能对可替换元素产生的唯一影响在于，部分属性支持控制元素内容在其框中的位置或定位方式。"),Object(l.b)("h2",{id:"包含块"},"包含块"),Object(l.b)("p",null,"包含块（containing block）对非绝对定位元素就是 HTML ",Object(l.b)("strong",{parentName:"p"},"嵌套元素中的父元素"),"，当然它也是相对而言的，它影响着内部盒子的位置、大小等，但内部盒子也不完全受其包含块所限制。"),Object(l.b)(i.a,{type:"tip",mdxType:"Hint"},"我们常说“一个盒的包含块”表示“盒所在的包含块”，而不是它生成的包含块。如下图， `em` box的包含块指的是 `div.main1` 。"),Object(l.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/lTrogl.jpg"}),Object(l.b)("p",null,"包含块(containing block) 这个概念实际上大家一直都有接触，就是元素用来计算和定位的一个框。比方说，",Object(l.b)("inlineCode",{parentName:"p"},"width:50%")," ， 也就是宽度一半，那到底是哪个“元素”宽度的一半呢? 注意，这里的这个“元素”实际上就是指的“包含块”。有经验的人应该都知道，普通元素的百分比宽度是相对于父元素的 ",Object(l.b)("inlineCode",{parentName:"p"},"content box")," 宽度计算的，而绝对定位元素的宽度是相对于第一个 ",Object(l.b)("inlineCode",{parentName:"p"},"position")," 不为 ",Object(l.b)("inlineCode",{parentName:"p"},"static")," 的祖先元素计算的。实际上，大家已经和“包含块”打过交道了，对于这些计算规则，规范是有明确定义的，具体如下(剔除了不常用的部分内容)。"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"根元素(很多场景下可以看成是 ",Object(l.b)("inlineCode",{parentName:"li"},"<html>")," )被称为“初始包含块”，其尺寸等同于浏览器可视窗口的大小。"),Object(l.b)("li",{parentName:"ul"},"对于其他元素，如果该元素的 ",Object(l.b)("inlineCode",{parentName:"li"},"position")," 是 ",Object(l.b)("inlineCode",{parentName:"li"},"relative")," 或者 ",Object(l.b)("inlineCode",{parentName:"li"},"static")," ,则“包含块”由其最近的块容器祖先盒的 ",Object(l.b)("inlineCode",{parentName:"li"},"content box")," 边界形成。"),Object(l.b)("li",{parentName:"ul"},"如果元素 ",Object(l.b)("inlineCode",{parentName:"li"},"position:fixed")," , 则“包含块”是“初始包含块”。"),Object(l.b)("li",{parentName:"ul"},"如果元素 ",Object(l.b)("inlineCode",{parentName:"li"},"position:absolute")," ，则“包含块”由最近的 ",Object(l.b)("inlineCode",{parentName:"li"},"position")," 不为 ",Object(l.b)("inlineCode",{parentName:"li"},"static")," 的祖先元素建立，具体方式如下。")),Object(l.b)("p",null,"如果该祖先元素是纯 ",Object(l.b)("inlineCode",{parentName:"p"},"inline")," 元素，则规则略复杂:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"假设给内联元素的前后各生成一一个宽度为 0的内联盒子(inline box),则这两个内联盒子的 ",Object(l.b)("inlineCode",{parentName:"li"},"padding box")," 外面的包围盒就是内联元素的“包含块”;"),Object(l.b)("li",{parentName:"ul"},"如果该内联元素被跨行分割了，那么“包含块”是未定义的，也就是 CSS2.1 规范并没有明确定义，浏览器自行发挥。")),Object(l.b)("p",null,"否则，“包含块”由该祖先的 ",Object(l.b)("inlineCode",{parentName:"p"},"padding box")," 边界形成。"),Object(l.b)("p",null,"如果没有符合条件的祖先元素，则“包含块”是“初始包含块”。"))}s.isMDXComponent=!0},439:function(e,t,n){"use strict";var l=n(0),i=n.n(l),a=n(441),c=n.n(a),r=(n(440),{best:{name:"推荐",color:"#50c610",icon:i.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#50c610"}},i.a.createElement("g",null,i.a.createElement("path",{d:"M22 11.07V12a10 10 0 1 1-5.93-9.14"}),i.a.createElement("polyline",{points:"23 3 12 14 9 11"})))},must:{name:"强制",color:"#ff4642",icon:i.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"#ff4642",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",stroke:"none",className:"custom-hint__icon"},i.a.createElement("g",null,i.a.createElement("path",{d:"M512 992c-262.4 0-480-217.6-480-480 0-262.4 217.6-480 480-480s480 217.6 480 480C992 774.4 774.4 992 512 992zM512 108.8C288 108.8 108.8 288 108.8 512c0 224 179.2 403.2 403.2 403.2s403.2-179.2 403.2-403.2C915.2 288 736 108.8 512 108.8zM697.6 684.8l-12.8 12.8c-6.4 6.4-19.2 6.4-25.6 0L512 550.4l-140.8 140.8c-6.4 6.4-19.2 6.4-25.6 0l-12.8-12.8c-6.4-6.4-6.4-19.2 0-25.6L473.6 512 326.4 371.2C320 358.4 320 345.6 326.4 339.2l12.8-12.8C345.6 320 358.4 320 371.2 326.4L512 473.6l140.8-140.8c6.4-6.4 19.2-6.4 25.6 0l12.8 12.8c6.4 6.4 6.4 19.2 0 25.6L550.4 512l140.8 140.8C704 665.6 704 678.4 697.6 684.8z"})))},tip:{name:"提示",color:"#3884ff",icon:i.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",stroke:"none",className:"custom-hint__icon",style:{color:"#3884ff"}},i.a.createElement("g",null,i.a.createElement("path",{d:"M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11",fillRule:"evenodd"})))},warning:{name:"注意",color:"#fdbe12",icon:i.a.createElement("svg",{preserveAspectRatio:"xMidYMid meet",height:"1em",width:"1em",fill:"none",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",stroke:"currentColor",className:"custom-hint__icon",style:{color:"#fdbe12"}},i.a.createElement("g",null,i.a.createElement("circle",{cx:"12",cy:"12",r:"10"}),i.a.createElement("line",{x1:"12",y1:"8",x2:"12",y2:"12"}),i.a.createElement("line",{x1:"12",y1:"16",x2:"12",y2:"16"})))}});t.a=function(e){var t=e.type,n=e.children;return i.a.createElement("div",{className:"custom-hint",style:{borderLeft:"4px solid ".concat(r[t].color)}},i.a.createElement("div",{style:{float:"left"}},r[t].icon),i.a.createElement("div",{dangerouslySetInnerHTML:{__html:c()("<strong>".concat(r[t].name,"</strong>：").concat(n))}}))}},440:function(e,t,n){},442:function(e,t,n){"use strict";var l=n(0),i=n.n(l);t.a=function(e){var t=e.align,n=e.width,l=e.src,a=e.legend;return t?i.a.createElement("div",{align:t},i.a.createElement("img",{src:l,width:n}),a&&i.a.createElement("p",null,a)):i.a.createElement("img",{src:l,width:n})}}}]);