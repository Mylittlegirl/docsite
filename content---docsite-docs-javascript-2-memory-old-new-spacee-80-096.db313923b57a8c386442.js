(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{126:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return i}));n(0);var a=n(388);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l={title:"分代回收",sidebar_label:"分代回收"},b=[{value:"Node的GC特点",id:"node的gc特点",children:[]},{value:"新生代：Scavenge算法",id:"新生代：scavenge算法",children:[]},{value:"老生代：Mark-Sweep算法",id:"老生代：mark-sweep算法",children:[]},{value:"老生代：Mark-Compact算法",id:"老生代：mark-compact算法",children:[]}],o={rightToc:b},p="wrapper";function i(e){var t=e.components,n=c(e,["components"]);return Object(a.b)(p,r({},o,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h3",{id:"node的gc特点"},"Node的GC特点"),Object(a.b)("p",null,Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/v8/v8/wiki"}),"https://github.com/v8/v8/wiki")),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"64bit: 1.4GB"),Object(a.b)("li",{parentName:"ul"},"32bit: 0.7GB")),Object(a.b)("p",null,"无法读取大文件到内存，带着手镣铐跳舞。Why？"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"浏览器用不到。"),Object(a.b)("li",{parentName:"ul"},"GC，1.5GB垃圾需要1s左右的回收的时间，会阻塞JS主线程。")),Object(a.b)("img",{width:"400",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/6umXqr.jpg"}),Object(a.b)("img",{width:"400",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/x9XnBT.jpg"}),Object(a.b)("p",null,"process.memoryUsage返回一个对象，包含了 Node 进程的内存占用信息。该对象包含四个字段，单位是字节，含义如下："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"rss（resident set size）：所有内存占用，包括指令区和堆栈。"),Object(a.b)("li",{parentName:"ul"},'heapTotal："堆"占用的内存，包括用到的和没用到的。'),Object(a.b)("li",{parentName:"ul"},"heapUsed：用到的堆的部分。"),Object(a.b)("li",{parentName:"ul"},"external： V8 引擎内部的 C++ 对象占用的内存。")),Object(a.b)("p",null,"node程序启动时候可以手动设置，但启动后不能动态更改："),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-bash"}),"node --max-old-space-size=1700 app.js # 单位为MB\nnode --max-new-space-size=1024 app.js # 单位为KB，因为新生代空间比较小\n")),Object(a.b)("p",null,"GC的三大基础算法 ",Object(a.b)("a",r({parentName:"p"},{href:"https://segmentfault.com/a/1190000004665100#articleHeader4"}),"https://segmentfault.com/a/1190000004665100#articleHeader4")),Object(a.b)("p",null,"聊聊V8引擎的垃圾回收 ",Object(a.b)("a",r({parentName:"p"},{href:"https://juejin.im/post/5ad3f1156fb9a028b86e78be#heading-6"}),"https://juejin.im/post/5ad3f1156fb9a028b86e78be#heading-6")),Object(a.b)("p",null,"现代的垃圾回收器改良了算法，但是本质是相同的：可达内存被标记，其余的被当作垃圾回收。"),Object(a.b)("p",null,"特点："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"基于分代式垃圾回收机制"),Object(a.b)("li",{parentName:"ul"},"不同场景利于利用不同GC算法（和统计学相关）")),Object(a.b)("img",{width:"600",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/M2O65a.jpg"}),Object(a.b)("h2",{id:"新生代：scavenge算法"},"新生代：Scavenge算法"),Object(a.b)("p",null,"Scavenge，拷贝-收集算法，它将新生代划分为两半即 semi space ，将存活的对象从From空间拷贝到To空间，过程中也会判断是否需要将对象“晋升”到老生代，拷贝完后，From空间的对象将会被回收。然后将To空间“",Object(a.b)("strong",{parentName:"p"},"翻转"),"”成“From”空间，下次回收的时候再进行以上流程。"),Object(a.b)("p",null,"这是一种典型的以空间换时间的算法，空间利用率低，其速度也最快，只适用于生命周期短的场景。在64bit计算机上两块最大总共占32MB空间，故max-new-space-size 单位也是用KB。",Object(a.b)("strong",{parentName:"p"},"默认大小呢"),"？"),Object(a.b)("p",null,"晋升：对象多次拷贝后依然存活将会晋升到老生代。"),Object(a.b)("p",null,"晋升条件："),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"对象是否经历过Scavenge回收"),Object(a.b)("li",{parentName:"ul"},"To空间的内存占比是否超过25%（如果占比过高，To转成From后会影响后续内存分配）")),Object(a.b)("h2",{id:"老生代：mark-sweep算法"},"老生代：Mark-Sweep算法"),Object(a.b)("p",null,"V8 GC主要使用该算法。"),Object(a.b)("p",null,"Mark-Sweep，标记清除，分为标记和清除两个阶段。老生代空间的算法第一个阶段都是标记阶段。当变量进入执行环境的时候，比如",Object(a.b)("strong",{parentName:"p"},"函数中声明一个变量"),"，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了。"),Object(a.b)("p",null,"从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。可以使用任何方式来标记变量。比如，可以通过翻转某个特殊的位来记录一个变量何时进入环境，或者使用一个“进入环境的”变量列表及一个“离开环境的”变量列表来跟踪哪个变量发生了变化。如何标记变量并不重要，关键在于采取什么策略。"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"标记阶段：遍历老生代堆中所有对象（这些对象是从新生代晋升过来的），并",Object(a.b)("strong",{parentName:"li"},"标记存活对象"),"。"),Object(a.b)("li",{parentName:"ul"},"清除阶段：直接清除死亡对象（即没有标记的），但会造成碎片化（一小块区域可能永远不会被分配，也可能提前触发GC增大空间后可以解决，但这次是不必要的）")),Object(a.b)("p",null,"目前，IE、Firefox、Opera、Chrome和Safari的JavaScript实现使用的都是标记清除式的垃圾回收策略（或类似的策略），只不过垃圾收集的时间间隔互有不同。"),Object(a.b)("img",{width:"600",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/yWLjGW.jpg"}),Object(a.b)("img",{width:"300",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/8TjihR.jpg"}),Object(a.b)("h2",{id:"老生代：mark-compact算法"},"老生代：Mark-Compact算法"),Object(a.b)("p",null,"V8 GC辅助算法，当从新生代晋升过来的对象过大，空间不足时候才会使用该算法。"),Object(a.b)("p",null,"Mark-Compact，标记整理。它是Mark-Sweep算法的增强，让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。"),Object(a.b)("img",{width:"500",src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/o7N0wh.jpg"}))}i.isMDXComponent=!0},388:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return s}));var a=n(0),r=n.n(a),c=r.a.createContext({}),l=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},b=function(e){var t=l(e.components);return r.a.createElement(c.Provider,{value:t},e.children)};var o="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},i=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,b=e.parentName,o=function(e,t){var n={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===t.indexOf(a)&&(n[a]=e[a]);return n}(e,["components","mdxType","originalType","parentName"]),i=l(n),s=a,u=i[b+"."+s]||i[s]||p[s]||c;return n?r.a.createElement(u,Object.assign({},{ref:t},o,{components:n})):r.a.createElement(u,Object.assign({},{ref:t},o))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,l=new Array(c);l[0]=i;var b={};for(var p in t)hasOwnProperty.call(t,p)&&(b[p]=t[p]);b.originalType=e,b[o]="string"==typeof e?e:a,l[1]=b;for(var s=2;s<c;s++)l[s]=n[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}i.displayName="MDXCreateElement"}}]);