(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{344:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return s}));n(0);var l=n(396);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e}).apply(this,arguments)}function o(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c={id:"cors",title:"CORS",sidebar_label:"CORS"},p=[],b={rightToc:p},a="wrapper";function s(e){var t=e.components,n=o(e,["components"]);return Object(l.b)(a,r({},b,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"CORS是跨源资源共享（Cross-Origin Resource Sharing）的缩写。它是W3C标准，是跨源AJAX请求的根本解决方法。相比JSONP只能发GET请求，",Object(l.b)("strong",{parentName:"p"},"CORS允许任何类型的请求"),"。"),Object(l.b)("p",null,"它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。"),Object(l.b)("p",null,"CORS需要",Object(l.b)("strong",{parentName:"p"},"浏览器和服务器同时支持"),"。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。"),Object(l.b)("p",null,"整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。",Object(l.b)("strong",{parentName:"p"},"浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉"),"。"),Object(l.b)("p",null,"因此，实现CORS通信的",Object(l.b)("strong",{parentName:"p"},"关键是服务器"),"。只要服务器实现了CORS接口，就可以跨源通信。"),Object(l.b)("p",null,"两种请求\n浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。"),Object(l.b)("p",null,"只要同时满足以下两大条件，就属于简单请求。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"1.请求方法是以下三种方法之一：\nHEAD\nGET\nPOST\n2.HTTP的头信息不超出以下几种字段：\nAccept\nAccept-Language\nContent-Language\nLast-Event-ID\nContent-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain\n")),Object(l.b)("p",null,"凡是不同时满足上面两个条件，就属于非简单请求。"),Object(l.b)("p",null,"浏览器对这两种请求的处理，是不一样的。"),Object(l.b)("p",null,"简单请求基本流程"),Object(l.b)("p",null,"对于简单请求，浏览器会将其加工一下变成CORS请求，即在头信息之中，增加一个Origin字段。"),Object(l.b)("p",null,"下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")),Object(l.b)("p",null,"上面的头信息中，Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。"),Object(l.b)("p",null,"如果Origin指定的源，不在许可范围内，服务器会返回一个正常的HTTP回应。浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，从而浏览器抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。"),Object(l.b)("p",null,"如果Origin指定的域名在许可范围内，服务器返回的Response，会多出几个头信息字段。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n")),Object(l.b)("p",null,"上面的头信息之中，有三个与CORS请求相关的字段，都以Access-Control-开头。"),Object(l.b)("p",null,"（1）Access-Control-Allow-Origin"),Object(l.b)("p",null,"该字段是必须的。它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的请求。"),Object(l.b)("p",null,"（2）Access-Control-Allow-Credentials"),Object(l.b)("p",null,"该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。"),Object(l.b)("p",null,"（3）Access-Control-Expose-Headers"),Object(l.b)("p",null,"该字段可选。CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。上面的例子指定，getResponseHeader('FooBar')可以返回FooBar字段的值。"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"withCredentials 属性")),Object(l.b)("p",null,"上面说到，CORS请求默认不发送Cookie和HTTP认证信息。如果要把Cookie发到服务器，一方面要服务器同意，指定Access-Control-Allow-Credentials字段。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"Access-Control-Allow-Credentials: true\n")),Object(l.b)("p",null,"另一方面，开发者必须在AJAX请求中打开withCredentials属性。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"var xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n")),Object(l.b)("p",null,"否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。"),Object(l.b)("p",null,"但是，如果省略withCredentials设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭withCredentials。"),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"xhr.withCredentials = false;\n")),Object(l.b)("p",null,"需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的document.cookie也无法读取服务器域名下的Cookie。"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"非简单请求")),Object(l.b)("p",null,"是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。"),Object(l.b)("p",null,"非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，",Object(l.b)("strong",{parentName:"p"},'称为"预检"请求（preflight）'),"。"),Object(l.b)("p",null,"浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。"),Object(l.b)("p",null,"例如在代码中，HTTP请求的方法是DELETE，并且发送一系列自定义头信息",Object(l.b)("inlineCode",{parentName:"p"},"authorization,x-tradeshift-actorid,x-tradeshift-app,x-tradeshift-tenantid"),"。"),Object(l.b)("p",null,"浏览器通常会发两次请求，一次是预检请求，当得到服务器的肯定答复后会又发一次真正的请求："),Object(l.b)("p",null,Object(l.b)("img",r({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/jyd7ZJ.png",alt:null}))),Object(l.b)("p",null,'"预检"请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。'),Object(l.b)("p",null,'除了Origin字段，"预检"请求的头信息包括两个特殊字段。'),Object(l.b)("p",null,"（1）Access-Control-Request-Method"),Object(l.b)("p",null,"该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法，上例是DELETE。"),Object(l.b)("p",null,"（2）Access-Control-Request-Headers"),Object(l.b)("p",null,"该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段。"),Object(l.b)("p",null,"预检请求的回应"),Object(l.b)("p",null,'服务器收到"预检"请求以后，检查了Origin、Access-Control-Request-Method和Access-Control-Request-Headers字段以后，确认允许跨域请求，就可以做出回应。\n',Object(l.b)("img",r({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/wBmuWq.png",alt:null}))),Object(l.b)("p",null,"上面的HTTP回应中，关键的是Access-Control-Allow-Origin字段，表示",Object(l.b)("a",r({parentName:"p"},{href:"https://go.tradeshift.com%E5%8F%AF%E4%BB%A5%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E3%80%82%E8%AF%A5%E5%AD%97%E6%AE%B5%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%AE%BE%E4%B8%BA%E6%98%9F%E5%8F%B7%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%90%8C%E6%84%8F%E4%BB%BB%E6%84%8F%E8%B7%A8%E6%BA%90%E8%AF%B7%E6%B1%82%E3%80%82"}),"https://go.tradeshift.com可以请求数据。该字段也可以设为星号，表示同意任意跨源请求。")),Object(l.b)("pre",null,Object(l.b)("code",r({parentName:"pre"},{}),"Access-Control-Allow-Origin: *\n")),Object(l.b)("p",null,'如果服务器否定了"预检"请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。'),Object(l.b)("p",null,"（1）Access-Control-Allow-Methods"),Object(l.b)("p",null,'该字段必需，它的值是逗号分隔的一个字符串，表明服务器支持的所有跨域请求的方法。注意，返回的是所有支持的方法，而不单是浏览器请求的那个方法。这是为了避免多次"预检"请求。'),Object(l.b)("p",null,"（2）Access-Control-Allow-Headers"),Object(l.b)("p",null,'如果浏览器请求包括Access-Control-Request-Headers字段，则Access-Control-Allow-Headers字段是必需的。它也是一个逗号分隔的字符串，表明服务器支持的所有头信息字段，不限于浏览器在"预检"中请求的字段。'),Object(l.b)("p",null,"（3）Access-Control-Allow-Credentials"),Object(l.b)("p",null,"该字段与简单请求时的含义相同。"),Object(l.b)("p",null,"（4）Access-Control-Max-Age"),Object(l.b)("p",null,"该字段可选，用来指定本次预检请求的有效期，单位为秒。上面结果中，有效期是1h（3600秒），即允许缓存该条回应1h，在此期间，不用发出另一条预检请求。"),Object(l.b)("p",null,"浏览器的正常请求和回应"),Object(l.b)("p",null,'一旦服务器通过了"预检"请求，浏览器会发送一个正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。'),Object(l.b)("p",null,'下面是"预检"请求之后，浏览器的正常CORS请求。'),Object(l.b)("p",null,Object(l.b)("img",r({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/E2onl1.png",alt:null}))),Object(l.b)("p",null,"上面头信息的Origin字段是浏览器自动添加的。下面是服务器正常的回应。"),Object(l.b)("p",null,Object(l.b)("img",r({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/u82c3I.png",alt:null}))),Object(l.b)("p",null,"上面头信息中，Access-Control-Allow-Origin字段是每次回应都必定包含的。"))}s.isMDXComponent=!0},396:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return i}));var l=n(0),r=n.n(l),o=r.a.createContext({}),c=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},p=function(e){var t=c(e.components);return r.a.createElement(o.Provider,{value:t},e.children)};var b="mdxType",a={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=Object(l.forwardRef)((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,p=e.parentName,b=function(e,t){var n={};for(var l in e)Object.prototype.hasOwnProperty.call(e,l)&&-1===t.indexOf(l)&&(n[l]=e[l]);return n}(e,["components","mdxType","originalType","parentName"]),s=c(n),i=l,u=s[p+"."+i]||s[i]||a[i]||o;return n?r.a.createElement(u,Object.assign({},{ref:t},b,{components:n})):r.a.createElement(u,Object.assign({},{ref:t},b))}));function i(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,c=new Array(o);c[0]=s;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p[b]="string"==typeof e?e:l,c[1]=p;for(var i=2;i<o;i++)c[i]=n[i];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);