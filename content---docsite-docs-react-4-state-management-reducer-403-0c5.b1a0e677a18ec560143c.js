(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{122:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return b})),r.d(t,"rightToc",(function(){return u})),r.d(t,"default",(function(){return m}));r(0);var n=r(147);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var b={id:"reducer",title:"Reducer",sidebar_label:"Reducer"},u=[{value:"什么是 Reducer ?",id:"什么是-reducer-",children:[]},{value:"Reducer 模块化",id:"reducer-模块化",children:[]},{value:"Immutable",id:"immutable",children:[]}],l={rightToc:u},o="wrapper";function m(e){var t=e.components,r=c(e,["components"]);return Object(n.b)(o,a({},l,r,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h2",{id:"什么是-reducer-"},"什么是 Reducer ?"),Object(n.b)("p",null,"用于修改 Store 的",Object(n.b)("strong",{parentName:"p"},"纯函数"),"。"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"强制"),"：Reducer 一定要是纯函数，禁止使用非纯函数。")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"推荐"),"：Reducer 函数应该尽量简单，只是修改 Store 的操作，尽量不写业务代码。")),Object(n.b)("h2",{id:"reducer-模块化"},"Reducer 模块化"),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"推荐"),"：不同的模块应该有不同的 Reducer，最后通过 combineReducers 来 combine 到一起。")),Object(n.b)("p",null,"【问题】Reducer 的划分后之间的状态共享问题？否则一个 Reducer 会越来越大，case 的情况会越来越多，拆分后如何能很好地进行 Reducer 之间的通信和状态共享？"),Object(n.b)("h2",{id:"immutable"},"Immutable"),Object(n.b)("p",null,"复杂数据的深度拷贝是很花性能的，这个时候就可以使用 Immutable 来解决这个问题。Immutable 不可改变的意思。对 Immutable 生成的数据进行操作之后总是返回一个新的数据，原有的数据不会改变。"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-javascript"}),"import Immutable from 'immutable';\nconst map1 = Immutable.Map({a:1, b:2, c:3});\nconst map2 = map1.set('b', 50);\nmap1.get('b'); // 2\nmap2.get('b'); // 50\n")),Object(n.b)("p",null,"Immutable 通过",Object(n.b)("strong",{parentName:"p"},"结构共享"),"来解决的数据拷贝时的性能问题，数据被 set 的时候，Immutable 会只 clone 它的父级别以上的部分，其他保持不变，这样大家可以共享同样的部分，可以大大提高性能。如图所示："),Object(n.b)("p",null,Object(n.b)("img",a({parentName:"p"},{src:"https://raw.githubusercontent.com/ThinkBucket/oss/master/immutable.gif",alt:"Immutable 数据更新机制动态效果图"}))),Object(n.b)("p",null,"最后橙色的节点是结构共享的部分。"),Object(n.b)("p",null,"Immutable 有两个库："),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",a({parentName:"li"},{href:"https://github.com/facebook/immutable-js"}),"immutable-js"),"：Facebook 的项目，比较重，取数据必须用函数，对数据有极高的性能要求时用。"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",a({parentName:"li"},{href:"https://github.com/rtfeldman/seamless-immutable"}),"seamless-immutable"),"：精简版的 Immutable，取数据可以直接点取，大部分情况使用该库即可。")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"强制"),"：Reducer 初始化 initialState 时必须使用 Immutable 的数据类型，防止在 Reducer 外的其他地方对 Store 发生修改操作。")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("strong",{parentName:"p"},"推荐"),"：Reducer 初始化 initialState 时使用 ",Object(n.b)("strong",{parentName:"p"},"immutable-js")," 时建议用 Immutable.Map 方法而不是 fromJS 方法，效率更高。")))}m.isMDXComponent=!0},147:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return p}));var n=r(0),a=r.n(n),c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):Object.assign({},t,e)),r},u=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)};var l="mdxType",o={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,u=e.parentName,l=function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(r[n]=e[n]);return r}(e,["components","mdxType","originalType","parentName"]),m=b(r),p=n,i=m[u+"."+p]||m[p]||o[p]||c;return r?a.a.createElement(i,Object.assign({},{ref:t},l,{components:r})):a.a.createElement(i,Object.assign({},{ref:t},l))}));function p(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,b=new Array(c);b[0]=m;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u[l]="string"==typeof e?e:n,b[1]=u;for(var p=2;p<c;p++)b[p]=r[p];return a.a.createElement.apply(null,b)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);