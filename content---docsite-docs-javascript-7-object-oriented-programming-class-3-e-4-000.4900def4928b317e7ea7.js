(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{174:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));t(0);var r=t(390);function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s={title:"class",sidebar_label:"class"},c=[{value:"ES5和ES6在继承上的差别",id:"es5和es6在继承上的差别",children:[]}],l={rightToc:c},b="wrapper";function p(e){var n=e.components,t=a(e,["components"]);return Object(r.b)(b,o({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"前言：\nES6中引入了类似传统面向对象语言中“class”的概念。实际上这些关键字只是一些语法糖，底层实现还是通过原型链之间的委托关联关系实现继承。通过",Object(r.b)("a",o({parentName:"p"},{href:"https://babeljs.io/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=MYGwhgzhAEAKCmAnCB7AdtA3gKGtY6EALogK7BEqIAUaYAtvAJRa57REAWAlhAHR1GAXkHwAPmIBEAEXgAzMKRBFJAbjYBfNpQDKJbmgDm1JjnbRE8IqUQYA5ADkG8AFx2A1F14Dn6vFq1sUEgYACEUAE9oeAAPIng0ABMYBGR0M3xCEnJKGlFTNjwIUgAHJFpnJj92L35DBMT4ITtwiLtqrTxdfSMTDLxLa1toYrLEPm7EA2Mmd0loAFpoAHEG10lPHjq1juwNIA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=false&presets=es2015&prettier=true&targets=&version=7.4.5&externalPlugins="}),"Babel的转译"),"可以发现可以映射到ES5的寄生组合继承。"),Object(r.b)("h2",{id:"es5和es6在继承上的差别"},"ES5和ES6在继承上的差别"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"子类 this 生成顺序不同。ES5 的继承，先生成了子类实例，再调用父类的构造函数修饰子类实例。ES6 的继承，先生成父类实例，再调用子类的构造函数修饰父类实例。"),Object(r.b)("p",{parentName:"li"},"而这种差别可以直接体现在原生构造函数的继承上，原来我们很难自定义一个Array的子类："))),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"function MyArray() {\n  Array.apply(this, arguments); //先有子类的this,然后在子类this基础上，调用父类constructor来处理this\n}\n\nMyArray.prototype = Object.create(Array.prototype, {\n  constructor: {\n    value: MyArray,\n    writable: true,\n    enumerable: false,\n    configurable: true\n  }\n});\n\n")),Object(r.b)("p",null,"但完全无法使用 Array对象的一些方法属性"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),'//test\nvar colors = new MyArray();\ncolors[0] = "red";\ncolors.length  // 0\n\ncolors.length = 0;\ncolors[0]  // "red"\n')),Object(r.b)("p",null,"为什么呢？因为， Array.apply(this, arguments);是因为子类无法获得原生构造函数的内部属性，通过Array.apply()或者分配给原型对象都不行。原生构造函数会忽略apply方法传入的this，也就是说，原生构造函数的this无法绑定，导致拿不到内部属性。"),Object(r.b)("p",null,"ES6继承Array："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),'class MyArray extends Array {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\nvar arr = new MyArray();\n//test\nvar colors = new MyArray();\ncolors[0] = "red";\ncolors.length  // 1\n\ncolors.length = 0;\ncolors[0]  // undefined\n')),Object(r.b)("p",null,"主要是this对象创建顺序不同"),Object(r.b)("p",null,"ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。"),Object(r.b)("p",null,"注意："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"class NewObj extends Object{\n  constructor(){\n    super(...arguments);\n  }\n}\nvar o = new NewObj({attr: true});\no.attr === true  // false\n")),Object(r.b)("p",null,"上面代码中，NewObj继承了Object，但是无法通过super方法向父类Object传参。这是因为 ES6 改变了Object构造函数的行为，一旦发现Object方法不是通过new Object()这种形式调用，ES6 规定Object构造函数会忽略参数。"),Object(r.b)("ol",{start:2},Object(r.b)("li",{parentName:"ol"},Object(r.b)("strong",{parentName:"li"},"子类",Object(r.b)("strong",{parentName:"strong"},"proto"),"指向不同"),"。子类可以直接通过",Object(r.b)("strong",{parentName:"li"},"proto"),"寻址到父类。核心目的是实现静态方法继承。")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"class Super {}\nclass Sub extends Super {}\n\nconst sub = new Sub();\n\nSub.__proto__ === Super; // true\n")),Object(r.b)("p",null,"而通过 ES5 的方式，Sub.proto === Function.prototype"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"function Super() {}\nfunction Sub() {}\n\nSub.prototype = Object.create(Super.prototype);\nSub.prototype.constructor = Sub;\n\nvar sub = new Sub();\n\nSub.__proto__ === Function.prototype;  // true\n\n")),Object(r.b)("p",null,"在在babel解析中_inherits的实现大概是这样的，注意最后一句："),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"function _inherits(subClass, superClass) {\n  subClass.prototype = Object.create(\n      Foo.prototype, {\n          constructor: { \n              value: subClass, // 将constructor指向子类\n              writable: true, \n              configurable: true // babel 没有enumerable: false why?\n          }\n      }\n  );\n  subClass.__proto__ = superClass\n}\n")),Object(r.b)("p",null,"ES6继承对应的原型链其实是这样的：\n",Object(r.b)("img",o({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/HETr4Z.png",alt:null}))),Object(r.b)("ol",{start:3},Object(r.b)("li",{parentName:"ol"},"class 不会“变量提升”，类似于 let、const 声明变量，但会进入暂时性死区。")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"var Foo = function() {\n  this.foo = 21;\n};\n\n{\n  const foo = new Foo(); // ReferenceError: Foo is not defined\n  class Foo {\n    constructor() {\n      this.foo = 37;\n    }\n  }\n}\n")),Object(r.b)("ol",{start:4},Object(r.b)("li",{parentName:"ol"},"class 声明内部会启用严格模式。")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"// 引用一个未声明的变量\nfunction Bar() {\n  baz = 42; // it's ok\n}\nconst bar = new Bar();\n\nclass Foo {\n  constructor() {\n    fol = 42; // ReferenceError: fol is not defined\n  }\n}\nconst foo = new Foo();\n")),Object(r.b)("ol",{start:5},Object(r.b)("li",{parentName:"ol"},"class 的所有方法（包括静态方法和实例方法）都是不可枚举的。")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"// 引用一个未声明的变量\nfunction Bar() {\n  baz = 42; // it's ok\n}\nconst bar = new Bar();\n\nclass Foo {\n  constructor() {\n    fol = 42; // ReferenceError: fol is not defined\n  }\n}\nconst foo = new Foo();\n")),Object(r.b)("ol",{start:6},Object(r.b)("li",{parentName:"ol"},"class 的所有方法（包括静态方法和实例方法）都没有原型对象 prototype，所以也没有[","[construct]","]，不能使用 new 来调用。")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"function Bar() {\n  this.bar = 42;\n}\nBar.prototype.print = function() {\n  console.log(this.bar);\n};\n\nconst bar = new Bar();\nconst barPrint = new bar.print(); // it's ok\n\nclass Foo {\n  constructor() {\n    this.foo = 42;\n  }\n  print() {\n    console.log(this.foo);\n  }\n}\nconst foo = new Foo();\nconst fooPrint = new foo.print(); // TypeError: foo.print is not a constructor\n")))}p.isMDXComponent=!0},390:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return u}));var r=t(0),o=t.n(r),a=o.a.createContext({}),s=function(e){var n=o.a.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=s(e.components);return o.a.createElement(a.Provider,{value:n},e.children)};var l="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},p=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),p=s(t),u=r,i=p[c+"."+u]||p[u]||b[u]||a;return t?o.a.createElement(i,Object.assign({},{ref:n},l,{components:t})):o.a.createElement(i,Object.assign({},{ref:n},l))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=p;var c={};for(var b in n)hasOwnProperty.call(n,b)&&(c[b]=n[b]);c.originalType=e,c[l]="string"==typeof e?e:r,s[1]=c;for(var u=2;u<a;u++)s[u]=t[u];return o.a.createElement.apply(null,s)}return o.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);