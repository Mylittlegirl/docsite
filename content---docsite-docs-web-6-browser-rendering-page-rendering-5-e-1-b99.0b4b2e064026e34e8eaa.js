(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{248:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return b}));n(0);var r=n(277);function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l={id:"page-rendering",title:"页面渲染",sidebar_label:"页面渲染"},i=[{value:"浏览器页面渲染",id:"浏览器页面渲染",children:[]},{value:"CSSOM的构建会阻碍DOM树的解析吗？",id:"cssom的构建会阻碍dom树的解析吗？",children:[]},{value:"CSSOM的构建会阻碍页面的渲染吗？",id:"cssom的构建会阻碍页面的渲染吗？",children:[]},{value:"script脚本会影响页面渲染吗？",id:"script脚本会影响页面渲染吗？",children:[]},{value:"相关拓展",id:"相关拓展",children:[]}],p={rightToc:i},o="wrapper";function b(e){var t=e.components,n=c(e,["components"]);return Object(r.b)(o,a({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"浏览器页面渲染"},"浏览器页面渲染"),Object(r.b)("p",null,"浏览器工作流程大体分为如下三部分："),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"浏览器会解析三个东西："),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"HTML/SVG/XHTML"),"，解析这三种文件会产生一个DOM Tree。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"CSS"),"，解析 CSS 会产生 CSS Rule Tree。"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"Javascript"),"，主要是通过 DOM API和 CSSOM API来操作 DOM Tree 和 CSS Rule Tree。"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"解析完成后，浏览器引擎会通过 DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Render Tree 渲染树并不等同于 DOM Tree，因为",Object(r.b)("strong",{parentName:"li"},"一些像",Object(r.b)("inlineCode",{parentName:"strong"},"<head>"),"或 CSS 设置 ",Object(r.b)("inlineCode",{parentName:"strong"},"display:none")," 的节点"),"就没必要放在渲染树中了。"),Object(r.b)("li",{parentName:"ul"},"CSS Rule Tree 主要是为了完成匹配并把CSS Rule附加上 Render Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。"),Object(r.b)("li",{parentName:"ul"},"然后，计算每个 Frame（也就是每个Element）的位置，包括 ",Object(r.b)("inlineCode",{parentName:"li"},"layout")," 和 ",Object(r.b)("inlineCode",{parentName:"li"},"reflow")," 过程。"))),Object(r.b)("li",{parentName:"ol"},Object(r.b)("p",{parentName:"li"},"最后通过调用操作系统 Native GUI(图像用户接口)的 API 绘制。"))),Object(r.b)("p",null,Object(r.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/kBpnEt.png",alt:null}))),Object(r.b)("p",{align:"center"},"图1：DOM、CSSOM 和 Render Tree 关系"),Object(r.b)("p",null,Object(r.b)("a",a({parentName:"p"},{href:"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=zh-cn"}),"如图1所示"),"，",Object(r.b)("strong",{parentName:"p"},"在DOM树和CSS规则树合并成渲染树的时候会忽略",Object(r.b)("inlineCode",{parentName:"strong"},"<head>"),"等不可见节点和设置了样式为display:none的节点"),"。生成渲染树后然后进入布局，布局计算每个对象的精确位置和大小，然后通过绘制，呈现出页面。"),Object(r.b)("p",null,Object(r.b)("img",a({parentName:"p"},{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/yw9qb5brpt.png",alt:null}))),Object(r.b)("img",{src:"https://cosmos-x.oss-cn-hangzhou.aliyuncs.com/s6T92W.png",width:"650"}),Object(r.b)("p",null,"浏览器工作流程：构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。"),Object(r.b)("h2",{id:"cssom的构建会阻碍dom树的解析吗？"},"CSSOM的构建会阻碍DOM树的解析吗？"),Object(r.b)("p",null,"由上图可知，在页面渲染机制中，通常情况下DOM和CSSOM是",Object(r.b)("inlineCode",{parentName:"p"},"并行构建"),"的，两者互不干扰，所以CSSOM的构建不会阻碍DOM树的解析"),Object(r.b)("h2",{id:"cssom的构建会阻碍页面的渲染吗？"},"CSSOM的构建会阻碍页面的渲染吗？"),Object(r.b)("p",null,"只有CSSOM和DOM都构建完毕时，渲染树才会根据两者开始构建，所以在默认情况下，CSS 被视为阻塞渲染的资源，这意味着浏览器将不会渲染任何已处理的内容，直至 CSSOM 构建完毕。所以CSS也需要精简、减少Reflow和Repaint。"),Object(r.b)("h2",{id:"script脚本会影响页面渲染吗？"},"script脚本会影响页面渲染吗？"),Object(r.b)("p",null,"JavaScript的加载、解析与执行会阻塞DOM的构建，也就是说，在构建DOM时，HTML解析器若遇到了JavaScript，那么它会暂停构建DOM，将控制权移交给JavaScript引擎，等JavaScript引擎运行完毕，浏览器再从中断的地方恢复DOM构建。"),Object(r.b)("p",null,"此外，JavaScript不只是可以改DOM，它还可以更改样式，也就是它可以更改CSSOM。不完整的CSSOM是无法使用的，而JavaScript中想访问CSSOM并更改它，必须要能拿到完整的CSSOM。所以就导致了一个现象，如果浏览器尚未完成CSSOM的下载和构建，而我们却想在此时运行脚本，",Object(r.b)("strong",{parentName:"p"},"那么浏览器将延迟脚本执行和DOM构建，直至其完成CSSOM的下载和构建"),"。也就是说，在这种情况下，",Object(r.b)("strong",{parentName:"p"},"浏览器会先下载和构建CSSOM，然后再执行JavaScript，最后在继续构建DOM"),"。"),Object(r.b)("h2",{id:"相关拓展"},"相关拓展"),Object(r.b)("p",null,"相关内容: ",Object(r.b)("a",a({parentName:"p"},{href:"https://thinkbucket.github.io/docsite/docs/web/6.browser-rendering/DOMContentLoaded"}),"DOMContentLoaded, 深入了解一下")),Object(r.b)("p",null,"本文参考链接："),Object(r.b)("p",null,Object(r.b)("a",a({parentName:"p"},{href:"https://juejin.im/post/5b88ddca6fb9a019c7717096#heading-4"}),"参考链接一")),Object(r.b)("p",null,Object(r.b)("a",a({parentName:"p"},{href:"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css?hl=zh-cn"}),"参考链接二")))}b.isMDXComponent=!0},277:function(e,t,n){"use strict";n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return O}));var r=n(0),a=n.n(r),c=a.a.createContext({}),l=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},i=function(e){var t=l(e.components);return a.a.createElement(c.Provider,{value:t},e.children)};var p="mdxType",o={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,p=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),b=l(n),O=r,s=b[i+"."+O]||b[O]||o[O]||c;return n?a.a.createElement(s,Object.assign({},{ref:t},p,{components:n})):a.a.createElement(s,Object.assign({},{ref:t},p))}));function O(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,l=new Array(c);l[0]=b;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var O=2;O<c;O++)l[O]=n[O];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);