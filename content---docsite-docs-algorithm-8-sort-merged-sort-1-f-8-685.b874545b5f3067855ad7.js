(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{116:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return o}));t(0);var r=t(396);function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function a(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i={id:"merged-sort",title:"归并排序",sidebar_label:"归并排序"},c=[{value:"题目",id:"题目",children:[]},{value:"思路",id:"思路",children:[]},{value:"代码实现",id:"代码实现",children:[{value:"方法一：使用 slice 分割",id:"方法一：使用-slice-分割",children:[]},{value:"方法二：使用 left, right 索引分割",id:"方法二：使用-left-right-索引分割",children:[]}]},{value:"复杂度",id:"复杂度",children:[]},{value:"稳定性",id:"稳定性",children:[]}],b={rightToc:c},u="wrapper";function o(e){var n=e.components,t=a(e,["components"]);return Object(r.b)(u,l({},b,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"题源/在线：",Object(r.b)("a",l({parentName:"li"},{href:"https://leetcode-cn.com/problems/sort-an-array/"}),"LeetCode: 912"))),Object(r.b)("h2",{id:"题目"},"题目"),Object(r.b)("p",null,"给定一个整数数组 nums，使用归并排序将该数组升序排列。"),Object(r.b)("p",null,"示例 1："),Object(r.b)("pre",null,Object(r.b)("code",l({parentName:"pre"},{className:"language-text"}),"输入：[5,2,3,1]\n输出：[1,2,3,5]\n")),Object(r.b)("p",null,"示例 2："),Object(r.b)("pre",null,Object(r.b)("code",l({parentName:"pre"},{className:"language-text"}),"输入：[5,1,1,2,0,0]\n输出：[0,0,1,1,2,5]\n")),Object(r.b)("p",null,"提示："),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"1 <= A.length <= 10000"),Object(r.b)("li",{parentName:"ul"},"-50000 <= A","[i]"," <= 50000")),Object(r.b)("h2",{id:"思路"},"思路"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"先分割再合并"),Object(r.b)("li",{parentName:"ol"},"使用递归进行分割"),Object(r.b)("li",{parentName:"ol"},"使用迭代或者递归进行合并"),Object(r.b)("li",{parentName:"ol"},"如何尽量减少辅助内存的使用"),Object(r.b)("li",{parentName:"ol"},"排序的顺序从宏观上来说是从左到右逐渐有序的")),Object(r.b)("h2",{id:"代码实现"},"代码实现"),Object(r.b)("h3",{id:"方法一：使用-slice-分割"},"方法一：使用 ",Object(r.b)("inlineCode",{parentName:"h3"},"slice")," 分割"),Object(r.b)("p",null,"分割数组时直接将数组分割为两个新数组，合并时直接合并数组。"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"优点：思路简单，写法简单"),Object(r.b)("li",{parentName:"ul"},"缺点：空间复杂度略高，需要复制多个数组")),Object(r.b)("pre",null,Object(r.b)("code",l({parentName:"pre"},{className:"language-js"}),"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nfunction sortArray (nums) {\n    if (nums.length < 2) {\n        return nums;\n    }\n    let mid = nums.length >> 1;\n    let left = sortArray(nums.slice(0, mid));\n    let right = sortArray(nums.slice(mid));\n    return merge(left, right);\n}\n\nfunction merge (left, right) {\n    let ans = [];\n    let i = 0;\n    let j = 0;\n    while (i < left.length && j < right.length) {\n        left[i] > right[j] ? ans.push(right[j++]) : ans.push(left[i++]);\n    }\n    while (i < left.length) {\n        ans.push(left[i++]);\n    }\n    while (j < right.length) {\n        ans.push(right[j++]);\n    }\n    return ans;\n}\n")),Object(r.b)("p",null,"递归版 ",Object(r.b)("inlineCode",{parentName:"p"},"merge"),"，在数据量比较大的时候会内存溢出，",Object(r.b)("a",l({parentName:"p"},{href:"https://leetcode-cn.com/submissions/detail/31434415/testcase/"}),"test case"),":"),Object(r.b)("pre",null,Object(r.b)("code",l({parentName:"pre"},{className:"language-js"}),"function merge (left, right) {\n    if (!left.length) return right;\n    if (!right.length) return left;\n    let ans = [];\n    if (left[0] > right[0]) {\n        ans.push(right[0], ...merge(left, right.slice(1)));\n    } else {\n        ans.push(left[0], ...merge(left.slice(1), right));\n    }\n    return ans;\n}\n")),Object(r.b)("h3",{id:"方法二：使用-left-right-索引分割"},"方法二：使用 ",Object(r.b)("inlineCode",{parentName:"h3"},"left"),", ",Object(r.b)("inlineCode",{parentName:"h3"},"right")," 索引分割"),Object(r.b)("p",null,"记录数组的索引，使用 ",Object(r.b)("inlineCode",{parentName:"p"},"left"),"、",Object(r.b)("inlineCode",{parentName:"p"},"right")," 两个索引来限定当前分割的数组。"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"优点：空间复杂度低，只需一个 ans 辅助空间，不需要拷贝数组"),Object(r.b)("li",{parentName:"ul"},"缺点：",Object(r.b)("inlineCode",{parentName:"li"},"sortArray")," 函数略显复杂")),Object(r.b)("pre",null,Object(r.b)("code",l({parentName:"pre"},{className:"language-js"}),"function sortArray (nums, from = 0, to = nums.length - 1) {\n    if (from === to) {\n        return [nums[from]];\n    }\n    let mid = from + (to - from >> 1);\n    let left = sortArray(nums, from, mid);\n    let right = sortArray(nums, mid + 1, to);\n    return merge(left, right);\n}\n")),Object(r.b)("h2",{id:"复杂度"},"复杂度"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"时间复杂度: O(nlogn)"),Object(r.b)("li",{parentName:"ul"},"空间复杂度: O(n)")),Object(r.b)("h2",{id:"稳定性"},"稳定性"),Object(r.b)("p",null,"稳定"))}o.isMDXComponent=!0},396:function(e,n,t){"use strict";t.d(n,"a",(function(){return c})),t.d(n,"b",(function(){return p}));var r=t(0),l=t.n(r),a=l.a.createContext({}),i=function(e){var n=l.a.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},c=function(e){var n=i(e.components);return l.a.createElement(a.Provider,{value:n},e.children)};var b="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},o=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,b=function(e,n){var t={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===n.indexOf(r)&&(t[r]=e[r]);return t}(e,["components","mdxType","originalType","parentName"]),o=i(t),p=r,s=o[c+"."+p]||o[p]||u[p]||a;return t?l.a.createElement(s,Object.assign({},{ref:n},b,{components:t})):l.a.createElement(s,Object.assign({},{ref:n},b))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=o;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[b]="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=t[p];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,t)}o.displayName="MDXCreateElement"}}]);